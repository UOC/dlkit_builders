{
   "name": "ontology", 
   "version": "3.0.0", 
   "title": "Ontology Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Ontology OSID is an auxiliary service used to define subject matter\nthat can be related to ``OsidObjects``. Ontologies are an alternative to\ntagging where structure, restricted vocabulary, or localization of topic\nnames are desired.\n\nSubjects\n\n``Subjects`` are used to represent a topic and can be organized in a\nhierarchy to form an ontology.\n\nRelevancies\n\n``Subjects`` are related to OSID ``Ids`` with a ``Relevancy``. A\n``Relevancy`` is an ``OsidRelationship``.\n\nOntology Cataloging\n\n``Subjects`` and ``Relevancies`` are organized into ``Ontology``\ncatalogs.\n\nAn external ``Id`` may be mapped to an ``Ontology``. This mapping allows\n``OsidCatalogs`` to relate to a specific and sharable ``Ontology`` to\nconstrain a set of ``Subjects`` that may be relevant to a collection of\nexternal ``OsidObjects``.\n\nSub Packages\n\nThe Ontology OSID includes a rules subpackage for managing rules to\nenable subject relevancies and an Ontology Batch OSID for managing\n``Subjects,``  ``Relevancies,`` and ``Ontologies`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.ontology.OntologyProfile", 
         "shortname": "OntologyProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``OntologyProfile`` describes the interoperability among ontology services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_subject_lookup", 
            "supports_subject_query", 
            "supports_subject_search", 
            "supports_subject_admin", 
            "supports_subject_notification", 
            "supports_subject_hierarchy", 
            "supports_subject_hierarchy_design", 
            "supports_subject_ontology", 
            "supports_subject_ontology_assignment", 
            "supports_subject_smart_ontology", 
            "supports_relevancy_lookup", 
            "supports_relevancy_query", 
            "supports_relevancy_search", 
            "supports_relevancy_admin", 
            "supports_relevancy_notification", 
            "supports_ontology_lookup", 
            "supports_relevancy_ontology", 
            "supports_relevancy_ontology_assignment", 
            "supports_relevancy_smart_ontology", 
            "supports_ontology_query", 
            "supports_ontology_search", 
            "supports_ontology_admin", 
            "supports_ontology_notification", 
            "supports_ontology_hierarchy", 
            "supports_ontology_hierarchy_design", 
            "supports_ontology_assignment", 
            "supports_ontology_batch", 
            "supports_ontology_rules", 
            "get_subject_record_types", 
            "supports_subject_record_type", 
            "get_subject_search_record_types", 
            "supports_subject_search_record_type", 
            "get_relevancy_record_types", 
            "supports_relevancy_record_type", 
            "get_relevancy_search_record_types", 
            "supports_relevancy_search_record_type", 
            "get_ontology_record_types", 
            "supports_ontology_record_type", 
            "get_ontology_search_record_types", 
            "supports_ontology_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_lookup", 
               "doc": {
                  "headline": "Tests if a subject lookup service is supported.", 
                  "body": "        a subject lookup service defines methods to access subjects."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if subject lookup is supported, false\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if subject lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_query", 
               "doc": {
                  "headline": "Tests if a subject query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_search", 
               "doc": {
                  "headline": "Tests if a subject search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_admin", 
               "doc": {
                  "headline": "Tests if a subject administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_notification", 
               "doc": {
                  "headline": "Tests if subject notification is supported.", 
                  "body": "        Messages may be sent when subjects are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_hierarchy", 
               "doc": {
                  "headline": "Tests if a subject hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject hierarchy traversal is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_hierarchy_design", 
               "doc": {
                  "headline": "Tests if subject hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_ontology", 
               "doc": {
                  "headline": "Tests if a subject to ontology lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject ontology lookup session\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject ontology lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_ontology_assignment", 
               "doc": {
                  "headline": "Tests if a subject to ontology assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject ontology assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject ontology assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_smart_ontology", 
               "doc": {
                  "headline": "Tests if a subject smart ontology session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if subject smart ontology session\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if subject smart ontology session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_lookup", 
               "doc": {
                  "headline": "Tests if a subject relevancy lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_query", 
               "doc": {
                  "headline": "Tests if a relevancy query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_search", 
               "doc": {
                  "headline": "Tests if a relevancy search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_admin", 
               "doc": {
                  "headline": "Tests if a relevancy administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_notification", 
               "doc": {
                  "headline": "Tests if relevancy notification is supported.", 
                  "body": "        Messages may be sent when subject relevancies are created,\n        modified, or deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_lookup", 
               "doc": {
                  "headline": "Tests if an ontology lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_ontology", 
               "doc": {
                  "headline": "Tests if a relevancy to ontology lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy ontology lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy ontology lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_ontology_assignment", 
               "doc": {
                  "headline": "Tests if a relevancy to ontology assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy ontology assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy ontology assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_smart_ontology", 
               "doc": {
                  "headline": "Tests if a relevancy smart ontology session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relevancy smart ontology session\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relevancy smart ontology session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_query", 
               "doc": {
                  "headline": "Tests if an ontology query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_search", 
               "doc": {
                  "headline": "Tests if an ontology search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_admin", 
               "doc": {
                  "headline": "Tests if an ontology administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_notification", 
               "doc": {
                  "headline": "Tests if ontology notification is supported.", 
                  "body": "        Messages may be sent when ontologies are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_hierarchy", 
               "doc": {
                  "headline": "Tests if an ontology hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an ontology hierarchy traversal\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an ontology hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_hierarchy_design", 
               "doc": {
                  "headline": "Tests if ontology hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an ontology hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an ontology hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_assignment", 
               "doc": {
                  "headline": "Tests if ``Ids`` can be asssigned to ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an ontology hassignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an ontology hassignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_batch", 
               "doc": {
                  "headline": "Tests if an ontology batch service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology batch is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology batch is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_rules", 
               "doc": {
                  "headline": "Tests if an ontology rules service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if ontology rules is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if ontology rules is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Subject`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Subject`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Subject`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Subject`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): a ``Type``\n                indicating a ``Subject`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param subject_record_type: a ``Type`` indicating a ``Subject`` record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Subject`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Subject`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Subject`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Subject`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Subject`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``subject_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param subject_search_record_type: a ``Type`` indicating a ``Subject`` search record type\n        :type subject_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Relevancy`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Relevancy`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Relevancy`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Relevancy`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): a ``Type``\n                indicating a ``Relevnacy`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param relevancy_record_type: a ``Type`` indicating a ``Relevnacy`` record type\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Relevancy`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Relevancy`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Relevancy`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Relevancy`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``Relevancy`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``relevancy_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param relevancy_search_record_type: a ``Type`` indicating a ``Relevancy`` search record type\n        :type relevancy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Ontology`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Ontology`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Ontology`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Ontology`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): a ``Type``\n                indicating an ``Ontology`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ontology record\n                ``Type`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_record_type: a ``Type`` indicating an ``Ontology`` type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ontology record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ontology search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Ontology`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Ontology`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ontology search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_search_record_type (osid.type.Type): a ``Type``\n                indicating an ``Ontology`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record ``Type``\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``ontology_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param ontology_search_record_type: a ``Type`` indicating an ``Ontology`` search record type\n        :type ontology_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyManager", 
         "shortname": "OntologyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The ontology manager provides access to ontology sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``SubjectLookupSession:`` a session to look up subjects\n      * ``SubjectQuerySession:`` a session to query subjects ``None``\n      * ``SubjectSearchSession:`` a session to search subjects\n      * ``SubjectAdminSession:`` a session to create, modify and delete\n        subjects ``None``\n      * ``SubjectNotificationSession: a`` session to receive messages\n        pertaining to subject ```` changes\n      * ``SubjectHierarchySession:`` a session to traverse subject\n        hierarchies\n      * ``SubjectHierarchyDesignSession:`` a sesion to manage subject\n        hierarchies\n      * ``SubjectOntologySession:`` a session for retriieving subject\n        and ontology mappings\n      * ``SubjectOntologyAssignmentSession:`` a session for managing\n        subject and ontology mappings\n      * ``SubjectSmartOntologySession:`` a session to manage dynamic\n        ontologies of subjects\n    \n      * ``RelevancyLookupSession:`` a session to look up subject\n        relevancies\n      * ``RelevancyQuerySession:`` a session to query subject\n        relevancies ``None``\n      * ``RelevancySearchSession:`` a session to search subject\n        relevancies\n      * ``RelevancyAdminSession:`` a session to create, modify and\n        delete subject relevancies ``None``\n      * ``RelevancyNotificationSession: a`` session to receive messages\n        pertaining to subject relevancy ```` changes\n      * ``RelevancyOntologySession:`` a session for retriieving\n        relevancy and ontology mappings\n      * ``RelevancyOntologyAssignmentSession:`` a session for managing\n        relevancy and ontology mappings\n      * ``RelevancySmartOntologySession:`` a session to manage dynamic\n        ontologies of relevancies\n    \n      * ``OntologyLookupSession:`` a session to lookup ontologies\n      * ``OntologyQuerySession:`` a session to search ontologies\n      * ``OntologySearchSession`` : a session to search ontologies\n      * ``OntologyAdminSession`` : a session to create, modify and\n        delete ontologies\n      * ``OntologyNotificationSession`` : a session to receive messages\n        pertaining to ontology changes\n      * ``OntologyHierarchySession:`` a session to traverse the ontology\n        hierarchy\n      * ``OntologyHierarchyDesignSession:`` a session to manage the\n        ontology hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.ontology.OntologyProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "OntologyProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "ontology"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "ontology", 
               "name": "OntologyProfile"
            }
         ], 
         "method_names": [
            "get_subject_lookup_session", 
            "get_subject_lookup_session_for_ontology", 
            "get_subject_lookup_session_for_id", 
            "get_subject_query_session", 
            "get_subject_query_session_for_ontology", 
            "get_subject_search_session", 
            "get_subject_search_session_for_ontology", 
            "get_subject_admin_session", 
            "get_subject_admin_session_for_ontology", 
            "get_subject_notification_session", 
            "get_subject_notification_session_for_ontology", 
            "get_subject_hierarchy_session", 
            "get_subject_hierarchy_session_for_ontology", 
            "get_subject_hierarchy_session_for_id", 
            "get_subject_hierarchy_design_session", 
            "get_subject_hierarchy_design_session_for_ontology", 
            "get_subject_ontology_session", 
            "get_subject_ontology_assignment_session", 
            "get_subject_smart_ontology_session", 
            "get_relevancy_lookup_session", 
            "get_relevancy_lookup_session_for_ontology", 
            "get_relevancy_query_session", 
            "get_relevancy_query_session_for_ontology", 
            "get_relevancy_search_session", 
            "get_relevancy_search_session_for_ontology", 
            "get_relevancy_admin_session", 
            "get_relevancy_admin_session_for_ontology", 
            "get_relevancy_notification_session", 
            "get_relevancy_notification_session_for_ontology", 
            "get_relevancy_ontology_session", 
            "get_relevancy_ontology_assignment_session", 
            "get_relevancy_smart_ontology_session", 
            "get_ontology_lookup_session", 
            "get_ontology_query_session", 
            "get_ontology_search_session", 
            "get_ontology_admin_session", 
            "get_ontology_notification_session", 
            "get_ontology_hierarchy_session", 
            "get_ontology_hierarchy_design_session", 
            "get_ontology_assignment_session", 
            "get_ontology_batch_manager", 
            "get_ontology_rules_manager"
         ], 
         "methods": [
            {
               "name": "get_subject_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - a\n                ``SubjectLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_lookup_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - ``a\n                SubjectLookupSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_lookup_session_for_id", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service for the given ``Id`` assigned using the ``OntologyAssignmentSession``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - ``a\n                SubjectLookupSession``", 
               "error_doc": "        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuerySession) - a\n                ``SubjectQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectQuerySession``\n        :rtype: ``osid.ontology.SubjectQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject query service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectQuerySession) - a\n                ``SubjectQuerySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectQuerySession``\n        :rtype: ``osid.ontology.SubjectQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectSearchSession) - a\n                ``SubjectSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectSearchSession``\n        :rtype: ``osid.ontology.SubjectSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject search service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectSearchSession) - ``a\n                SubjectSearchSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectSearchSession``\n        :rtype: ``osid.ontology.SubjectSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectAdminSession) - a\n                ``SubjectAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectAdminSession``\n        :rtype: ``osid.ontology.SubjectAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_admin_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject admin service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectAdminSession) - ``a\n                SubjectAdminSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectAdminSession``\n        :rtype: ``osid.ontology.SubjectAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to subject changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_receiver (osid.ontology.SubjectReceiver): the\n                subject receiver\n", 
               "return_doc": "        return: (osid.ontology.SubjectNotificationSession) - a\n                ``SubjectNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``subject_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject_receiver: the subject receiver\n        :type subject_receiver: ``osid.ontology.SubjectReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectNotificationSession``\n        :rtype: ``osid.ontology.SubjectNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectReceiver", 
                     "var_name": "subject_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectReceiver"
               ], 
               "return_type": "osid.ontology.SubjectNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_notification_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject notification service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_receiver (osid.ontology.SubjectReceiver): the\n                subject receiver\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectNotificationSession) - ``a\n                SubjectNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``subject_receiver`` or ``ontology_id``\n                is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param subject_receiver: the subject receiver\n        :type subject_receiver: ``osid.ontology.SubjectReceiver``\n        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectNotificationSession``\n        :rtype: ``osid.ontology.SubjectNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``subject_receiver`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectReceiver", 
                     "var_name": "subject_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing subject hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_hierarchy() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject heirarchy traversal service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session_for_id", 
               "doc": {
                  "headline": "Gets the hierarchy session for the given ``Id`` assigned using the ``OntologyAssignmentSession``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing subject hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchyDesignSession) - a\n                ``SubjectHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_hierarchy_design() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchyDesignSession``\n        :rtype: ``osid.ontology.SubjectHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_design_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject heirarchy design service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchyDesignSession) - a\n                ``SubjectHierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy_design()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchyDesignSession``\n        :rtype: ``osid.ontology.SubjectHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_ontology_session", 
               "doc": {
                  "headline": "Gets the session retrieving subject ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectOntologySession) - a\n                ``SubjectOntologySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_ontology() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectOntologySession``\n        :rtype: ``osid.ontology.SubjectOntologySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectOntologySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session managing subject ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectOntologyAssignmentSession) - a\n                ``SubjectOntologyAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_ontology_assignment()\n                is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectOntologyAssignmentSession``\n        :rtype: ``osid.ontology.SubjectOntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectOntologyAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_smart_ontology_session", 
               "doc": {
                  "headline": "Gets the session managing subject smart ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.SubjectSmartOntologySession) - a\n                ``SubjectSmartOntologySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_smart_ontology() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectSmartOntologySession``\n        :rtype: ``osid.ontology.SubjectSmartOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_smart_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_smart_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectSmartOntologySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyLookupSession) - a\n                ``RelevancyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelevancyLookupSession``\n        :rtype: ``osid.ontology.RelevancyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_lookup_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy lookup service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancyLookupSession) - ``a\n                RelevancyLookupSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyLookupSession``\n        :rtype: ``osid.ontology.RelevancyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQuerySession) - a\n                ``RelevancyQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelevancyQuerySession``\n        :rtype: ``osid.ontology.RelevancyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy query service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancyQuerySession) - ``a\n                RelevancyQuerySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyQuerySession``\n        :rtype: ``osid.ontology.RelevancyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancySearchSession) - a\n                ``RelevancySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelevancySearchSession``\n        :rtype: ``osid.ontology.RelevancySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy search service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancySearchSession) - ``a\n                RelevancySearchSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancySearchSession``\n        :rtype: ``osid.ontology.RelevancySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyAdminSession) - a\n                ``RelvancyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelvancyAdminSession``\n        :rtype: ``osid.ontology.RelevancyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_admin_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy admin service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancyAdminSession) - ``a\n                RelevancyAdminSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyAdminSession``\n        :rtype: ``osid.ontology.RelevancyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to relevancy changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_receiver (osid.ontology.RelevancyReceiver):\n                the relevancy receiver\n", 
               "return_doc": "        return: (osid.ontology.RelevancyNotificationSession) - ``a\n                _relevancy_notification_session``", 
               "error_doc": "        raise:  NullArgument - ``relevancy_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relevancy_receiver: the relevancy receiver\n        :type relevancy_receiver: ``osid.ontology.RelevancyReceiver``\n", 
               "sphinx_return_doc": "        :return: ``a _relevancy_notification_session``\n        :rtype: ``osid.ontology.RelevancyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyReceiver", 
                     "var_name": "relevancy_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyReceiver"
               ], 
               "return_type": "osid.ontology.RelevancyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_notification_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy notification service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_receiver (osid.ontology.RelevancyReceiver):\n                the subject receiver\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancyNotificationSession) - ``a\n                _relevancy_notification_session``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``relevancy_receiver`` or ``ontology_id``\n                is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param relevancy_receiver: the subject receiver\n        :type relevancy_receiver: ``osid.ontology.RelevancyReceiver``\n        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _relevancy_notification_session``\n        :rtype: ``osid.ontology.RelevancyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``relevancy_receiver`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyReceiver", 
                     "var_name": "relevancy_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_ontology_session", 
               "doc": {
                  "headline": "Gets the session retrieving relevancy ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyOntologySession) - a\n                ``RelevancyOntologySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_ontology() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelevancyOntologySession``\n        :rtype: ``osid.ontology.RelevancyOntologySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyOntologySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session managing relevancy ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyOntologyAssignmentSession) - a\n                ``RelevancyOntologyAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_relevancy_ontology_assignment() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelevancyOntologyAssignmentSession``\n        :rtype: ``osid.ontology.RelevancyOntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyOntologyAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_smart_ontology_session", 
               "doc": {
                  "headline": "Gets the session managing relevancy smart ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n", 
               "return_doc": "        return: (osid.ontology.RelevancySmartOntologySession) - a\n                ``RelevancySmartOntologySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_smart_ontology() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancySmartOntologySession``\n        :rtype: ``osid.ontology.RelevancySmartOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_smart_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_smart_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancySmartOntologySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyLookupSession) - an\n                ``OntologyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_lookup() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyLookupSession``\n        :rtype: ``osid.ontology.OntologyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuerySession) - an\n                ``OntologyQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_query() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyQuerySession``\n        :rtype: ``osid.ontology.OntologyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologySearchSession) - an\n                ``OntologySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_search() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologySearchSession``\n        :rtype: ``osid.ontology.OntologySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyAdminSession) - an\n                ``OntologyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_admin() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyAdminSession``\n        :rtype: ``osid.ontology.OntologyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to ontology service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_receiver (osid.ontology.OntologyReceiver): the\n                ontology receiver\n", 
               "return_doc": "        return: (osid.ontology.OntologyNotificationSession) - an\n                ``OntologyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``ontology_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_notification() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_receiver: the ontology receiver\n        :type ontology_receiver: ``osid.ontology.OntologyReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyNotificationSession``\n        :rtype: ``osid.ontology.OntologyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyReceiver", 
                     "var_name": "ontology_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyReceiver"
               ], 
               "return_type": "osid.ontology.OntologyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing ontology hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyHierarchySession) - an\n                ``OntologyHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_hierarchy() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyHierarchySession``\n        :rtype: ``osid.ontology.OntologyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing ontology hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyHierarchyDesignSession) - an\n                ``OntologyHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_hierarchy_design()\n                is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyHierarchyDesignSession``\n        :rtype: ``osid.ontology.OntologyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session to assign ``Ids`` to ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyAssignmentSession) - an\n                ``OntologyAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_assignment() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyAssignmentSession``\n        :rtype: ``osid.ontology.OntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_batch_manager", 
               "doc": {
                  "headline": "Gets the ontology batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.batch.OntologyBatchManager) - an\n                ``OntologyBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyBatchManager``\n        :rtype: ``osid.ontology.batch.OntologyBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.batch.OntologyBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_rules_manager", 
               "doc": {
                  "headline": "Gets the ontology rules service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.rules.OntologyRulesManager) - an\n                ``OntologyRulesManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_rules() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyRulesManager``\n        :rtype: ``osid.ontology.rules.OntologyRulesManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_rules() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_rules()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.rules.OntologyRulesManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyProxyManager", 
         "shortname": "OntologyProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The authentication manager provides access to ontology sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy``. The\n    sessions included in this manager are:\n\n      * ``SubjectLookupSession:`` a session to look up subjects\n      * ``SubjectQuerySession:`` a session to query subjects ``None``\n      * ``SubjectSearchSession:`` a session to search subjects\n      * ``SubjectAdminSession:`` a session to create, modify and delete\n        subjects ``None``\n      * ``SubjectNotificationSession: a`` session to receive messages\n        pertaining to subject ```` changes\n      * ``SubjectHierarchySession:`` a session to traverse subject\n        hierarchies\n      * ``SubjectHierarchyDesignSession:`` a sesion to manage subject\n        hierarchies\n      * ``SubjectOntologySession:`` a session for retriieving subject\n        and ontology mappings\n      * ``SubjectOntologyAssignmentSession:`` a session for managing\n        subject and ontology mappings\n      * ``SubjectSmartOntologySession:`` a session to manage dynamic\n        ontologies of subjects\n    \n      * ``RelevancyLookupSession:`` a session to look up subject\n        relevancies\n      * ``RelevancyQuerySession:`` a session to query subject\n        relevancies ``None``\n      * ``RelevancySearchSession:`` a session to search subject\n        relevancies\n      * ``RelevancyAdminSession:`` a session to create, modify and\n        delete subject relevancies ``None``\n      * ``RelevancyNotificationSession: a`` session to receive messages\n        pertaining to subject relevancy ```` changes\n      * ``RelevancyOntologySession:`` a session for retriieving\n        relevancy and ontology mappings\n      * ``RelevancyOntologyAssignmentSession:`` a session for managing\n        relevancy and ontology mappings\n      * ``RelevancySmartOntologySession:`` a session to manage dynamic\n        ontologies of relevancies\n    \n      * ``OntologyLookupSession:`` a session to lookup ontologies\n      * ``OntologyQuerySession:`` a session to search ontologies\n      * ``OntologySearchSession`` : a session to search ontologies\n      * ``OntologyAdminSession`` : a session to create, modify and\n        delete ontologies\n      * ``OntologyNotificationSession`` : a session to receive messages\n        pertaining to ontology changes\n      * ``OntologyHierarchySession:`` a session to traverse the ontology\n        hierarchy\n      * ``OntologyHierarchyDesignSession:`` a session to manage the\n        ontology hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.ontology.OntologyProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "OntologyProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "ontology"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "ontology", 
               "name": "OntologyProfile"
            }
         ], 
         "method_names": [
            "get_subject_lookup_session", 
            "get_subject_lookup_session_for_ontology", 
            "get_subject_lookup_session_for_id", 
            "get_subject_query_session", 
            "get_subject_query_session_for_ontology", 
            "get_subject_search_session", 
            "get_subject_search_session_for_ontology", 
            "get_subject_admin_session", 
            "get_subject_admin_session_for_ontology", 
            "get_subject_notification_session", 
            "get_subject_notification_session_for_ontology", 
            "get_subject_hierarchy_session", 
            "get_subject_hierarchy_session_for_ontology", 
            "get_subject_hierarchy_session_for_id", 
            "get_subject_hierarchy_design_session", 
            "get_subject_hierarchy_design_session_for_ontology", 
            "get_subject_ontology_session", 
            "get_subject_ontology_assignment_session", 
            "get_subject_smart_ontology_session", 
            "get_relevancy_lookup_session", 
            "get_relevancy_lookup_session_for_ontology", 
            "get_relevancy_query_session", 
            "get_relevancy_query_session_for_ontology", 
            "get_relevancy_search_session", 
            "get_relevancy_search_session_for_ontology", 
            "get_relevancy_admin_session", 
            "get_relevancy_admin_session_for_ontology", 
            "get_relevancy_notification_session", 
            "get_relevancy_notification_session_for_ontology", 
            "get_relevancy_ontology_session", 
            "get_relevancy_ontology_assignment_session", 
            "get_relevancy_smart_ontology_session", 
            "get_ontology_lookup_session", 
            "get_ontology_query_session", 
            "get_ontology_search_session", 
            "get_ontology_admin_session", 
            "get_ontology_notification_session", 
            "get_ontology_hierarchy_session", 
            "get_ontology_hierarchy_design_session", 
            "get_ontology_assignment_session", 
            "get_ontology_batch_proxy_manager", 
            "get_ontology_rules_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_subject_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - a\n                ``SubjectLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_lookup_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - ``a\n                SubjectLookupSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_lookup_session_for_id", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject lookup service for the given ``Id`` assigned using the ``OntologyAssignmentSession``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectLookupSession) - ``a\n                SubjectLookupSession``", 
               "error_doc": "        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectLookupSession``\n        :rtype: ``osid.ontology.SubjectLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectQuerySession) - a\n                ``SubjectQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subjec_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectQuerySession``\n        :rtype: ``osid.ontology.SubjectQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subjec_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject query service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectQuerySession) - a\n                ``SubjectQuerySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectQuerySession``\n        :rtype: ``osid.ontology.SubjectQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectSearchSession) - a\n                ``SubjectSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectSearchSession``\n        :rtype: ``osid.ontology.SubjectSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject search service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectSearchSession) - ``a\n                SubjectSearchSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectSearchSession``\n        :rtype: ``osid.ontology.SubjectSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectAdminSession) - a\n                ``SubjectAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectAdminSession``\n        :rtype: ``osid.ontology.SubjectAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_admin_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject admin service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectAdminSession) - ``a\n                SubjectAdminSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectAdminSession``\n        :rtype: ``osid.ontology.SubjectAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to subject changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_receiver (osid.ontology.SubjectReceiver): the\n                subject receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectNotificationSession) - a\n                ``SubjectNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``subject_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject_receiver: the subject receiver\n        :type subject_receiver: ``osid.ontology.SubjectReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectNotificationSession``\n        :rtype: ``osid.ontology.SubjectNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectReceiver", 
                     "var_name": "subject_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_notification_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject notification service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_receiver (osid.ontology.SubjectReceiver): the\n                subject receiver\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectNotificationSession) - ``a\n                SubjectNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``subject_receiver, ontology_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param subject_receiver: the subject receiver\n        :type subject_receiver: ``osid.ontology.SubjectReceiver``\n        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a SubjectNotificationSession``\n        :rtype: ``osid.ontology.SubjectNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``subject_receiver, ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectReceiver", 
                     "var_name": "subject_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing subject hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_hierarchy() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject heirarchy traversal service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_session_for_id", 
               "doc": {
                  "headline": "Gets the hierarchy session for the given ``Id`` assigned using the ``OntologyAssignmentSession``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchySession) - a\n                ``SubjectHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchySession``\n        :rtype: ``osid.ontology.SubjectHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing subject hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchyDesignSession) - a\n                ``SubjectHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_hierarchy_design() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchyDesignSession``\n        :rtype: ``osid.ontology.SubjectHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_hierarchy_design_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the subject heirarchy design service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectHierarchyDesignSession) - a\n                ``SubjectHierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_subject_hierarchy_design()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectHierarchyDesignSession``\n        :rtype: ``osid.ontology.SubjectHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_subject_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_ontology_session", 
               "doc": {
                  "headline": "Gets the session retrieving subject ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectOntologySession) - a\n                ``SubjectOntologySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_ontology() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectOntologySession``\n        :rtype: ``osid.ontology.SubjectOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectOntologySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session managing subject ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectOntologyAssignmentSession) - a\n                ``SubjectOntologyAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_ontology_assignment()\n                is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectOntologyAssignmentSession``\n        :rtype: ``osid.ontology.SubjectOntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectOntologyAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_smart_ontology_session", 
               "doc": {
                  "headline": "Gets the session managing subject smart ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.SubjectOntologySession) - a\n                ``SubjectSmartOntologySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_subject_smart_ontology() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SubjectSmartOntologySession``\n        :rtype: ``osid.ontology.SubjectOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_subject_smart_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_smart_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.SubjectOntologySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyLookupSession) - a\n                ``RelevancyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancyLookupSession``\n        :rtype: ``osid.ontology.RelevancyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_lookup_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy lookup service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyLookupSession) - ``a\n                RelevancyLookupSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyLookupSession``\n        :rtype: ``osid.ontology.RelevancyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyQuerySession) - a\n                ``RelevancyQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancyQuerySession``\n        :rtype: ``osid.ontology.RelevancyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy query service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyQuerySession) - ``a\n                RelevancyQuerySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyQuerySession``\n        :rtype: ``osid.ontology.RelevancyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancySearchSession) - a\n                ``RelevanctSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevanctSearchSession``\n        :rtype: ``osid.ontology.RelevancySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy search service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancySearchSession) - ``a\n                RelevancySearchSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancySearchSession``\n        :rtype: ``osid.ontology.RelevancySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyAdminSession) - a\n                ``RelvancyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelvancyAdminSession``\n        :rtype: ``osid.ontology.RelevancyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_admin_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy admin service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyAdminSession) - ``a\n                RelevancyAdminSession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a RelevancyAdminSession``\n        :rtype: ``osid.ontology.RelevancyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to relevancy changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_receiver (osid.ontology.RelevancyReceiver):\n                the relevancy receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyNotificationSession) - ``a\n                _relevancy_notification_session``", 
               "error_doc": "        raise:  NullArgument - ``relevancy_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relevancy_receiver: the relevancy receiver\n        :type relevancy_receiver: ``osid.ontology.RelevancyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _relevancy_notification_session``\n        :rtype: ``osid.ontology.RelevancyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyReceiver", 
                     "var_name": "relevancy_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_notification_session_for_ontology", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relevancy notification service for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_receiver (osid.ontology.RelevancyReceiver):\n                the subject receiver\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyNotificationSession) - ``a\n                _relevancy_notification_session``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``relevancy_receiver, ontology_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_relevancy_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param relevancy_receiver: the subject receiver\n        :type relevancy_receiver: ``osid.ontology.RelevancyReceiver``\n        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _relevancy_notification_session``\n        :rtype: ``osid.ontology.RelevancyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``relevancy_receiver, ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_relevancy_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyReceiver", 
                     "var_name": "relevancy_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_ontology_session", 
               "doc": {
                  "headline": "Gets the session retrieving relevancy ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyOntologySession) - a\n                ``RelevancyOntologySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_ontology() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancyOntologySession``\n        :rtype: ``osid.ontology.RelevancyOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyOntologySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session managing relevancy ontology mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancyOntologyAssignmentSession) - a\n                ``RelevancyOntologyAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_relevancy_ontology_assignment() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancyOntologyAssignmentSession``\n        :rtype: ``osid.ontology.RelevancyOntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancyOntologyAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_smart_ontology_session", 
               "doc": {
                  "headline": "Gets the session managing relevancy smart ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.RelevancySmartOntologySession) - a\n                ``RelevancySmartOntologySession``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relevancy_smart_ontology() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology\n        :type ontology_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelevancySmartOntologySession``\n        :rtype: ``osid.ontology.RelevancySmartOntologySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relevancy_smart_ontology() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_smart_ontology()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.RelevancySmartOntologySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyLookupSession) - an\n                ``OntologyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_lookup() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyLookupSession``\n        :rtype: ``osid.ontology.OntologyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyQuerySession) - an\n                ``OntologyQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_query() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyQuerySession``\n        :rtype: ``osid.ontology.OntologyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologySearchSession) - an\n                ``OntologySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_search() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologySearchSession``\n        :rtype: ``osid.ontology.OntologySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the ontology administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyAdminSession) - an\n                ``OntologyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_admin() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyAdminSession``\n        :rtype: ``osid.ontology.OntologyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to ontology service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_receiver (osid.ontology.OntologyReceiver): the\n                ontology receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyNotificationSession) - an\n                ``OntologyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``ontology_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_notification() is\n                false``", 
               "sphinx_param_doc": "        :param ontology_receiver: the ontology receiver\n        :type ontology_receiver: ``osid.ontology.OntologyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyNotificationSession``\n        :rtype: ``osid.ontology.OntologyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyReceiver", 
                     "var_name": "ontology_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing ontology hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyHierarchySession) - an\n                ``OntologyHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_hierarchy() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyHierarchySession``\n        :rtype: ``osid.ontology.OntologyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing ontology hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyHierarchyDesignSession) - an\n                ``OntologyHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_hierarchy_design()\n                is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyHierarchyDesignSession``\n        :rtype: ``osid.ontology.OntologyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_assignment_session", 
               "doc": {
                  "headline": "Gets the session to assign ``Ids`` to ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.ontology.OntologyAssignmentSession) - an\n                ``OntologyAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_assignment() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``OntologyAssignmentSession``\n        :rtype: ``osid.ontology.OntologyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_assignment() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_assignment()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.ontology.OntologyAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets the ontology batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.batch.OntologyBatchProxyManager) - an\n                ``OntologyBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyBatchProxyManager``\n        :rtype: ``osid.ontology.batch.OntologyBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.batch.OntologyBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_rules_proxy_manager", 
               "doc": {
                  "headline": "Gets the ontology rules service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.rules.OntologyRulesProxyManager) - an\n                ``OntologyRulesProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_ontology_rules() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyRulesProxyManager``\n        :rtype: ``osid.ontology.rules.OntologyRulesProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_ontology_rules() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_rules()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.rules.OntologyRulesProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectLookupSession", 
         "shortname": "SubjectLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Subject`` s.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_lookup_subjects", 
            "use_comparative_subject_view", 
            "use_plenary_subject_view", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "get_subject", 
            "get_subjects_by_ids", 
            "get_subjects_by_genus_type", 
            "get_subjects_by_parent_genus_type", 
            "get_subjects_by_record_type", 
            "get_subjects"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_subjects", 
               "doc": {
                  "headline": "Tests if this user can perform ``Subject`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_subject_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_subject_view", 
               "doc": {
                  "headline": "A complete view of the ``Subject`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include subjects in ontologies which are\n        children of this ontology in the ontology hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_subject", 
               "doc": {
                  "headline": "Gets the ``Subject`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Subject`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Subject`` and retained for\n        compatibility."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): ``Id`` of the ``Subject``\n", 
               "return_doc": "        return: (osid.ontology.Subject) - the subject", 
               "error_doc": "        raise:  NotFound - ``subject_id`` not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the subject\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.Subject", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_ids", 
               "doc": {
                  "headline": "Gets a ``SubjectList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the subjects\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Subjects`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    subject_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the returned ``Subject``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``subject_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_ids: the list of ``Ids`` to retrieve\n        :type subject_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Subject`` list\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``subject_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "subject_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``SubjectList`` corresponding to the given subject genus ``Type`` which does not include subjects of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known subjects\n        or an error results. Otherwise, the returned list may contain\n        only those subjects that are accessible through this session."
               }, 
               "arg_doc": "        arg:    subject_genus_type (osid.type.Type): a subject genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the returned ``Subject``\n                list", 
               "error_doc": "        raise:  NullArgument - ``subject_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_genus_type: a subject genus type\n        :type subject_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Subject`` list\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``SubjectList`` corresponding to the given subject genus ``Type`` and include any additional subject with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known terms or\n        an error results. Otherwise, the returned list may contain only\n        those subjects that are accessible through this session."
               }, 
               "arg_doc": "        arg:    subject_genus_type (osid.type.Type): a subject genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the returned ``Subject``\n                list", 
               "error_doc": "        raise:  NullArgument - ``subject_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_genus_type: a subject genus type\n        :type subject_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Subject`` list\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_record_type", 
               "doc": {
                  "headline": "Gets a ``SubjectList`` containing the given term record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known subjects\n        or an error results. Otherwise, the returned list may contain\n        only those subjects that are accessible through this session."
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): a subject record\n                type\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the returned ``Subject``\n                list", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_record_type: a subject record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Subject`` list\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects", 
               "doc": {
                  "headline": "Gets all ``Subjects``.", 
                  "body": "        In plenary mode, the returned list contains all known subjects\n        or an error results. Otherwise, the returned list may contain\n        only those subjects that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectList) - a ``SubjectList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SubjectList``\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectQuerySession", 
         "shortname": "SubjectQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Subject`` objects.", 
            "body": "    The search query is constructed using the ``SubjectQuery``. The\n    subject record ``Type`` also specifies the record for the subject\n    query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated ontology view: searches include subjects in ontologies\n        of which this ontology is a ancestor in the ontology hierarchy\n      * isolated ontology view: searches are restricted to subjects in\n        this ontology\n\n    \n    Subjects may have a query record indicated by their respective\n    record types. The query record is accessed via the ``SubjectQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_search_subjects", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "get_subject_query", 
            "get_subjects_by_query"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_subjects", 
               "doc": {
                  "headline": "Tests if this user can perform ``Subjects`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include subjects in ontologies which are\n        children of this ontology in the ontology hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query", 
               "doc": {
                  "headline": "Gets a subject query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {}
            }, 
            {
               "name": "get_subjects_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Subjects`` matching the given subject query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_query (osid.ontology.SubjectQuery): the subject\n                query\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the returned\n                ``SubjectList``", 
               "error_doc": "        raise:  NullArgument - ``subject_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``subject_query`` is not of this service", 
               "sphinx_param_doc": "        :param subject_query: the subject query\n        :type subject_query: ``osid.ontology.SubjectQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``SubjectList``\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``subject_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectQuery", 
                     "var_name": "subject_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectQuery"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectSearchSession", 
         "shortname": "SubjectSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Subject`` objects.", 
            "body": "    The search query is constructed using the ``SubjectQuery``. The\n    subject record ``Type`` also specifies the record for the subject\n    query.\n\n    ``get_subjects_by_query()`` is the basic search method and returns a\n    list of ``Subjects``. A more advanced search may be performed with\n    ``getSubjectsBySearch()``. It accepts a ``SubjectSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_subjects_by_search()`` returns a ``SubjectSearchResults`` that\n    can be used to access the resulting ``SubjectList`` or be used to\n    perform a search within the result set through ``SubjectSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated ontology view: searches include subjects in ontologies\n        of which this ontology is a ancestor in the ontology hierarchy\n      * isolated ontology view: searches are restricted to subjects in\n        this ontology\n\n    \n    Subjects may have a query record indicated by their respective\n    record types. The query record is accessed via the ``SubjectQuery``."
         }, 
         "inherit_fullnames": [
            "osid.ontology.SubjectQuerySession"
         ], 
         "inherit_shortnames": [
            "SubjectQuerySession"
         ], 
         "inherit_pkg_names": [
            "ontology"
         ], 
         "inheritance": [
            {
               "pkg_name": "ontology", 
               "name": "SubjectQuerySession"
            }
         ], 
         "method_names": [
            "get_subject_search", 
            "get_subject_search_order", 
            "get_subjects_by_search", 
            "get_subject_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_subject_search", 
               "doc": {
                  "headline": "Gets a subject search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectSearch) - the subject search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject search\n        :rtype: ``osid.ontology.SubjectSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectSearch", 
               "errors": {}
            }, 
            {
               "name": "get_subject_search_order", 
               "doc": {
                  "headline": "Gets a subject search order.", 
                  "body": "        The ``SubjectSearchOrder`` is supplied to a ``SubjectSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectSearchOrder) - the subject search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject search order\n        :rtype: ``osid.ontology.SubjectSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_subjects_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_query (osid.ontology.SubjectQuery): the subject\n                query\n        arg:    subject_search (osid.ontology.SubjectSearch): the\n                subject search\n", 
               "return_doc": "        return: (osid.ontology.SubjectSearchResults) - the subject\n                search results", 
               "error_doc": "        raise:  NullArgument - ``subject_query`` or ``subject_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``subject_search`` or ``subject_query`` is\n                not of this service", 
               "sphinx_param_doc": "        :param subject_query: the subject query\n        :type subject_query: ``osid.ontology.SubjectQuery``\n        :param subject_search: the subject search\n        :type subject_search: ``osid.ontology.SubjectSearch``\n", 
               "sphinx_return_doc": "        :return: the subject search results\n        :rtype: ``osid.ontology.SubjectSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_query`` or ``subject_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``subject_search`` or ``subject_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectQuery", 
                     "var_name": "subject_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.ontology.SubjectSearch", 
                     "var_name": "subject_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectQuery", 
                  "osid.ontology.SubjectSearch"
               ], 
               "return_type": "osid.ontology.SubjectSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_from_inspector", 
               "doc": {
                  "headline": "Gets a subject query from an inspector.", 
                  "body": "        The inspector is available from a ``SubjecttSearchResults``."
               }, 
               "arg_doc": "        arg:    subject_query_inspector\n                (osid.ontology.SubjectQueryInspector): a subject query\n                inspector\n", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  NullArgument - ``subject_query_inspector`` is ``null``\n        raise:  Unsupported - ``subject_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param subject_query_inspector: a subject query inspector\n        :type subject_query_inspector: ``osid.ontology.SubjectQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``subject_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectQueryInspector", 
                     "var_name": "subject_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectQueryInspector"
               ], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectAdminSession", 
         "shortname": "SubjectAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Subjects``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Subject,`` a ``SubjectForm`` is requested using\n    ``get_subject_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``SubjectForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``SubjectForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``SubjectForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``SubjectForms`` are requested to the ``Subject``\n    ``Id`` that is to be updated using ``getSubjectFormForUpdate()``.\n    Similarly, the ``SubjectForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``SubjectForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Subjects``. To unmap a ``Subject``\n    from the current ``Ontology,`` the\n    ``SubjectOntologyAssignmentSession`` should be used. These delete\n    operations attempt to remove the ``Subject`` itself thus removing it\n    from all known ``Ontology`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_create_subjects", 
            "can_create_subject_with_record_types", 
            "get_subject_form_for_create", 
            "create_subject", 
            "can_update_subjects", 
            "get_subject_form_for_update", 
            "update_subject", 
            "can_delete_subjects", 
            "delete_subject", 
            "can_manage_subject_aliases", 
            "alias_subject"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_subjects", 
               "doc": {
                  "headline": "Tests if this user can create ``Subjects``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a subject\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Subject`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Subject`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_subject_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Subject`` using the desired record interface types.", 
                  "body": "        While ``OntologyManager.getSubjectRecordTypes()`` can be used to\n        examine which record interfaces are supported, this method tests\n        which record(s) are required for creating a specific\n        ``Subject``. Providing an empty array tests if a ``Subject`` can\n        be created with no records."
               }, 
               "arg_doc": "        arg:    subject_record_types (osid.type.Type[]): array of\n                subject record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Subject`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``subject_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param subject_record_types: array of subject record types\n        :type subject_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Subject`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "subject_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_form_for_create", 
               "doc": {
                  "headline": "Gets the subject form for creating new subjects.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    subject_record_types (osid.type.Type[]): array of\n                subject record types\n", 
               "return_doc": "        return: (osid.ontology.SubjectForm) - the subject form", 
               "error_doc": "        raise:  NullArgument - ``subject_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param subject_record_types: array of subject record types\n        :type subject_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the subject form\n        :rtype: ``osid.ontology.SubjectForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "subject_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.ontology.SubjectForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_subject", 
               "doc": {
                  "headline": "Creates a new ``Subject``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_form (osid.ontology.SubjectForm): the form for\n                this ``Subject``\n", 
               "return_doc": "        return: (osid.ontology.Subject) - the new ``Subject``", 
               "error_doc": "        raise:  IllegalState - ``subject_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``subject_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``subject_form`` did not originate from\n                ``get_subject_form_for_create()``", 
               "sphinx_param_doc": "        :param subject_form: the form for this ``Subject``\n        :type subject_form: ``osid.ontology.SubjectForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Subject``\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``subject_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``subject_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``subject_form`` did not originate from ``get_subject_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectForm", 
                     "var_name": "subject_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectForm"
               ], 
               "return_type": "osid.ontology.Subject", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_subjects", 
               "doc": {
                  "headline": "Tests if this user can update ``Subjects``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Subject`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if subject modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if subject modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_form_for_update", 
               "doc": {
                  "headline": "Gets the subject form for updating an existing subject.", 
                  "body": "        A new subject form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n", 
               "return_doc": "        return: (osid.ontology.SubjectForm) - the subject form", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the subject form\n        :rtype: ``osid.ontology.SubjectForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_subject", 
               "doc": {
                  "headline": "Updates an existing subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_form (osid.ontology.SubjectForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``subject_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``subject_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``subject_form`` did not originate from\n                ``get_subject_form_for_update()``", 
               "sphinx_param_doc": "        :param subject_form: the form containing the elements to be updated\n        :type subject_form: ``osid.ontology.SubjectForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``subject_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``subject_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``subject_form`` did not originate from ``get_subject_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectForm", 
                     "var_name": "subject_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_subjects", 
               "doc": {
                  "headline": "Tests if this user can delete ``Subjects``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Subject`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Subject`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Subject`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_subject", 
               "doc": {
                  "headline": "Deletes the ``Subject`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``Subject`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to delete\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Subject`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_subject_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Subjects``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Subject`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Subject`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_subject", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Subject`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Subject`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another subject, it is\n        reassigned to the given subject ``Id``."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a ``Subject``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``subject_id`` not found\n        raise:  NullArgument - ``subject_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``subject_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectNotificationSession", 
         "shortname": "SubjectNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``Subject`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``SubjectLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_register_for_subject_notifications", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "register_for_new_subjects", 
            "register_for_new_subject_ancestors", 
            "register_for_new_subject_descendants", 
            "register_for_changed_subjects", 
            "register_for_changed_subject", 
            "register_for_deleted_subjects", 
            "register_for_deleted_subject", 
            "register_for_deleted_subject_ancestors", 
            "register_for_deleted_subject_descendants"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_subject_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Subject`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for subjects in\n        ontologies which are children of this ontology in the ontology\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_subjects", 
               "doc": {
                  "headline": "Register for notifications of new subjects.", 
                  "body": "        ``SubjectReceiver.newSubject()`` is invoked when a new subject\n        is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_subject_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified function in the subject hierarchy.", 
                  "body": "        ``SubjectReceiver.newSubjectAncestor()`` is invoked when the\n        specified subject experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the subject to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the subject to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_subject_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified subject in the subject hierarchy.", 
                  "body": "        ``SubjectReceiver.newSubjectDescendant()`` is invoked when the\n        specified subject experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the subject to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the subject to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_subjects", 
               "doc": {
                  "headline": "Registers for notification of updated subjects.", 
                  "body": "        ``SubjectReceiver.changedSubject()`` is invoked when a subject\n        is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_subject", 
               "doc": {
                  "headline": "Registers for notification of an updated subject.", 
                  "body": "        ``SubjectReceiver.changedSubject()`` is invoked when the\n        specified subject is changed."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_subjects", 
               "doc": {
                  "headline": "Registers for notification of deleted subjects.", 
                  "body": "        ``SubjectReceiver.deletedSubject()`` is invoked when a subject\n        is removed from this ontology."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_subject", 
               "doc": {
                  "headline": "Registers for notification of a deleted subject.", 
                  "body": "        ``SubjectReceiver.changedSubject()`` is invoked when the\n        specified subject is removed from this ontology."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subjectid is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subjectid is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_subject_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified subject in the subject hierarchy.", 
                  "body": "        ``SubjectReceiver.deletedSubjectAncestor()`` is invoked when the\n        specified subject experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the subject to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the subject to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_subject_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified subject in the subject hierarchy.", 
                  "body": "        ``SubjectReceiver.deletedSubjectDescednant()`` is invoked when\n        the specified subject experiences a removal of one of its\n        descendants."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the subject to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the subject to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectHierarchySession", 
         "shortname": "SubjectHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Subject`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Subject``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``getSubjectNodes()``. To relate these ``Ids`` to another OSID,\n    ``get_ancestor_subjects()`` and ``get_descendant_subjects()`` can be\n    used for retrievals that can be used for bulk lookups in other\n    OSIDs. Any ``Subject`` available in the Ontology OSID is known to\n    this hierarchy but does not appear in the hierarchy traversal until\n    added as a root node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_subjects()`` or ``get_child_subjects()`` in\n    lieu of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: subject elements may be silently omitted or\n        re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_subject_hierarchy_id", 
            "get_subject_hierarchy", 
            "can_access_subject_hierarchy", 
            "use_comparative_subject_view", 
            "use_plenary_subject_view", 
            "get_root_subject_ids", 
            "get_root_subjects", 
            "has_parent_subjects", 
            "is_parent_of_subject", 
            "get_parent_subject_ids", 
            "get_parent_subjects", 
            "is_ancestor_of_subject", 
            "has_child_subjects", 
            "is_child_of_subject", 
            "get_child_subject_ids", 
            "get_child_subjects", 
            "is_descendant_of_subject", 
            "get_subject_node_ids", 
            "get_subject_nodes"
         ], 
         "methods": [
            {
               "name": "get_subject_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_subject_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_subject_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer traversal\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_subject_view", 
               "doc": {
                  "headline": "The returns from the subject methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_subject_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_subject_ids", 
               "doc": {
                  "headline": "Gets the root subject ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root subject ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root subject ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_subjects", 
               "doc": {
                  "headline": "Gets the root subjects in this subject hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the root subjects", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root subjects\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_subjects", 
               "doc": {
                  "headline": "Tests if the ``Subject`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if the subject has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the subject has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_subject", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``subject_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``id`` or ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``subject_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_subject_ids", 
               "doc": {
                  "headline": "Gets the parent Ids of the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the subject", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the subject\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_subjects", 
               "doc": {
                  "headline": "Gets the parents of the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the parents of the subject", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the subject\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_subject", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``subject_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``id`` or ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``subject_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_subjects", 
               "doc": {
                  "headline": "Tests if a subject has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``subject_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``subject_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_subject", 
               "doc": {
                  "headline": "Tests if a subject is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``subject_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``id`` or ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``subject_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_subject_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the subject", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` to query\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the subject\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_subjects", 
               "doc": {
                  "headline": "Gets the children of the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the children of the\n                subject", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` to query\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the subject\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_subject", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``subject_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``id`` or ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``subject_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subject_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a subject node", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` to query\n        :type subject_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a subject node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subject_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.ontology.SubjectNode) - a subject node", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` to query\n        :type subject_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a subject node\n        :rtype: ``osid.ontology.SubjectNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.ontology.SubjectNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectHierarchyDesignSession", 
         "shortname": "SubjectHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Subject`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Subject``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_subject_hierarchy_id", 
            "get_subject_hierarchy", 
            "can_modify_subject_hierarchy", 
            "add_root_subject", 
            "remove_root_subject", 
            "add_child_subject", 
            "remove_child_subject", 
            "remove_child_subjects"
         ], 
         "methods": [
            {
               "name": "get_subject_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_subject_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_subject_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_subject", 
               "doc": {
                  "headline": "Adds a root subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``subject_id`` is already in hierarchy\n        raise:  NotFound - ``subject_id`` not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``subject_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``subject_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_subject", 
               "doc": {
                  "headline": "Removes a root subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``subject_id`` not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - the root subjects\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- the root subjects\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_subject", 
               "doc": {
                  "headline": "Adds a child to a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``subject_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``subject_id`` or ``child_id`` not found\n        raise:  NullArgument - ``subject_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``subject_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``subject_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_subject", 
               "doc": {
                  "headline": "Removes a child from a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``subject_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``subject_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``subject_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_subjects", 
               "doc": {
                  "headline": "Removes all children from a subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of a subject\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``subject_id`` not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of a subject\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectOntologySession", 
         "shortname": "SubjectOntologySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Subject`` to ``Ontology`` mappings.", 
            "body": "    A ``Subject`` may appear in multiple ``Ontologies``. Each\n    ``Ontology`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_subject_ontology_mappings", 
            "use_comparative_ontology_view", 
            "use_plenary_ontology_view", 
            "get_subject_ids_by_ontology", 
            "get_subjects_by_ontology", 
            "get_subject_ids_by_ontologies", 
            "get_subjects_by_ontologies", 
            "get_ontology_ids_by_subject", 
            "get_ontologies_by_subject"
         ], 
         "methods": [
            {
               "name": "can_lookup_subject_ontology_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of subject/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_ontology_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_ontology_view", 
               "doc": {
                  "headline": "A complete view of the ``Subject`` and ``Ontology`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_subject_ids_by_ontology", 
               "doc": {
                  "headline": "Gets the list of ``Subject``  ``Ids`` associated with an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related subject ``Ids``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related subject ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_ontology", 
               "doc": {
                  "headline": "Gets the list of ``Subjects`` associated with an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - list of related subject\n                ``Ids``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related subject ``Ids``\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subject_ids_by_ontologies", 
               "doc": {
                  "headline": "Gets the list of ``Subject Ids`` corresponding to a list of ``Ontologies``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): list of ontology ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of subject ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_ids: list of ontology ``Ids``\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of subject ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_subjects_by_ontologies", 
               "doc": {
                  "headline": "Gets the list of ``Subjects`` corresponding to a list of ``Ontologies``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): list of ontology ``Ids``\n", 
               "return_doc": "        return: (osid.ontology.SubjectList) - list of subjects", 
               "error_doc": "        raise:  NullArgument - ``ontology_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_ids: list of ontology ``Ids``\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of subjects\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontology_ids_by_subject", 
               "doc": {
                  "headline": "Gets the list of ``Ontology``  ``Ids`` mapped to a ``Subject``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): ``Id`` of a ``Subject``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of ontology ``Ids``", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: ``Id`` of a ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_subject", 
               "doc": {
                  "headline": "Gets the list of ``Ontologies`` mapped to a ``Subject``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): ``Id`` of a ``Subject``\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - list of ontologies", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: ``Id`` of a ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of ontologies\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectOntologyAssignmentSession", 
         "shortname": "SubjectOntologyAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Subjects`` to ``Ontologies``.", 
            "body": "    A ``Subject`` may map to multiple ``Ontologies`` and removing the\n    last reference to a ``Subject`` is the equivalent of deleting it.\n    Each ``Ontology`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Subject`` to another ``Ontology`` is not a\n    copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_subjects", 
            "can_assign_subjects_to_ontology", 
            "get_assignable_ontology_ids", 
            "get_assignable_ontology_ids_for_subject", 
            "assign_subject_to_ontology", 
            "unassign_subject_from_ontology"
         ], 
         "methods": [
            {
               "name": "can_assign_subjects", 
               "doc": {
                  "headline": "Tests if this user can alter subject/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_subjects_to_ontology", 
               "doc": {
                  "headline": "Tests if this user can alter subject/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_ontology_ids", 
               "doc": {
                  "headline": "Gets a list of ontologies including and under the given ontology node in which any subject can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable ontology ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_ontology_ids_for_subject", 
               "doc": {
                  "headline": "Gets a list of ontologies including and under the given ontology node in which a specific subject can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable ontology ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` or ``subject_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` or ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_subject_to_ontology", 
               "doc": {
                  "headline": "Adds an existing ``Subject`` to an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``subject_id`` is already assigned to\n                ``ontology_id``\n        raise:  NotFound - ``subject_id`` or ``ontology_id`` not found\n        raise:  NullArgument - ``subject_id`` or ``ontology_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``subject_id`` is already assigned to ``ontology_id``\n        :raise: ``NotFound`` -- ``subject_id`` or ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``subject_id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_subject_from_ontology", 
               "doc": {
                  "headline": "Removes a ``Subject`` from an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``subject_id`` or ``ontology_id`` not found\n                or ``subject_id`` not assigned to ``ontology_id``\n        raise:  NullArgument - ``subject_id`` or ``ontology_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` or ``ontology_id`` not found or ``subject_id`` not assigned to ``ontology_id``\n        :raise: ``NullArgument`` -- ``subject_id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectSmartOntologySession", 
         "shortname": "SubjectSmartOntologySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``SubjectQuery`` can be retrieved from this session and mapped to\n    this ``Ontology`` to create a virtual collection of ``Subjects``.\n    The entries may be sequenced using the ``SubjectSearchOrder`` from\n    this session.\n\n    This ``Ontology`` has a default query that matches any subject and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``SubjectQueryInspector``. The query may be\n    modified by converting the inspector back to a ``SubjectQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_manage_smart_ontologies", 
            "get_subject_query", 
            "get_subject_search_order", 
            "apply_subject_query", 
            "inspect_subject_query", 
            "apply_subject_sequencing", 
            "get_subject_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_ontologies", 
               "doc": {
                  "headline": "Tests if this user can manage smart ontologies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart ontology methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart ontology methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query", 
               "doc": {
                  "headline": "Gets a subject query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {}
            }, 
            {
               "name": "get_subject_search_order", 
               "doc": {
                  "headline": "Gets a subject search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectSearchOrder) - the subject search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject search order\n        :rtype: ``osid.ontology.SubjectSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_subject_query", 
               "doc": {
                  "headline": "Applies a subject query to this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_query (osid.ontology.SubjectQuery): the subject\n                query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``subject_query`` not of this service", 
               "sphinx_param_doc": "        :param subject_query: the subject query\n        :type subject_query: ``osid.ontology.SubjectQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``subject_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectQuery", 
                     "var_name": "subject_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_subject_query", 
               "doc": {
                  "headline": "Gets a subject query inspector for this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the subject\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query inspector\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_subject_sequencing", 
               "doc": {
                  "headline": "Applies a subject search order to this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_search_order (osid.ontology.SubjectSearchOrder):\n                the subject search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``subject_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param subject_search_order: the subject search order\n        :type subject_search_order: ``osid.ontology.SubjectSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``subject_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectSearchOrder", 
                     "var_name": "subject_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_from_inspector", 
               "doc": {
                  "headline": "Gets a subject query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_query_inspector\n                (osid.ontology.SubjectQueryInspector): a subject query\n                inspector\n", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  NullArgument - ``subject_query_inspector`` is ``null``\n        raise:  Unsupported - ``subject_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param subject_query_inspector: a subject query inspector\n        :type subject_query_inspector: ``osid.ontology.SubjectQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``subject_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectQueryInspector", 
                     "var_name": "subject_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectQueryInspector"
               ], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyLookupSession", 
         "shortname": "RelevancyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for examining subject relevancy.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_lookup_relevancies", 
            "use_comparative_relevancy_view", 
            "use_plenary_relevancy_view", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "use_effective_relevancy_view", 
            "use_any_effective_relevancy_view", 
            "get_relevancy", 
            "get_relevancies_by_ids", 
            "get_relevancies_by_genus_type", 
            "get_relevancies_by_parent_genus_type", 
            "get_relevancies_by_record_type", 
            "get_relevancies_on_date", 
            "get_relevancies_by_genus_type_on_date", 
            "get_relevancies_for_subject", 
            "get_relevancies_for_subject_on_date", 
            "get_relevancies_by_genus_type_for_subject", 
            "get_relevancies_by_genus_type_for_subject_on_date", 
            "get_relevancies_for_subjects", 
            "get_relevancies_for_mapped_id", 
            "get_relevancies_for_mapped_id_on_date", 
            "get_relevancies_by_genus_type_for_mapped_id", 
            "get_relevancies_by_genus_type_for_mapped_id_on_date", 
            "get_relevancies_for_mapped_ids", 
            "get_relevancies_for_subject_and_mapped_id", 
            "get_relevancies_for_subject_and_mapped_id_on_date", 
            "get_relevancies_by_genus_type_for_subject_and_mapped_id", 
            "get_relevancies_by_genus_type_for_subject_and_mapped_id_on_date", 
            "get_relevancies"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_relevancies", 
               "doc": {
                  "headline": "Tests if this user can lookup subject relevancies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_relevancy_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_relevancy_view", 
               "doc": {
                  "headline": "A complete view of the ``Relevancy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relevancies in ontologies which\n        are children of this ontology in the ontology hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_relevancy_view", 
               "doc": {
                  "headline": "The returns from the lookup methods return only effetive relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_relevancy_view", 
               "doc": {
                  "headline": "Both effective and ineffective relavcnies are returned.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): ``Id`` of the ``Relevancy``\n", 
               "return_doc": "        return: (osid.ontology.Relevancy) - the relevancy", 
               "error_doc": "        raise:  NotFound - ``relevancy_id`` not found\n        raise:  NullArgument - ``relevancy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: ``Id`` of the ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relevancy\n        :rtype: ``osid.ontology.Relevancy``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relevancy_id`` not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.Relevancy", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_ids", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - the returned ``Relevancy\n                list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``relevancy_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_ids: the list of ``Ids`` to retrieve\n        :type relevancy_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Relevancy list``\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``relevancy_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "relevancy_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type", 
               "doc": {
                  "headline": "Gets the relevancies for the given relevancy and genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``relevancy_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets the relevancies for the given relevancy genus type and include any relevancies with a genus type derived from the specified genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``relevancy_genus_t_ype`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_genus_t_ype`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_record_type", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` containing the given relevancy record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): a relevancy\n                record type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_record_type: a relevancy record type\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` of the given genus type and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``relevancy_genus_type, from,`` or ``to``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``relevancy_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_subject", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` mapped to a subject ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_subject_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` for the given subject effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``subject_id, from,`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``subject_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_subject", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` mapped to a subject ``Id`` and relevancy ``genus Type``.", 
                  "body": "        Genus ``Types`` derived from the given genus ``Typ`` e are\n        included.\n\n        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Relevancy`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Relevancy`` and retained\n        for compatibility.\n        \n        In effective mode, relevancies are returned that are currently\n        effective. In any effective mode, effective relevancies and\n        those currently expired are returned."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` or\n                ``relevancy_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` or ``relevancy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_subject_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` of the given genus type for the given subject effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``subject_id, relevancy_genus_type,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``subject_id, relevancy_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_subjects", 
               "doc": {
                  "headline": "Gets the relevancies for the given subject ``Ids``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_ids (osid.id.IdList): list of subject ``Ids``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``subject_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_ids: list of subject ``Ids``\n        :type subject_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "subject_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_mapped_id", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` elements mapped to an ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_mapped_id_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` for the given mapped ``Id`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``id, from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_mapped_id", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` elements mapped to an ``Id`` of the given relevancy genus ``Type`` which includes derived genus ``Types``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``id`` or ``relevancy_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id`` or ``relevancy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_mapped_id_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` of the given genus type for the given mapped ``Id`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``id, relevancy_genus_type, from,`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``id, relevancy_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_mapped_ids", 
               "doc": {
                  "headline": "Gets the relevancies for the given mapped ``Ids``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ids (osid.id.IdList): a list of ``Ids``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ids: a list of ``Ids``\n        :type ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_subject_and_mapped_id", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` mapped to a subject and mapped ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    id (osid.id.Id): the mapped ``Id``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_for_subject_and_mapped_id_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` for the given subject and mapped ``Id`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    id (osid.id.Id): the mapped ``Id``\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``subject_id, id, from,`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``subject_id, id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_subject_and_mapped_id", 
               "doc": {
                  "headline": "Gets the ``Relevancy`` of the given genus type and mapped to a subject and mapped ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    id (osid.id.Id): the mapped ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``subject_id, id`` , or\n                ``relevancy_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id, id`` , or ``relevancy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_genus_type_for_subject_and_mapped_id_on_date", 
               "doc": {
                  "headline": "Gets a ``RelevancyList`` of the given genus type and related to the given subject and mapped ``Id`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the subject ``Id``\n        arg:    id (osid.id.Id): the mapped ``Id``\n        arg:    relevancy_genus_type (osid.type.Type): relevancy genus\n                type\n        arg:    from (osid.calendaring.DateTime): a starting date\n        arg:    to (osid.calendaring.DateTime): an ending date\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``subject_id, id, relevancy_genus_t_ype,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n        :param relevancy_genus_type: relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n        :param from: a starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: an ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``subject_id, id, relevancy_genus_t_ype, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies", 
               "doc": {
                  "headline": "Gets all relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyQuerySession", 
         "shortname": "RelevancyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Relevancy`` objects.", 
            "body": "    The search query is constructed using the ``RelevancyQuery``. The\n    relevancy record ``Type`` also specifies the record for the\n    relevancy query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated ontology view: searches include relevancies in\n        ontologies of which this ontology is a ancestor in the ontology\n        hierarchy\n      * isolated ontology view: searches are restricted\n\n    \n    Relevancies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``RelevancyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_search_relevancies", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "get_relevancy_query", 
            "get_relevancies_by_query"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_relevancies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Relevancy`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relevancies in ontologies which\n        are children of this ontology in the ontology hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query", 
               "doc": {
                  "headline": "Gets a relevancy query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_relevancies_by_query", 
               "doc": {
                  "headline": "Gets a list of relevancies matching the given relevancy query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_query (osid.ontology.RelevancyQuery): the\n                relevancy query\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - the returned\n                ``RelevancyList``", 
               "error_doc": "        raise:  NullArgument - ``relevancy_query is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relevancy_query`` is not of this service", 
               "sphinx_param_doc": "        :param relevancy_query: the relevancy query\n        :type relevancy_query: ``osid.ontology.RelevancyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``RelevancyList``\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_query is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relevancy_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyQuery", 
                     "var_name": "relevancy_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyQuery"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancySearchSession", 
         "shortname": "RelevancySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Relevancy`` objects.", 
            "body": "    The search query is constructed using the ``RelevancyQuery``. The\n    relevancy record ``Type`` also specifies the record for the\n    relevancy query.\n\n    ``get_relevancies_by_query()`` is the basic search method and\n    returns a list of relevancies. A more advanced search may be\n    performed with ``getRelevanciesBySearch()``. It accepts a\n    ``RelevancySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_relevancies_by_search()`` returns a\n    ``RelevancySearchResults`` that can be used to access the resulting\n    ``RelevancyList`` or be used to perform a search within the result\n    set through ``RelevancySearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated ontology view: searches include relevancies in\n        ontologies of which this ontology is a ancestor in the ontology\n        hierarchy\n      * isolated ontology view: searches are restricted\n\n    \n    Relevancies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``RelevancyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.ontology.RelevancyQuerySession"
         ], 
         "inherit_shortnames": [
            "RelevancyQuerySession"
         ], 
         "inherit_pkg_names": [
            "ontology"
         ], 
         "inheritance": [
            {
               "pkg_name": "ontology", 
               "name": "RelevancyQuerySession"
            }
         ], 
         "method_names": [
            "get_relevancy_search", 
            "get_relevancy_search_order", 
            "get_relevancies_by_search", 
            "get_relevancy_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_relevancy_search", 
               "doc": {
                  "headline": "Gets a relevancy search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancySearch) - the relevancy search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy search\n        :rtype: ``osid.ontology.RelevancySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancySearch", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_search_order", 
               "doc": {
                  "headline": "Gets a relevancy search order.", 
                  "body": "        The ``RelevancySearchOrder`` is supplied to a\n        ``RelevancySearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancySearchOrder) - the relevancy\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy search order\n        :rtype: ``osid.ontology.RelevancySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_relevancies_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_query (osid.ontology.RelevancyQuery): the\n                relevancy query\n        arg:    relevancy_search (osid.ontology.RelevancySearch): the\n                relevancy search\n", 
               "return_doc": "        return: (osid.ontology.RelevancySearchResults) - the relevancy\n                search results", 
               "error_doc": "        raise:  NullArgument - ``relevancy_query`` or\n                ``relevancy_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relevancy_search`` or\n                ``relevancy_query`` is not of this service", 
               "sphinx_param_doc": "        :param relevancy_query: the relevancy query\n        :type relevancy_query: ``osid.ontology.RelevancyQuery``\n        :param relevancy_search: the relevancy search\n        :type relevancy_search: ``osid.ontology.RelevancySearch``\n", 
               "sphinx_return_doc": "        :return: the relevancy search results\n        :rtype: ``osid.ontology.RelevancySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_query`` or ``relevancy_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relevancy_search`` or ``relevancy_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyQuery", 
                     "var_name": "relevancy_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.ontology.RelevancySearch", 
                     "var_name": "relevancy_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyQuery", 
                  "osid.ontology.RelevancySearch"
               ], 
               "return_type": "osid.ontology.RelevancySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_from_inspector", 
               "doc": {
                  "headline": "Gets a relevancy query from an inspector.", 
                  "body": "        The inspector is available from a ``RelevancySearchResults``."
               }, 
               "arg_doc": "        arg:    relevancy_query_inspector\n                (osid.ontology.RelevancyQueryInspector): a relevancy\n                query inspector\n", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "        raise:  NullArgument - ``relevancy_query_inspector`` is ``null``\n        raise:  Unsupported - ``relevancy_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param relevancy_query_inspector: a relevancy query inspector\n        :type relevancy_query_inspector: ``osid.ontology.RelevancyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``relevancy_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyQueryInspector", 
                     "var_name": "relevancy_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyQueryInspector"
               ], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyAdminSession", 
         "shortname": "RelevancyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Relevancies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Relevancy,`` a ``RelevancyForm`` is requested using\n    ``get_relevancy_form_for_create()`` specifying the desired peers and\n    record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``RelevancyForm`` will indicate that it is to be used with\n    a create operation and can be used to examine metdata or validate\n    data prior to creation. Once the ``RelevancyForm`` is submiited to a\n    create operation, it cannot be reused with another create operation\n    unless the first operation was unsuccessful. Each ``RelevancyForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``RelevancyForms`` are requested to the ``Relevancy``\n    ``Id`` that is to be updated using ``getRelevancyFormForUpdate()``.\n    Similarly, the ``RelevancyForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``RelevancyForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Relevancies``. To unmap a\n    ``Relevancy`` from the current ``Ontology,`` the\n    ``RelevancyOntologyAssignmentSession`` should be used. These delete\n    operations attempt to remove the ``Relevancy`` itself thus removing\n    it from all known ``Ontology`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_create_relevancies", 
            "can_create_relevancy_with_record_types", 
            "get_relevancy_form_for_create", 
            "create_relevancy", 
            "can_update_relevancies", 
            "get_relevancy_form_for_update", 
            "update_relevancy", 
            "can_delete_relevancies", 
            "delete_relevancy", 
            "can_manage_relevancy_aliases", 
            "alias_relevancy"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_relevancies", 
               "doc": {
                  "headline": "Tests if this user can create relevancies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Relevancy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relevancy`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relevancy`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_relevancy_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Relevancy`` using the desired record interface types.", 
                  "body": "        While ``OntologyManager.getRelevancyRecordTypes()`` can be used\n        to examine which record interfaces are supported, this method\n        tests which record(s) are required for creating a specific\n        ``Relevancy``. Providing an empty array tests if a ``Relevancy``\n        can be created with no records."
               }, 
               "arg_doc": "        arg:    relevancy_record_types (osid.type.Type[]): array of\n                relevancy record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Relevancy`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param relevancy_record_types: array of relevancy record types\n        :type relevancy_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Relevancy`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "relevancy_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_form_for_create", 
               "doc": {
                  "headline": "Gets the relevancy form for creating new relevancies.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n        arg:    id (osid.id.Id): a mapped ``Id``\n        arg:    relevancy_record_types (osid.type.Type[]): array of\n                relevancy record types\n", 
               "return_doc": "        return: (osid.ontology.RelevancyForm) - the relevancy form", 
               "error_doc": "        raise:  NotFound - ``subject_id`` is not found\n        raise:  NullArgument - ``subject_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param id: a mapped ``Id``\n        :type id: ``osid.id.Id``\n        :param relevancy_record_types: array of relevancy record types\n        :type relevancy_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the relevancy form\n        :rtype: ``osid.ontology.RelevancyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``subject_id`` is not found\n        :raise: ``NullArgument`` -- ``subject_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "relevancy_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.ontology.RelevancyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_relevancy", 
               "doc": {
                  "headline": "Creates a new ``Relevancy``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_form (osid.ontology.RelevancyForm): the form\n                for this ``Relevancy``\n", 
               "return_doc": "        return: (osid.ontology.Relevancy) - the new ``Relevancy``", 
               "error_doc": "        raise:  IllegalState - ``relevancy_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``relevancy_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relevancy_form`` did not originate from\n                ``get_relevancy_form_for_create()``", 
               "sphinx_param_doc": "        :param relevancy_form: the form for this ``Relevancy``\n        :type relevancy_form: ``osid.ontology.RelevancyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Relevancy``\n        :rtype: ``osid.ontology.Relevancy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``relevancy_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``relevancy_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relevancy_form`` did not originate from ``get_relevancy_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyForm", 
                     "var_name": "relevancy_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyForm"
               ], 
               "return_type": "osid.ontology.Relevancy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_relevancies", 
               "doc": {
                  "headline": "Tests if this user can update relevancies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Relevancy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if relevancy modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if relevancy modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_form_for_update", 
               "doc": {
                  "headline": "Gets the relevancy form for updating an existing relevancy.", 
                  "body": "        A new relevancy form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyForm) - the relevancy form", 
               "error_doc": "        raise:  NotFound - ``relevancy_id`` is not found\n        raise:  NullArgument - ``relevancy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relevancy form\n        :rtype: ``osid.ontology.RelevancyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relevancy_id`` is not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_relevancy", 
               "doc": {
                  "headline": "Updates an existing relevancy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_form (osid.ontology.RelevancyForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``relevancy_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``relevancy_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relevancy_form`` did not originate from\n                ``get_relevancy_form_for_update()``", 
               "sphinx_param_doc": "        :param relevancy_form: the form containing the elements to be updated\n        :type relevancy_form: ``osid.ontology.RelevancyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``relevancy_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``relevancy_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relevancy_form`` did not originate from ``get_relevancy_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyForm", 
                     "var_name": "relevancy_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_relevancies", 
               "doc": {
                  "headline": "Tests if this user can delete relevancies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Relevancy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relevancy`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relevancy`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_relevancy", 
               "doc": {
                  "headline": "Deletes the ``Relevancy`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy`` to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``Relevancy`` was not found identified by\n                the given ``Id``\n        raise:  NullArgument - ``relevancy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy`` to delete\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Relevancy`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_relevancy_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for relevancies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relevancy`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relevancy`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_relevancy", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Relevancy`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Relevancy`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another relevancy, it is\n        reassigned to the given relevancy ``Id``."
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of a ``Relevancy``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``relevancy_id`` not found\n        raise:  NullArgument - ``relevancy_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of a ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``relevancy_id`` not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyNotificationSession", 
         "shortname": "RelevancyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to subject relevancies.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``RelevancyLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_register_for_relevancy_notifications", 
            "use_federated_ontology_view", 
            "use_isolated_ontology_view", 
            "register_for_new_relevancies", 
            "register_for_new_relevancies_by_genus_type", 
            "register_for_new_relevancies_for_subject", 
            "register_for_new_relevancies_for_id", 
            "register_for_changed_relevancies", 
            "register_for_changed_relevancies_by_genus_type", 
            "register_for_changed_relevancies_for_subject", 
            "register_for_changed_relevancies_for_id", 
            "register_for_changed_relevancy", 
            "register_for_deleted_relevancies", 
            "register_for_deleted_relevancies_by_genus_type", 
            "register_for_deleted_relevancies_for_subject", 
            "register_for_deleted_relevancies_for_id", 
            "register_for_deleted_relevancy"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_relevancy_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Relevancy`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_ontology_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for relevancies in\n        ontologies which are children of this ontology in the ontology\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_ontology_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this ontology only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_relevancies", 
               "doc": {
                  "headline": "Register for notifications of new relevancies.", 
                  "body": "        ``RelevancyReceiver.newRelevancy()`` is invoked when a new\n        relevancy is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relevancies_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of new relevancies by the given genus type.", 
                  "body": "        ``RelevancyReceiver.newRelevancy()`` is invoked when a new\n        relevancy is created."
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): the relevancy\n                genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_genus_type is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: the relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relevancies_for_subject", 
               "doc": {
                  "headline": "Register for notifications of new relevancies for the given subject.", 
                  "body": "        ``RelevancyReceiver.newRelevancy()`` is invoked when a new\n        relevancy is created."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relevancies_for_id", 
               "doc": {
                  "headline": "Register for notifications of new relevancies for the given mapped ``Id``.", 
                  "body": "        ``RelevancyReceiver.newRelevancy()`` is invoked when a new\n        relevancy is created."
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to monitor\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relevancies", 
               "doc": {
                  "headline": "Registers for notification of updated relevancies.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when a\n        relevancy is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relevancies_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of changed relevancies of the given genus type.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when a\n        relevancy is changed."
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): the relevancy\n                genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_genus_type is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: the relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relevancies_for_subject", 
               "doc": {
                  "headline": "Register for notifications of changed relevancies for the given subject.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when a\n        relevancy is changed."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relevancies_for_id", 
               "doc": {
                  "headline": "Register for notifications of changed relevancies for the given ``Id``.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when a\n        relevancy is changed."
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to monitor\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relevancy", 
               "doc": {
                  "headline": "Registers for notification of an updated relevancy.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when the\n        specified relevancy is changed."
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy`` to monitor\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relevancies", 
               "doc": {
                  "headline": "Registers for notification of deleted relevancies.", 
                  "body": "        ``RelevancyReceiver.deletedRelevancy()`` is invoked when a\n        relevancy is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relevancies_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of deleted relevancies of the given genus type.", 
                  "body": "        ``RelevancyReceiver.deletedRelevancy()`` is invoked when a\n        relevancy is deleted."
               }, 
               "arg_doc": "        arg:    relevancy_genus_type (osid.type.Type): the relevancy\n                genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_genus_type is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_genus_type: the relevancy genus type\n        :type relevancy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relevancies_for_subject", 
               "doc": {
                  "headline": "Register for notifications of deleted relevancies for the given subject.", 
                  "body": "        ``RelevancyReceiver.deletedRelevancy()`` is invoked when a\n        relevancy is deleted."
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the ``Subject`` to monitor\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relevancies_for_id", 
               "doc": {
                  "headline": "Register for notifications of deleted relevancies for the given ``Id``.", 
                  "body": "        ``RelevancyReceiver.deletedRelevancy()`` is invoked when a\n        relevancy is deleted."
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to monitor\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relevancy", 
               "doc": {
                  "headline": "Registers for notification of a deleted relevancy.", 
                  "body": "        ``RelevancyReceiver.changedRelevancy()`` is invoked when the\n        specified relevancy is deleted."
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy`` to monitor\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyOntologySession", 
         "shortname": "RelevancyOntologySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Relevancy`` to ``Ontology`` mappings.", 
            "body": "    A ``Relevancy`` may appear in multiple ``Ontologies``. Each\n    ``Ontology`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_relevancy_ontology_mappings", 
            "use_comparative_ontology_view", 
            "use_plenary_ontology_view", 
            "get_relevancy_ids_by_ontology", 
            "get_relevancies_by_ontology", 
            "get_relevancy_ids_by_ontologies", 
            "get_relevancies_by_ontologies", 
            "get_ontology_ids_by_relevancy", 
            "get_ontologies_by_relevancy"
         ], 
         "methods": [
            {
               "name": "can_lookup_relevancy_ontology_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of relevancy/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_ontology_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_ontology_view", 
               "doc": {
                  "headline": "A complete view of the ``Relevancy`` and ``Ontology`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_ids_by_ontology", 
               "doc": {
                  "headline": "Gets the list of ``Relevancy``  ``Ids`` associated with an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related ontology ``Ids``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_ontology", 
               "doc": {
                  "headline": "Gets the list of ``Relevancies`` associated with an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of related\n                relevancy ``Ids``", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related relevancy ``Ids``\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancy_ids_by_ontologies", 
               "doc": {
                  "headline": "Gets the list of ``Relevancy Ids`` corresponding to a list of ``Ontologies``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): list of ontology ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of relevancy ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_ids: list of ontology ``Ids``\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relevancy ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relevancies_by_ontologies", 
               "doc": {
                  "headline": "Gets the list of ``Relevancies`` corresponding to a list of ``Ontologies``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): list of ontology ``Ids``\n", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - list of relevancies", 
               "error_doc": "        raise:  NullArgument - ``ontology_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_ids: list of ontology ``Ids``\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relevancies\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontology_ids_by_relevancy", 
               "doc": {
                  "headline": "Gets the list of ``Ontology``  ``Ids`` mapped to a ``Relevancy``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): ``Id`` of a ``Relevancy``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of ontology ``Ids``", 
               "error_doc": "        raise:  NotFound - ``relevancy_id`` is not found\n        raise:  NullArgument - ``relevancy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: ``Id`` of a ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relevancy_id`` is not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_relevancy", 
               "doc": {
                  "headline": "Gets the list of ``Ontologies`` mapped to a ``Relevancy``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): ``Id`` of a ``Relevancy``\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - list of ontologies", 
               "error_doc": "        raise:  NotFound - ``relevancy_id`` is not found\n        raise:  NullArgument - ``relevancy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: ``Id`` of a ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of ontologies\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relevancy_id`` is not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyOntologyAssignmentSession", 
         "shortname": "RelevancyOntologyAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Relevancies`` to ``Ontologies``.", 
            "body": "    A ``Relevancy`` may map to multiple ``Ontologies`` and removing the\n    last reference to a ``Relevancy`` is the equivalent of deleting it.\n    Each ``Ontology`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Relevancy`` to another ``Ontology`` is not\n    a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_relevancies", 
            "can_assign_relevancies_to_ontology", 
            "get_assignable_ontology_ids", 
            "get_assignable_ontology_ids_for_relevancy", 
            "assign_relevancy_to_ontology", 
            "unassign_relevancy_from_ontology"
         ], 
         "methods": [
            {
               "name": "can_assign_relevancies", 
               "doc": {
                  "headline": "Tests if this user can alter relevancy/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_relevancies_to_ontology", 
               "doc": {
                  "headline": "Tests if this user can alter relevancy/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_ontology_ids", 
               "doc": {
                  "headline": "Gets a list of ontologies including and under the given ontology node in which any relevancy can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable ontology ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_ontology_ids_for_relevancy", 
               "doc": {
                  "headline": "Gets a list of ontologies including and under the given ontology node in which a specific relevancy can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable ontology ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` or ``relevancy_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param relevancy_id: the ``Id`` of the ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` or ``relevancy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_relevancy_to_ontology", 
               "doc": {
                  "headline": "Adds an existing ``Relevancy`` to an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``relevancy_id`` is already assigned to\n                ``ontology_id``\n        raise:  NotFound - ``relevancy_id`` or ``ontology_id`` not found\n        raise:  NullArgument - ``relevancy_id`` or ``ontology_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``relevancy_id`` is already assigned to ``ontology_id``\n        :raise: ``NotFound`` -- ``relevancy_id`` or ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``relevancy_id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_relevancy_from_ontology", 
               "doc": {
                  "headline": "Removes a ``Relevancy`` from an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the\n                ``Relevancy``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``relevancy_id`` or ``ontology_id`` not found\n                or ``relevancy_id`` not assigned to ``ontology_id``\n        raise:  NullArgument - ``relevancy_id`` or ``ontology_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relevancy_id`` or ``ontology_id`` not found or ``relevancy_id`` not assigned to ``ontology_id``\n        :raise: ``NullArgument`` -- ``relevancy_id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancySmartOntologySession", 
         "shortname": "RelevancySmartOntologySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``RelevancyQuery`` can be retrieved from this session and mapped\n    to this ``Ontology`` to create a virtual collection of\n    ``Relevancies``. The entries may be sequenced using the\n    ``RelevancySearchOrder`` from this session.\n\n    This ``Ontology`` has a default query that matches any relevancy and\n    a default search order that specifies no sequencing. The queries may\n    be examined using a ``RelevancyQueryInspector``. The query may be\n    modified by converting the inspector back to a ``RelevancyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_id", 
            "get_ontology", 
            "can_manage_smart_ontologies", 
            "get_relevancy_query", 
            "get_relevancy_search_order", 
            "apply_relevancy_query", 
            "inspect_relevancy_query", 
            "apply_relevancy_sequencing", 
            "get_relevancy_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_ontology_id", 
               "doc": {
                  "headline": "Gets the ``Ontology``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Ontology Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ``Ontology`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Ontology`` associated with this session\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_ontologies", 
               "doc": {
                  "headline": "Tests if this user can manage smart ontologies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart ontology methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart ontology methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query", 
               "doc": {
                  "headline": "Gets a relevancy query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_search_order", 
               "doc": {
                  "headline": "Gets a relevancy search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancySearchOrder) - the relevancy\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy search order\n        :rtype: ``osid.ontology.RelevancySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_relevancy_query", 
               "doc": {
                  "headline": "Applies a relevancy query to this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_query (osid.ontology.RelevancyQuery): the\n                relevancy query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``relevancy_query`` not of this service", 
               "sphinx_param_doc": "        :param relevancy_query: the relevancy query\n        :type relevancy_query: ``osid.ontology.RelevancyQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``relevancy_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyQuery", 
                     "var_name": "relevancy_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_relevancy_query", 
               "doc": {
                  "headline": "Gets a relevancy query inspector for this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQueryInspector) - the relevancy\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query inspector\n        :rtype: ``osid.ontology.RelevancyQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_relevancy_sequencing", 
               "doc": {
                  "headline": "Applies a relevancy search order to this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_search_order\n                (osid.ontology.RelevancySearchOrder): the relevancy\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``relevancy_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param relevancy_search_order: the relevancy search order\n        :type relevancy_search_order: ``osid.ontology.RelevancySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``relevancy_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancySearchOrder", 
                     "var_name": "relevancy_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_from_inspector", 
               "doc": {
                  "headline": "Gets a relevancy query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_query_inspector\n                (osid.ontology.RelevancyQueryInspector): a relevancy\n                query inspector\n", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "        raise:  NullArgument - ``relevancy_query_inspector`` is ``null``\n        raise:  Unsupported - ``relevancy_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param relevancy_query_inspector: a relevancy query inspector\n        :type relevancy_query_inspector: ``osid.ontology.RelevancyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``relevancy_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancyQueryInspector", 
                     "var_name": "relevancy_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancyQueryInspector"
               ], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyLookupSession", 
         "shortname": "OntologyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Ontology`` objects.", 
            "body": "    The ``Ontology`` represents a collection of ``Subjects``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Ontologies`` it can access, without breaking\n    execution. However, an administrative application may require all\n    ``Ontology`` elements to be available.\n    \n    Ontologies may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Ontology``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_ontologies", 
            "use_comparative_ontology_view", 
            "use_plenary_ontology_view", 
            "get_ontology", 
            "get_ontologies_by_ids", 
            "get_ontologies_by_genus_type", 
            "get_ontologies_by_parent_genus_type", 
            "get_ontologies_by_record_type", 
            "get_ontologies_by_provider", 
            "get_ontologies"
         ], 
         "methods": [
            {
               "name": "can_lookup_ontologies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Ontology`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_ontology_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_ontology_view", 
               "doc": {
                  "headline": "A complete view of the ``Ontology`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Ontology`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``Ontology`` and retained\n        for compatility."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ontology", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the ontology\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_ids", 
               "doc": {
                  "headline": "Gets an ``OntologyList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        ontologies specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Ontology`` objects may be omitted from the list\n        and may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned ``Ontology``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``ontology_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_ids: the list of ``Ids`` to retrieve\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Ontology`` list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``OntologyList`` corresponding to the given ontology genus ``Type`` which does not include ontologies of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known ontologies\n        or an error results. Otherwise, the returned list may contain\n        only those ontologies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    ontology_genus_type (osid.type.Type): an ontology genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned ``Ontology``\n                list", 
               "error_doc": "        raise:  NullArgument - ``ontology_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_genus_type: an ontology genus type\n        :type ontology_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Ontology`` list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``OntologyList`` corresponding to the given ontology genus ``Type`` and include any additional ontologies with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known ontologies\n        or an error results. Otherwise, the returned list may contain\n        only those ontologies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    ontology_genus_type (osid.type.Type): an ontology genus\n                type\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned ``Ontology``\n                list", 
               "error_doc": "        raise:  NullArgument - ``ontology_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_genus_type: an ontology genus type\n        :type ontology_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Ontology`` list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_record_type", 
               "doc": {
                  "headline": "Gets an ``OntologyList`` containing the given ontology record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known ontologies\n        or an error results. Otherwise, the returned list may contain\n        only those ontologies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): an ontology\n                record type\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned ``Ontology``\n                list", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_record_type: an ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Ontology`` list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies_by_provider", 
               "doc": {
                  "headline": "Gets an ``OntologyList`` for the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known ontologies\n        or an error results. Otherwise, the returned list may contain\n        only those ontologies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned ``Ontology``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Ontology`` list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontologies", 
               "doc": {
                  "headline": "Gets all ``Ontologies``.", 
                  "body": "        In plenary mode, the returned list contains all known ontologies\n        or an error results. Otherwise, the returned list may contain\n        only those ontologies that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyList) - an ``OntologyList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``OntologyList``\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyQuerySession", 
         "shortname": "OntologyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Ontology`` objects.", 
            "body": "    The search query is constructed using the ``OntologyQuery``.\n\n    Ontologies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``OntologyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_ontologies", 
            "get_ontology_query", 
            "get_ontologies_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_ontologies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Ontology`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_query", 
               "doc": {
                  "headline": "Gets an ontology query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - an ontology query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_ontologies_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Ontology`` objects matching the given ontology query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_query (osid.ontology.OntologyQuery): the\n                ontology query\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the returned\n                ``OntologyList``", 
               "error_doc": "        raise:  NullArgument - ``ontology_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``ontology_query`` is not of this service", 
               "sphinx_param_doc": "        :param ontology_query: the ontology query\n        :type ontology_query: ``osid.ontology.OntologyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``OntologyList``\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``ontology_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyQuery", 
                     "var_name": "ontology_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyQuery"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologySearchSession", 
         "shortname": "OntologySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Ontology`` objects.", 
            "body": "    The search query is constructed using the ``OntologyQuery``.\n\n    ``get_ontologies_by_query()`` is the basic search method and returns\n    a list of ``Ontology`` objects.A more advanced search may be\n    performed with ``getOntologiesBySearch()``. It accepts an\n    ``OntologySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_ontologies_by_search()`` returns an\n    ``OntologySearchResults`` that can be used to access the resulting\n    ``OntologyList`` or be used to perform a search within the result\n    set through ``OntologySearch``.\n    \n    Ontologies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``OntologyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.ontology.OntologyQuerySession"
         ], 
         "inherit_shortnames": [
            "OntologyQuerySession"
         ], 
         "inherit_pkg_names": [
            "ontology"
         ], 
         "inheritance": [
            {
               "pkg_name": "ontology", 
               "name": "OntologyQuerySession"
            }
         ], 
         "method_names": [
            "get_ontology_search", 
            "get_ontology_search_order", 
            "get_ontologies_by_search", 
            "get_ontology_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_ontology_search", 
               "doc": {
                  "headline": "Gets an ontology search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologySearch) - an ontology search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ontology search\n        :rtype: ``osid.ontology.OntologySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologySearch", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_search_order", 
               "doc": {
                  "headline": "Gets an ontology search order.", 
                  "body": "        The ``OntologySearchOrder`` is supplied to an ``OntologySearch``\n        to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologySearchOrder) - the ontology\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology search order\n        :rtype: ``osid.ontology.OntologySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_ontologies_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_query (osid.ontology.OntologyQuery): the\n                ontology query\n        arg:    ontology_search (osid.ontology.OntologySearch): the\n                ontology search\n", 
               "return_doc": "        return: (osid.ontology.OntologySearchResults) - the ontology\n                search results", 
               "error_doc": "        raise:  NullArgument - ``ontology_query`` or ``ontology_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``ontology_query`` or ``ontology_search``\n                is not of this service", 
               "sphinx_param_doc": "        :param ontology_query: the ontology query\n        :type ontology_query: ``osid.ontology.OntologyQuery``\n        :param ontology_search: the ontology search\n        :type ontology_search: ``osid.ontology.OntologySearch``\n", 
               "sphinx_return_doc": "        :return: the ontology search results\n        :rtype: ``osid.ontology.OntologySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_query`` or ``ontology_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``ontology_query`` or ``ontology_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyQuery", 
                     "var_name": "ontology_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.ontology.OntologySearch", 
                     "var_name": "ontology_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyQuery", 
                  "osid.ontology.OntologySearch"
               ], 
               "return_type": "osid.ontology.OntologySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_query_from_inspector", 
               "doc": {
                  "headline": "Gets an ontology query from an inspector.", 
                  "body": "        The inspector is available from an ``OntologySearchResults``."
               }, 
               "arg_doc": "        arg:    ontology_query_inspector\n                (osid.ontology.OntologyQueryInspector): an ontology\n                query inspector\n", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - the ontology query", 
               "error_doc": "        raise:  NullArgument - ``ontology_query_inspector`` is ``null``\n        raise:  Unsupported - ``ontology_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param ontology_query_inspector: an ontology query inspector\n        :type ontology_query_inspector: ``osid.ontology.OntologyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``ontology_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyQueryInspector", 
                     "var_name": "ontology_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyQueryInspector"
               ], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyAdminSession", 
         "shortname": "OntologyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Ontologies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Ontology,`` an ``OntologyForm`` is requested using\n    ``get_ontology_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``OntologyForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``OntologyForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``OntologyForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``OntologyForms`` are requested to the ``Ontology``\n    ``Id`` that is to be updated using ``getOntologyFormForUpdate()``.\n    Similarly, the ``OntologyForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``OntologyForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Ontologies``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_ontologies", 
            "can_create_ontology_with_record_types", 
            "get_ontology_form_for_create", 
            "create_ontology", 
            "can_update_ontologies", 
            "get_ontology_form_for_update", 
            "update_ontology", 
            "can_delete_ontologies", 
            "delete_ontology", 
            "can_manage_ontology_aliases", 
            "alias_ontology"
         ], 
         "methods": [
            {
               "name": "can_create_ontologies", 
               "doc": {
                  "headline": "Tests if this user can create ``Ontologies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Ontology`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Ontology`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Ontology`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_ontology_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Ontology`` using the desired record types.", 
                  "body": "        While ``OntologyManager.getOntologyRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Ontology``.\n        Providing an empty array tests if an ``Ontology`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    ontology_record_types (osid.type.Type[]): array of\n                ontology record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Ontology`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_record_types: array of ontology record types\n        :type ontology_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Ontology`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "ontology_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_form_for_create", 
               "doc": {
                  "headline": "Gets the ontology form for creating new ontologies.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    ontology_record_types (osid.type.Type[]): array of\n                ontology record types\n", 
               "return_doc": "        return: (osid.ontology.OntologyForm) - the ontology form", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param ontology_record_types: array of ontology record types\n        :type ontology_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the ontology form\n        :rtype: ``osid.ontology.OntologyForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "ontology_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.ontology.OntologyForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_ontology", 
               "doc": {
                  "headline": "Creates a new ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_form (osid.ontology.OntologyForm): the form for\n                this ``Ontology``\n", 
               "return_doc": "        return: (osid.ontology.OntologyForm) - the new ``Ontology``", 
               "error_doc": "        raise:  IllegalState - ``ontology_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``ontology_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``ontology_form`` did not originate from\n                ``get_ontology_form_for_create()``", 
               "sphinx_param_doc": "        :param ontology_form: the form for this ``Ontology``\n        :type ontology_form: ``osid.ontology.OntologyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Ontology``\n        :rtype: ``osid.ontology.OntologyForm``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``ontology_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``ontology_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``ontology_form`` did not originate from ``get_ontology_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyForm", 
                     "var_name": "ontology_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyForm"
               ], 
               "return_type": "osid.ontology.OntologyForm", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_ontologies", 
               "doc": {
                  "headline": "Tests if this user can update ``Ontologies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Ontology`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Ontology`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Ontology`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_form_for_update", 
               "doc": {
                  "headline": "Gets the ontology form for updating an existing ontology.", 
                  "body": "        A new ontology form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n", 
               "return_doc": "        return: (osid.ontology.OntologyForm) - the ontology form", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the ontology form\n        :rtype: ``osid.ontology.OntologyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_ontology", 
               "doc": {
                  "headline": "Updates an existing ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_form (osid.ontology.OntologyForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``ontology_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``ontology_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``ontology_form`` did not originate from\n                ``get_ontology_form_for_update()``", 
               "sphinx_param_doc": "        :param ontology_form: the form containing the elements to be updated\n        :type ontology_form: ``osid.ontology.OntologyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``ontology_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``ontology_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``ontology_form`` did not originate from ``get_ontology_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologyForm", 
                     "var_name": "ontology_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_ontologies", 
               "doc": {
                  "headline": "Tests if this user can delete ontologies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Ontology`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Ontology`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Ontology`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_ontology", 
               "doc": {
                  "headline": "Deletes an ``Ontology``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n                to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology`` to remove\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_ontology_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ontologies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Ontology`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Ontology`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_ontology", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Ontology`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Ontology`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another ontology, it is\n        reassigned to the given ontology ``Id``."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ``Ontology``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyNotificationSession", 
         "shortname": "OntologyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Ontology`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session i"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_ontology_notifications", 
            "register_for_new_ontologies", 
            "register_for_new_ontology_ancestors", 
            "register_for_new_ontology_descendants", 
            "register_for_changed_ontologies", 
            "register_for_changed_ontology", 
            "register_for_deleted_ontologies", 
            "register_for_deleted_ontology", 
            "register_for_deleted_ontology_ancestors", 
            "register_for_deleted_ontology_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_ontology_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Ontology`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_ontologies", 
               "doc": {
                  "headline": "Register for notifications of new ontologies.", 
                  "body": "        ``OntologyReceiver.newOntology()`` is invoked when a new\n        ``Ontology`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_ontology_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified ontology in the ontology hierarchy.", 
                  "body": "        ``OntologyReceiver.newOntologyAncestor()`` is invoked when the\n        specified ontology experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_ontology_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified ontology in the ontology hierarchy.", 
                  "body": "        ``OntologyReceiver.newOntologyDescendant()`` is invoked when the\n        specified ontology experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_ontologies", 
               "doc": {
                  "headline": "Registers for notification of updated ontologies.", 
                  "body": "        ``OntologyReceiver.changedOntology()`` is invoked when an\n        ontology is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_ontology", 
               "doc": {
                  "headline": "Registers for notification of an updated ontology.", 
                  "body": "        ``OntologyReceiver.changedOntology()`` is invoked when the\n        specified ontology is changed."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_ontologies", 
               "doc": {
                  "headline": "Registers for notification of deleted ontologies.", 
                  "body": "        ``OntologyReceiver.deletedOntology()`` is invoked when a\n        calenedar is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_ontology", 
               "doc": {
                  "headline": "Registers for notification of a deleted ontology.", 
                  "body": "        ``OntologyReceiver.deletedOntology()`` is invoked when the\n        specified ontology is deleted."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_ontology_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified ontology in the ontology hierarchy.", 
                  "body": "        ``OntologyReceiver.deletedOntologyAncestor()`` is invoked when\n        the specified ontology experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_ontology_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified ontology in the calndar hierarchy.", 
                  "body": "        ``OntologyReceiver.deletedOntologyDescednant()`` is invoked when\n        the specified ontology experiences a removal of one of its\n        descendants."
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ontology to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ontology to monitor\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyHierarchySession", 
         "shortname": "OntologyHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Ontology`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Ontology``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``get_parent_ontologies()`` and ``getChildOntologies()``. To relate\n    these ``Ids`` to another OSID, ``get_ontology_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Ontology`` available in the Ontology OSID is known to this\n    hierarchy but does not appear in the hierarchy traversal until added\n    as a root node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_ontologies()`` or ``get_child_ontologies()``\n    in lieu of a ``PermissionDenied`` error that may disrupt the\n    traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: ontology elements may be silently omitted or\n        re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_hierarchy_id", 
            "get_ontology_hierarchy", 
            "can_access_ontology_hierarchy", 
            "use_comparative_ontology_view", 
            "use_plenary_ontology_view", 
            "get_root_ontology_ids", 
            "get_root_ontologies", 
            "has_parent_ontologies", 
            "is_parent_of_ontology", 
            "get_parent_ontology_ids", 
            "get_parent_ontologies", 
            "is_ancestor_of_ontology", 
            "has_child_ontologies", 
            "is_child_of_ontology", 
            "get_child_ontology_ids", 
            "get_child_ontologies", 
            "is_descendant_of_ontology", 
            "get_ontology_node_ids", 
            "get_ontology_nodes"
         ], 
         "methods": [
            {
               "name": "get_ontology_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_ontology_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may wish not to offer\n        traversal operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_ontology_view", 
               "doc": {
                  "headline": "The returns from the ontology methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_ontology_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_ontology_ids", 
               "doc": {
                  "headline": "Gets the root ontology ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root ontology ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root ontology ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_ontologies", 
               "doc": {
                  "headline": "Gets the root ontologies in this ontology hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the root ontologies", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root ontologies\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_ontologies", 
               "doc": {
                  "headline": "Tests if the ``Ontology`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ontology has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ontology has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_ontology", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``ontology_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``ontology_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_ontology_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the ontology", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the ontology\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_ontologies", 
               "doc": {
                  "headline": "Gets the parents of the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the parents of the\n                ontology", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the ontology\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_ontology", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``ontology_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``ontology_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_ontologies", 
               "doc": {
                  "headline": "Tests if an ontology has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``ontology_id`` has\n                children, ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``ontology_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_ontology", 
               "doc": {
                  "headline": "Tests if an ontology is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``ontology_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``ontology_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_ontology_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the ontology", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` to query\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the ontology\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_ontologies", 
               "doc": {
                  "headline": "Gets the children of the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the children of the\n                ontology", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` to query\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the ontology\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_ontology", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``ontology_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``ontology_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontology_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - an ontology node", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` to query\n        :type ontology_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an ontology node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontology_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.ontology.OntologyNode) - an ontology node", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` to query\n        :type ontology_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an ontology node\n        :rtype: ``osid.ontology.OntologyNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.ontology.OntologyNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyHierarchyDesignSession", 
         "shortname": "OntologyHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Ontology`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Ontology``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_ontology_hierarchy_id", 
            "get_ontology_hierarchy", 
            "can_modify_ontology_hierarchy", 
            "add_root_ontology", 
            "remove_root_ontology", 
            "add_child_ontology", 
            "remove_child_ontology", 
            "remove_child_ontologies"
         ], 
         "methods": [
            {
               "name": "get_ontology_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_ontology_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_ontology", 
               "doc": {
                  "headline": "Adds a root ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``ontology_id`` is already in hierarchy\n        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``ontology_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_ontology", 
               "doc": {
                  "headline": "Removes a root ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not a root\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not a root\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_ontology", 
               "doc": {
                  "headline": "Adds a child to an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``ontology_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``ontology_id`` or ``child_id`` not found\n        raise:  NullArgument - ``ontology_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``ontology_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``ontology_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_ontology", 
               "doc": {
                  "headline": "Removes a child from an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``ontology_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``ontology_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_ontologies", 
               "doc": {
                  "headline": "Removes all children from an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of an ontology\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not in hierarchy\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of an ontology\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyAssignmentSession", 
         "shortname": "OntologyAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to manage ``Id`` to ``Ontology`` mappings.", 
            "body": "    Arbitrary ``Ids`` may be used to offer a restricted ontology to\n    allow an arbitrary ``Id`` to be used in the ``SubjectLookupSession``\n    or the ``SubjectHierarchySession``. Only one ontology can be\n    assigned to an ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_ontologies", 
            "assign_ontology", 
            "unassign_ontology", 
            "get_ontology", 
            "get_ids"
         ], 
         "methods": [
            {
               "name": "can_assign_ontologies", 
               "doc": {
                  "headline": "Tests if this user can manage of id/ontology mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known assignment methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may wish not to offer\n        mapping functions to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if managing mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if managing mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "assign_ontology", 
               "doc": {
                  "headline": "Assigns an ``Id`` to an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): ``an _id``\n        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` is not found\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: ``an _id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_ontology", 
               "doc": {
                  "headline": "Unassigns an ``Id`` from an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): ``an _id``\n        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``id`` not assigned to ``ontology_id``\n        raise:  NullArgument - ``id`` or ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: ``an _id``\n        :type id: ``osid.id.Id``\n        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not assigned to ``ontology_id``\n        :raise: ``NullArgument`` -- ``id`` or ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ontology to which the ``Id`` is assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): ``an _id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: ``an _id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_ids", 
               "doc": {
                  "headline": "Gets a list of the ``Ids`` assigned to an ontology.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): ``Id`` of the ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``ontology_id`` not found\n        raise:  NullArgument - ``ontology_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param ontology_id: ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``ontology_id`` not found\n        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.Subject", 
         "shortname": "Subject", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Subject`` represents a span of time and an optional location.", 
            "body": "    Subjects may be managed individually, or in repeatable sets using\n    ``RecuringSubject``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Federateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Federateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Federateable"
            }
         ], 
         "method_names": [
            "get_subject_record"
         ], 
         "methods": [
            {
               "name": "get_subject_record", 
               "doc": {
                  "headline": "Gets the subject record corresponding to the given ``Subject`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``subject_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(subject_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectRecord) - the subject\n                record", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(subject_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param subject_record_type: the type of the record to retrieve\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject record\n        :rtype: ``osid.ontology.records.SubjectRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectRecord", 
         "shortname": "SubjectRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Subject``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectQuery", 
         "shortname": "SubjectQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching subjects.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidFederateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidFederateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQuery"
            }
         ], 
         "method_names": [
            "match_ancestor_subject_id", 
            "clear_ancestor_subject_id_terms", 
            "supports_ancestor_subject_query", 
            "get_ancestor_subject_query", 
            "match_any_ancestor_subject", 
            "clear_ancestor_subject_terms", 
            "match_descendant_subject_id", 
            "clear_descendant_subject_id_terms", 
            "supports_descendant_subject_query", 
            "get_descendant_subject_query", 
            "match_any_descendant_subject", 
            "clear_descendant_subject_terms", 
            "match_relevancy_id", 
            "clear_relevancy_id_terms", 
            "supports_relevancy_query", 
            "get_relevancy_query", 
            "match_any_relevancy", 
            "clear_relevancy_terms", 
            "match_ontology_id", 
            "clear_ontology_id_terms", 
            "supports_ontology_query", 
            "get_ontology_query", 
            "clear_ontology_terms", 
            "get_subject_query_record"
         ], 
         "methods": [
            {
               "name": "match_ancestor_subject_id", 
               "doc": {
                  "headline": "Sets the subject ``Id`` for this query to match subjects that have the specified subject as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): a subject ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``", 
               "sphinx_param_doc": "        :param subject_id: a subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_subject_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor subject ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_subject_query", 
               "doc": {
                  "headline": "Tests if a ``SubjectQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_subject_query", 
               "doc": {
                  "headline": "Gets the query for a subject.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_subject_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_subject_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_subject", 
               "doc": {
                  "headline": "Matches subjects with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match subjects with any\n                ancestor, ``false`` to match root subjects\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match subjects with any ancestor, ``false`` to match root subjects\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_subject_terms", 
               "doc": {
                  "headline": "Clears the ancestor subject terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_subject_id", 
               "doc": {
                  "headline": "Sets the subject ``Id`` for this query to match subjects that have the specified subject as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): a subject ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``", 
               "sphinx_param_doc": "        :param subject_id: a subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_subject_id_terms", 
               "doc": {
                  "headline": "Clears the descendant subject ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_subject_query", 
               "doc": {
                  "headline": "Tests if a ``SubjectQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_subject_query", 
               "doc": {
                  "headline": "Gets the query for a subject.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_subject_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_subject_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_subject", 
               "doc": {
                  "headline": "Matches subjects with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match subjects with any\n                descendant, ``false`` to match leaf subjects\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match subjects with any descendant, ``false`` to match leaf subjects\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_subject_terms", 
               "doc": {
                  "headline": "Clears the descendant subject terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_relevancy_id", 
               "doc": {
                  "headline": "Sets the relevancy ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): a relevancy ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_id`` is ``null``", 
               "sphinx_param_doc": "        :param relevancy_id: a relevancy ``Id``\n        :type relevancy_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_relevancy_id_terms", 
               "doc": {
                  "headline": "Clears the relevancy ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_query", 
               "doc": {
                  "headline": "Tests if a ``RelevancyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a relevancy query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a relevancy query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query", 
               "doc": {
                  "headline": "Gets the query for a relevancy.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "        raise:  Unimplemented - ``supports_relevancy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_relevancy", 
               "doc": {
                  "headline": "Matches ontologies that have any relevancy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match ontologies with any\n                relevancy, ``false`` to match ontologies with no\n                relevancy\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match ontologies with any relevancy, ``false`` to match ontologies with no relevancy\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_relevancy_terms", 
               "doc": {
                  "headline": "Clears the relevancy terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ontology_id", 
               "doc": {
                  "headline": "Sets the ontology ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): a ontology ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: a ontology ``Id``\n        :type ontology_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ontology_id_terms", 
               "doc": {
                  "headline": "Clears the ontology ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_query", 
               "doc": {
                  "headline": "Tests if a ``OntologyQuery`` is available for querying ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a ontology query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a ontology query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_query", 
               "doc": {
                  "headline": "Gets the query for a ontology.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - the ontology query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ontology_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ontology_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ontology_terms", 
               "doc": {
                  "headline": "Clears the ontology terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query_record", 
               "doc": {
                  "headline": "Gets the subject query record corresponding to the given ``Subject`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): a subject query\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectQueryRecord) - the subject\n                query record", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(subject_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param subject_record_type: a subject query record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject query record\n        :rtype: ``osid.ontology.records.SubjectQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectQueryRecord", 
         "shortname": "SubjectQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SubjectQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectQueryInspector", 
         "shortname": "SubjectQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining subject queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidFederateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidFederateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_ancestor_subject_id_terms", 
            "get_ancestor_subject_terms", 
            "get_descendant_subject_id_terms", 
            "get_descendant_subject_terms", 
            "get_relevancy_id_terms", 
            "get_relevancy_terms", 
            "get_ontology_id_terms", 
            "get_ontology_terms", 
            "get_subject_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_ancestor_subject_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor subject ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor subject ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor subject ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_subject_terms", 
               "doc": {
                  "headline": "Gets the ancestor subject terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the ancestor\n                subject terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor subject terms\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_subject_id_terms", 
               "doc": {
                  "headline": "Gets the descendant subject ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant subject\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant subject ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_subject_terms", 
               "doc": {
                  "headline": "Gets the descendant subject terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the descendant\n                subject terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant subject terms\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_id_terms", 
               "doc": {
                  "headline": "Gets the relevancy ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the relevancy ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_terms", 
               "doc": {
                  "headline": "Gets the relevancy terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQueryInspector) - the relevancy\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy terms\n        :rtype: ``osid.ontology.RelevancyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_id_terms", 
               "doc": {
                  "headline": "Gets the ontology ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ontology ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_terms", 
               "doc": {
                  "headline": "Gets the ontology terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQueryInspector) - the ontology\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology terms\n        :rtype: ``osid.ontology.OntologyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query_inspector_record", 
               "doc": {
                  "headline": "Gets the subject query inspector record corresponding to the given ``Subject`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): a subject record\n                type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectQueryInspectorRecord) -\n                the subject query inspector record", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(subject_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param subject_record_type: a subject record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject query inspector record\n        :rtype: ``osid.ontology.records.SubjectQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectQueryInspectorRecord", 
         "shortname": "SubjectQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a Subject ``QueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectForm", 
         "shortname": "SubjectForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Subjects``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``SubjectAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidFederateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidFederateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableForm"
            }
         ], 
         "method_names": [
            "get_subject_form_record"
         ], 
         "methods": [
            {
               "name": "get_subject_form_record", 
               "doc": {
                  "headline": "Gets the ``SubjectFormRecord`` corresponding to the given subject record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): the subject record\n                type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectFormRecord) - the subject\n                form record", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(subject_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param subject_record_type: the subject record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject form record\n        :rtype: ``osid.ontology.records.SubjectFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectFormRecord", 
         "shortname": "SubjectFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SubjectForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectSearchOrder", 
         "shortname": "SubjectSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidFederateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidFederateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableSearchOrder"
            }
         ], 
         "method_names": [
            "get_subject_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_subject_search_order_record", 
               "doc": {
                  "headline": "Gets the subject search order record corresponding to the given subject record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    subject_record_type (osid.type.Type): a subject record\n                type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectSearchOrderRecord) - the\n                subject search order record", 
               "error_doc": "        raise:  NullArgument - ``subject_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(subject_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param subject_record_type: a subject record type\n        :type subject_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject search order record\n        :rtype: ``osid.ontology.records.SubjectSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectSearchOrderRecord", 
         "shortname": "SubjectSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SubjectSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectSearch", 
         "shortname": "SubjectSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``SubjectSearch`` defines the interface for specifying subject search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_subjects", 
            "order_subject_results", 
            "get_subject_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_subjects", 
               "doc": {
                  "headline": "Execute this search among the given list of subjects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_ids (osid.id.IdList): list of subjects\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_ids`` is ``null``", 
               "sphinx_param_doc": "        :param subject_ids: list of subjects\n        :type subject_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "subject_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_subject_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_search_order (osid.ontology.SubjectSearchOrder):\n                subject search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_search_order`` is ``null``\n        raise:  Unsupported - ``subject_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param subject_search_order: subject search order\n        :type subject_search_order: ``osid.ontology.SubjectSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``subject_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.SubjectSearchOrder", 
                     "var_name": "subject_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.SubjectSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_search_record", 
               "doc": {
                  "headline": "Gets the subject search record corresponding to the given subject search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    subject_search_record_type (osid.type.Type): a subject\n                search record type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectSearchRecord) - the\n                subject search record", 
               "error_doc": "        raise:  NullArgument - ``subject_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(subject_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject_search_record_type: a subject search record type\n        :type subject_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject search record\n        :rtype: ``osid.ontology.records.SubjectSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectSearchRecord", 
         "shortname": "SubjectSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SubjectSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectSearchResults", 
         "shortname": "SubjectSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_subjects", 
            "get_subject_query_inspector", 
            "get_subject_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_subjects", 
               "doc": {
                  "headline": "Gets the subject list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectList) - the subject list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject list\n        :rtype: ``osid.ontology.SubjectList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the subject\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query inspector\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_subject_search_results_record", 
               "doc": {
                  "headline": "Gets the subject search results record corresponding to the given subject search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    subject_search_record_type (osid.type.Type): a subject\n                search record type\n", 
               "return_doc": "        return: (osid.ontology.records.SubjectSearchResultsRecord) - the\n                subject search results record", 
               "error_doc": "        raise:  NullArgument - ``subject_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(subject_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject_search_record_type: a subject search record type\n        :type subject_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the subject search results record\n        :rtype: ``osid.ontology.records.SubjectSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(subject_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "subject_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.SubjectSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.SubjectSearchResultsRecord", 
         "shortname": "SubjectSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SubjectSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.SubjectReceiver", 
         "shortname": "SubjectReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The subject receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Subjects``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_subject", 
            "new_ancestor_subject", 
            "new_descendant_subject", 
            "changed_subject", 
            "deleted_subject", 
            "deleted_ancestor_subject", 
            "deleted_descendant_subject"
         ], 
         "methods": [
            {
               "name": "new_subject", 
               "doc": {
                  "headline": "The callback for notifications of new subjects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the new\n                ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the new ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_subject", 
               "doc": {
                  "headline": "The callback for notifications of new subject ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the Id of the ``Subject``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the Id of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_subject", 
               "doc": {
                  "headline": "The callback for notifications of new subject descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the Id of the ``Subject``\n        arg:    descendant_id (osid.id.Id): the Id of the new\n                ``Subject`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the Id of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param descendant_id: the Id of the new ``Subject`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_subject", 
               "doc": {
                  "headline": "The callback for notification of updated subjects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the updated\n                ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the updated ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_subject", 
               "doc": {
                  "headline": "The callback for notification of deleted subjects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the ``Id`` of the deleted\n                ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the ``Id`` of the deleted ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_subject", 
               "doc": {
                  "headline": "The callback for notifications of deleted subject ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the Id of the ``Subject``\n        arg:    ancestor_id (osid.id.Id): the Id of the removed ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the Id of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the removed ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_subject", 
               "doc": {
                  "headline": "The callback for notifications of deleted subject descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): the Id of the ``Subject``\n        arg:    descendant_id (osid.id.Id): the Id of the removed\n                descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param subject_id: the Id of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n        :param descendant_id: the Id of the removed descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectList", 
         "shortname": "SubjectList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``SubjectList`` provides a means for accessing ``Subject`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (sl.hasNext()) { Subject subject =\n    sl.getNextSubject(); }\n\n    or\n      while (sl.hasNext()) {\n           Subject[] subjects = sl.getNextSubjects(sl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_subject", 
            "get_next_subjects"
         ], 
         "methods": [
            {
               "name": "get_next_subject", 
               "doc": {
                  "headline": "Gets the next ``Subject`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Subject) - the next ``Subject`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Subject`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Subject`` in this list. The ``has_next()`` method should be used to test that a next ``Subject`` is available before calling this method.\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Subject", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_subjects", 
               "doc": {
                  "headline": "Gets the next set of ``Subject`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Subject`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.ontology.Subject) - an array of ``Subject``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Subject`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Subject`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.ontology.Subject", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectNode", 
         "shortname": "SubjectNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``SubjectHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_subject", 
            "get_parent_subject_nodes", 
            "get_child_subject_nodes"
         ], 
         "methods": [
            {
               "name": "get_subject", 
               "doc": {
                  "headline": "Gets the ``Subject`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Subject) - the subject represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject represented by this node\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Subject", 
               "errors": {}
            }, 
            {
               "name": "get_parent_subject_nodes", 
               "doc": {
                  "headline": "Gets the parents of this subject.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.ontology.SubjectNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_subject_nodes", 
               "doc": {
                  "headline": "Gets the children of this subject.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectNodeList) - the children of this\n                subject", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this subject\n        :rtype: ``osid.ontology.SubjectNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.SubjectNodeList", 
         "shortname": "SubjectNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``SubjectNodeList`` provides a means for accessing ``SubjectNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (snl.hasNext()) { SubjectNode node =\n    snl.getNextSubjectNode(); }\n\n    or\n      while (snl.hasNext()) {\n           SubjectNode[] nodes = snl.getNextSubjectNodes(snl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_subject_node", 
            "get_next_subject_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_subject_node", 
               "doc": {
                  "headline": "Gets the next ``SubjectNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectNode) - the next ``SubjectNode``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``SubjectNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``SubjectNode`` in this list. The ``has_next()`` method should be used to test that a next ``SubjectNode`` is available before calling this method.\n        :rtype: ``osid.ontology.SubjectNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_subject_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``SubjectNode`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``SubjectNode`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.ontology.SubjectNode) - an array of\n                ``SubjectNode`` elements.The length of the array is less\n                than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``SubjectNode`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``SubjectNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.ontology.SubjectNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.ontology.SubjectNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.Relevancy", 
         "shortname": "Relevancy", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Relevancy`` maps an ``Id`` to an ``Subject``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_subject_id", 
            "get_subject", 
            "get_mapped_id", 
            "get_relevancy_record"
         ], 
         "methods": [
            {
               "name": "get_subject_id", 
               "doc": {
                  "headline": "Gets the subject ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the subject ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_subject", 
               "doc": {
                  "headline": "Gets the ``Subject``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Subject) - the subject", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject\n        :rtype: ``osid.ontology.Subject``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Subject", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_mapped_id", 
               "doc": {
                  "headline": "Gets the ``Id`` mapped to this ``Subject``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - a mapped ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a mapped ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_record", 
               "doc": {
                  "headline": "Gets the relevancy record corresponding to the given ``Relevancy`` record ``Type``.", 
                  "body": "        This method must is to retrieve an object implementing the\n        requested record. The ``relevancy_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(relevancy_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancyRecord) - the relevancy\n                record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(relevancy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param relevancy_record_type: the type of the record to retrieve\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy record\n        :rtype: ``osid.ontology.records.RelevancyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancyRecord", 
         "shortname": "RelevancyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Relevancy``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancyQuery", 
         "shortname": "RelevancyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching relevancies.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_subject_id", 
            "clear_subject_id_terms", 
            "supports_subject_query", 
            "get_subject_query", 
            "clear_subject_terms", 
            "match_mapped_id", 
            "clear_mapped_id_terms", 
            "match_ontology_id", 
            "clear_ontology_id_terms", 
            "supports_ontology_query", 
            "get_ontology_query", 
            "clear_ontology_terms", 
            "get_relevancy_query_record"
         ], 
         "methods": [
            {
               "name": "match_subject_id", 
               "doc": {
                  "headline": "Sets the subject ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): a subject ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``", 
               "sphinx_param_doc": "        :param subject_id: a subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_subject_id_terms", 
               "doc": {
                  "headline": "Clears the subject ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_query", 
               "doc": {
                  "headline": "Tests if a ``SubjectQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query", 
               "doc": {
                  "headline": "Gets the query for an subject.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  Unimplemented - ``supports_subject_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_subject_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_subject_terms", 
               "doc": {
                  "headline": "Clears the subject terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_mapped_id", 
               "doc": {
                  "headline": "Sets the mapped ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``id`` is ``null``", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_mapped_id_terms", 
               "doc": {
                  "headline": "Clears the mapped ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ontology_id", 
               "doc": {
                  "headline": "Sets the ontology ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): a ontology ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: a ontology ``Id``\n        :type ontology_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ontology_id_terms", 
               "doc": {
                  "headline": "Clears the ontology ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ontology_query", 
               "doc": {
                  "headline": "Tests if a ``OntologyQuery`` is available for querying ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a ontology query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a ontology query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_query", 
               "doc": {
                  "headline": "Gets the query for a ontology.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - the ontology query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ontology_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ontology_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ontology_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ontology_terms", 
               "doc": {
                  "headline": "Clears the ontology terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query_record", 
               "doc": {
                  "headline": "Gets the relevancy query record corresponding to the given ``Relevancy`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    relevancyt_record_type (osid.type.Type): an relevancy\n                query record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancyQueryRecord) - the\n                relevancy query record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(relevancy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param relevancyt_record_type: an relevancy query record type\n        :type relevancyt_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy query record\n        :rtype: ``osid.ontology.records.RelevancyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancyt_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancyQueryRecord", 
         "shortname": "RelevancyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancyQueryInspector", 
         "shortname": "RelevancyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining relevancy queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_subject_id_terms", 
            "get_subject_terms", 
            "get_mapped_id_terms", 
            "get_ontology_id_terms", 
            "get_ontology_terms", 
            "get_relevancy_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_subject_id_terms", 
               "doc": {
                  "headline": "Gets the subject ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the subject ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_subject_terms", 
               "doc": {
                  "headline": "Gets the subject terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the subject\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject terms\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_mapped_id_terms", 
               "doc": {
                  "headline": "Gets the mapped ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the mapped ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the mapped ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_id_terms", 
               "doc": {
                  "headline": "Gets the ontology ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ontology ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_terms", 
               "doc": {
                  "headline": "Gets the ontology terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQueryInspector) - the ontology\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology terms\n        :rtype: ``osid.ontology.OntologyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query_inspector_record", 
               "doc": {
                  "headline": "Gets the relevancy query inspector record corresponding to the given ``Relevancy`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): a relevancy\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancyQueryInspectorRecord) -\n                the relevancy query inspector record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(relevancy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param relevancy_record_type: a relevancy record type\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy query inspector record\n        :rtype: ``osid.ontology.records.RelevancyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancyQueryInspectorRecord", 
         "shortname": "RelevancyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancyForm", 
         "shortname": "RelevancyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Relevancy`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_relevancy_form_record"
         ], 
         "methods": [
            {
               "name": "get_relevancy_form_record", 
               "doc": {
                  "headline": "Gets the ``RelevancyFormRecord`` corresponding to the given relevancy record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): the relevancy\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancyFormRecord) - the\n                relevancy form record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(relevancy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param relevancy_record_type: the relevancy record type\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy form record\n        :rtype: ``osid.ontology.records.RelevancyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancyFormRecord", 
         "shortname": "RelevancyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancySearchOrder", 
         "shortname": "RelevancySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_subject", 
            "supports_subject_search_order", 
            "get_subject_search_order", 
            "get_relevancy_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_subject", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_subject_search_order", 
               "doc": {
                  "headline": "Tests if a ``SubjectSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_search_order", 
               "doc": {
                  "headline": "Gets the search order for a subject.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectSearchOrder) - the subject search\n                order", 
               "error_doc": "        raise:  Unimplemented - ``supports_subject_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject search order\n        :rtype: ``osid.ontology.SubjectSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_subject_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_order_record", 
               "doc": {
                  "headline": "Gets the relevancy search order record corresponding to the given commitment record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    relevancy_record_type (osid.type.Type): a relevancy\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancySearchOrderRecord) - the\n                relevancy search order record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(relevancy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param relevancy_record_type: a relevancy record type\n        :type relevancy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy search order record\n        :rtype: ``osid.ontology.records.RelevancySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancySearchOrderRecord", 
         "shortname": "RelevancySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancySearch", 
         "shortname": "RelevancySearch", 
         "category": "searches", 
         "doc": {
            "headline": "``RelevancySearch`` defines the interface for specifying relevancy search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_relevancies", 
            "order_relevancy_results", 
            "get_relevancy_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_relevancies", 
               "doc": {
                  "headline": "Execute this search among the given list of relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_ids (osid.id.IdList): list of relevancies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_ids`` is ``null``", 
               "sphinx_param_doc": "        :param relevancy_ids: list of relevancies\n        :type relevancy_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "relevancy_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_relevancy_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_search_order\n                (osid.ontology.RelevancySearchOrder): relevancy search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_search_order`` is ``null``\n        raise:  Unsupported - ``relevancy_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param relevancy_search_order: relevancy search order\n        :type relevancy_search_order: ``osid.ontology.RelevancySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``relevancy_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.RelevancySearchOrder", 
                     "var_name": "relevancy_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.RelevancySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_search_record", 
               "doc": {
                  "headline": "Gets the relevancy search record corresponding to the given relevancy search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    relevancy_search_record_type (osid.type.Type): a\n                relevancy search record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancySearchRecord) - the\n                relevancy search record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relevancy_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relevancy_search_record_type: a relevancy search record type\n        :type relevancy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy search record\n        :rtype: ``osid.ontology.records.RelevancySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancySearchRecord", 
         "shortname": "RelevancySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancySearchResults", 
         "shortname": "RelevancySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_relevancies", 
            "get_relevancy_query_inspector", 
            "get_relevancy_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_relevancies", 
               "doc": {
                  "headline": "Gets the relevancy list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyList) - the relevancy list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy list\n        :rtype: ``osid.ontology.RelevancyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relevancy_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQueryInspector) - the relevancy\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query inspector\n        :rtype: ``osid.ontology.RelevancyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_search_results_record", 
               "doc": {
                  "headline": "Gets the relevancy search results record corresponding to the given relevancy search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    relevancy_search_record_type (osid.type.Type): a\n                relevancy search record type\n", 
               "return_doc": "        return: (osid.ontology.records.RelevancySearchResultsRecord) -\n                the relevancy search results record", 
               "error_doc": "        raise:  NullArgument - ``relevancy_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(relevancy_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relevancy_search_record_type: a relevancy search record type\n        :type relevancy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relevancy search results record\n        :rtype: ``osid.ontology.records.RelevancySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(relevancy_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relevancy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.RelevancySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.RelevancySearchResultsRecord", 
         "shortname": "RelevancySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelevancySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.RelevancyReceiver", 
         "shortname": "RelevancyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "This receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted relevancies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_relevancy", 
            "new_relevancy_for_subject", 
            "new_relevancy_for_id", 
            "changed_relevancy", 
            "changed_relevancy_for_subject", 
            "changed_relevancy_for_id", 
            "deleted_relevancy", 
            "deleted_relevancy_for_subject", 
            "deleted_relevancy_for_id"
         ], 
         "methods": [
            {
               "name": "new_relevancy", 
               "doc": {
                  "headline": "The callback for notifications of new relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the new\n                ``Relevancy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the new ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_relevancy_for_subject", 
               "doc": {
                  "headline": "The callback for notifications of new relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the new\n                ``Relevancy``\n        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the new ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_relevancy_for_id", 
               "doc": {
                  "headline": "The callback for notifications of new relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the new\n                ``Relevancy``\n        arg:    id (osid.id.Id): the mapped ``Id``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the new ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_relevancy", 
               "doc": {
                  "headline": "The callback for notification of updated relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the updated\n                ``Relevancy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the updated ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_relevancy_for_subject", 
               "doc": {
                  "headline": "The callback for notifications of updated relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the updated\n                ``Relevancy``\n        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the updated ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_relevancy_for_id", 
               "doc": {
                  "headline": "The callback for notifications of updated relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the updated\n                ``Relevancy``\n        arg:    id (osid.id.Id): the mapped ``Id``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the updated ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_relevancy", 
               "doc": {
                  "headline": "The callback for notification of deleted relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the deleted\n                ``Relevancy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the deleted ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_relevancy_for_subject", 
               "doc": {
                  "headline": "The callback for notifications of deleted relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the deleted\n                ``Relevancy``\n        arg:    subject_id (osid.id.Id): the ``Id`` of the ``Subject``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the deleted ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param subject_id: the ``Id`` of the ``Subject``\n        :type subject_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_relevancy_for_id", 
               "doc": {
                  "headline": "The callback for notifications of deleted relevancies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): the ``Id`` of the deleted\n                ``Relevancy``\n        arg:    id (osid.id.Id): the mapped ``Id``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relevancy_id: the ``Id`` of the deleted ``Relevancy``\n        :type relevancy_id: ``osid.id.Id``\n        :param id: the mapped ``Id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.RelevancyList", 
         "shortname": "RelevancyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``RelevancyList`` provides a means for accessing ``Relevancy`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Relevancy relevancy =\n    rl.getNextRelevancy(); }\n\n    or\n      while (rl.hasNext()) {\n           Relevancy[] relevancies = rl.getNextRelevancies(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_relevancy", 
            "get_next_relevancies"
         ], 
         "methods": [
            {
               "name": "get_next_relevancy", 
               "doc": {
                  "headline": "Gets the next ``Relevancy`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Relevancy) - the next ``Relevancy`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Relevancy`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Relevancy`` in this list. The ``has_next()`` method should be used to test that a next ``Relevancy`` is available before calling this method.\n        :rtype: ``osid.ontology.Relevancy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Relevancy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_relevancies", 
               "doc": {
                  "headline": "Gets the next set of ``Relevancy`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Relevancy`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.ontology.Relevancy) - an array of ``Relevancy``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Relevancy`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Relevancy`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.ontology.Relevancy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.ontology.Relevancy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.Ontology", 
         "shortname": "Ontology", 
         "category": "objects", 
         "doc": {
            "headline": "An ontology defines a collection of subjects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_ontology_record"
         ], 
         "methods": [
            {
               "name": "get_ontology_record", 
               "doc": {
                  "headline": "Gets the ontology record corresponding to the given ``Ontology`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``ontology_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(ontology_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): an ontology\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologyRecord) - the ontology\n                record", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(ontology_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param ontology_record_type: an ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology record\n        :rtype: ``osid.ontology.records.OntologyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologyRecord", 
         "shortname": "OntologyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Ontology``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologyQuery", 
         "shortname": "OntologyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching ontologies.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_subject_id", 
            "clear_subject_id_terms", 
            "supports_subject_query", 
            "get_subject_query", 
            "match_any_subject", 
            "clear_subject_terms", 
            "match_relevancy_id", 
            "clear_relevancy_id_terms", 
            "supports_relevancy_query", 
            "get_relevancy_query", 
            "match_any_relevancy", 
            "clear_relevancy_terms", 
            "match_ancestor_ontology_id", 
            "clear_ancestor_ontology_id_terms", 
            "supports_ancestor_ontology_query", 
            "get_ancestor_ontology_query", 
            "match_any_ancestor_ontology", 
            "clear_ancestor_ontology_terms", 
            "match_descendant_ontology_id", 
            "clear_descendant_ontology_id_terms", 
            "supports_descendant_ontology_query", 
            "get_descendant_ontology_query", 
            "match_any_descendant_ontology", 
            "clear_descendant_ontology_terms", 
            "get_ontology_query_record"
         ], 
         "methods": [
            {
               "name": "match_subject_id", 
               "doc": {
                  "headline": "Sets the subject ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_id (osid.id.Id): a subject ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``subject_id`` is ``null``", 
               "sphinx_param_doc": "        :param subject_id: a subject ``Id``\n        :type subject_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``subject_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "subject_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_subject_id_terms", 
               "doc": {
                  "headline": "Clears the subject ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_subject_query", 
               "doc": {
                  "headline": "Tests if a ``SubjectQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a subject query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a subject query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_subject_query", 
               "doc": {
                  "headline": "Gets the query for a subject.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQuery) - the subject query", 
               "error_doc": "        raise:  Unimplemented - ``supports_subject_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject query\n        :rtype: ``osid.ontology.SubjectQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_subject_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_subject_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_subject", 
               "doc": {
                  "headline": "Matches ontologies that have any subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match ontologies with any\n                subject, ``false`` to match ontologies with no subject\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match ontologies with any subject, ``false`` to match ontologies with no subject\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_subject_terms", 
               "doc": {
                  "headline": "Clears the subject terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_relevancy_id", 
               "doc": {
                  "headline": "Sets the relevancy ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relevancy_id (osid.id.Id): a relevancy ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relevancy_id`` is ``null``", 
               "sphinx_param_doc": "        :param relevancy_id: a relevancy ``Id``\n        :type relevancy_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relevancy_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relevancy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_relevancy_id_terms", 
               "doc": {
                  "headline": "Clears the relevancy ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_relevancy_query", 
               "doc": {
                  "headline": "Tests if a ``RelevancyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a relevancy query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a relevancy query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_query", 
               "doc": {
                  "headline": "Gets the query for a relevancy.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQuery) - the relevancy query", 
               "error_doc": "        raise:  Unimplemented - ``supports_relevancy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy query\n        :rtype: ``osid.ontology.RelevancyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_relevancy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relevancy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_relevancy", 
               "doc": {
                  "headline": "Matches ontologies that have any relevancy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match ontologies with any\n                relevancy, ``false`` to match ontologies with no\n                relevancy\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match ontologies with any relevancy, ``false`` to match ontologies with no relevancy\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_relevancy_terms", 
               "doc": {
                  "headline": "Clears the relevancy terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_ontology_id", 
               "doc": {
                  "headline": "Sets the ontology ``Id`` for this query to match ontologies that have the specified ontology as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): an ontology ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: an ontology ``Id``\n        :type ontology_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_ontology_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor ontology ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_ontology_query", 
               "doc": {
                  "headline": "Tests if an ``OntologyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an ontology query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an ontology query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_ontology_query", 
               "doc": {
                  "headline": "Gets the query for an ontology.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - the ontology query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_ontology_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_ontology_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_ontology_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_ontology", 
               "doc": {
                  "headline": "Matches ontologies with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match ontologies with any\n                ancestor, ``false`` to match root ontologies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match ontologies with any ancestor, ``false`` to match root ontologies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_ontology_terms", 
               "doc": {
                  "headline": "Clears the ancestor ontology terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_ontology_id", 
               "doc": {
                  "headline": "Sets the ontology ``Id`` for this query to match ontologies that have the specified ontology as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): an ontology ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_id`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_id: an ontology ``Id``\n        :type ontology_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_ontology_id_terms", 
               "doc": {
                  "headline": "Clears the descendant ontology ``Id`` terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_ontology_query", 
               "doc": {
                  "headline": "Tests if an ``OntologyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an ontology query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an ontology query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_ontology_query", 
               "doc": {
                  "headline": "Gets the query for an ontology.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQuery) - the ontology query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_ontology_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology query\n        :rtype: ``osid.ontology.OntologyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_ontology_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_ontology_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_ontology", 
               "doc": {
                  "headline": "Matches ontologies with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match ontologies with any\n                descendant, ``false`` to match leaf ontologies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match ontologies with any descendant, ``false`` to match leaf ontologies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_ontology_terms", 
               "doc": {
                  "headline": "Clears the descendant ontology terms for this query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_query_record", 
               "doc": {
                  "headline": "Gets the ontology query record corresponding to the given ``Ontology`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): a ontology record\n                type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologyQueryRecord) - the\n                ontology query record", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(ontology_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param ontology_record_type: a ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology query record\n        :rtype: ``osid.ontology.records.OntologyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologyQueryRecord", 
         "shortname": "OntologyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologyQueryInspector", 
         "shortname": "OntologyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining ontology queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_subject_id_terms", 
            "get_subject_terms", 
            "get_relevancy_id_terms", 
            "get_relevancy_terms", 
            "get_ancestor_ontology_id_terms", 
            "get_ancestor_ontology_terms", 
            "get_descendant_ontology_id_terms", 
            "get_descendant_ontology_terms", 
            "get_ontology_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_subject_id_terms", 
               "doc": {
                  "headline": "Gets the subject ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the subject ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_subject_terms", 
               "doc": {
                  "headline": "Gets the subject terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.SubjectQueryInspector) - the subject\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject terms\n        :rtype: ``osid.ontology.SubjectQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.SubjectQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_id_terms", 
               "doc": {
                  "headline": "Gets the relevancy ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the relevancy ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_relevancy_terms", 
               "doc": {
                  "headline": "Gets the relevancy terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.RelevancyQueryInspector) - the relevancy\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relevancy terms\n        :rtype: ``osid.ontology.RelevancyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.RelevancyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_ontology_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor ontology ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor ontology\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor ontology ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_ontology_terms", 
               "doc": {
                  "headline": "Gets the ancestor ontology terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQueryInspector) - the ancestor\n                ontology terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor ontology terms\n        :rtype: ``osid.ontology.OntologyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_ontology_id_terms", 
               "doc": {
                  "headline": "Gets the descendant ontology ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant ontology\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant ontology ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_ontology_terms", 
               "doc": {
                  "headline": "Gets the descendant ontology terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQueryInspector) - the descendant\n                ontology terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant ontology terms\n        :rtype: ``osid.ontology.OntologyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_query_inspector_record", 
               "doc": {
                  "headline": "Gets the ontology query inspector record corresponding to the given ``Ontology`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): an ontology\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologyQueryInspectorRecord) -\n                the ontology query inspector record", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(ontology_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param ontology_record_type: an ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology query inspector record\n        :rtype: ``osid.ontology.records.OntologyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologyQueryInspectorRecord", 
         "shortname": "OntologyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologyForm", 
         "shortname": "OntologyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ontologies.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``OntologyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_ontology_form_record"
         ], 
         "methods": [
            {
               "name": "get_ontology_form_record", 
               "doc": {
                  "headline": "Gets the ``OntologyFormRecord`` corresponding to the given ontology record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): an ontology\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologyFormRecord) - the\n                ontology form record", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(ontology_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param ontology_record_type: an ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology form record\n        :rtype: ``osid.ontology.records.OntologyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologyFormRecord", 
         "shortname": "OntologyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologySearchOrder", 
         "shortname": "OntologySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_ontology_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_ontology_search_order_record", 
               "doc": {
                  "headline": "Gets the ontology search order record corresponding to the given ontology record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    ontology_record_type (osid.type.Type): an ontology\n                record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologySearchOrderRecord) - the\n                ontology search order record", 
               "error_doc": "        raise:  NullArgument - ``ontology_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(ontology_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param ontology_record_type: an ontology record type\n        :type ontology_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology search order record\n        :rtype: ``osid.ontology.records.OntologySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologySearchOrderRecord", 
         "shortname": "OntologySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologySearch", 
         "shortname": "OntologySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing ontology searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_ontologies", 
            "order_ontology_results", 
            "get_ontology_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_ontologies", 
               "doc": {
                  "headline": "Execute this search among the given list of ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_ids (osid.id.IdList): list of ontologies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_ids`` is ``null``", 
               "sphinx_param_doc": "        :param ontology_ids: list of ontologies\n        :type ontology_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "ontology_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_ontology_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_search_order\n                (osid.ontology.OntologySearchOrder): ontology search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``ontology_search_order`` is ``null``\n        raise:  Unsupported - ``ontology_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param ontology_search_order: ontology search order\n        :type ontology_search_order: ``osid.ontology.OntologySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``ontology_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.ontology.OntologySearchOrder", 
                     "var_name": "ontology_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.ontology.OntologySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_search_record", 
               "doc": {
                  "headline": "Gets the ontology search record corresponding to the given ontology search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    ontology_search_record_type (osid.type.Type): an\n                ontology search record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologySearchRecord) - the\n                ontology search record", 
               "error_doc": "        raise:  NullArgument - ``ontology_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(ontology_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param ontology_search_record_type: an ontology search record type\n        :type ontology_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology search record\n        :rtype: ``osid.ontology.records.OntologySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologySearchRecord", 
         "shortname": "OntologySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologySearchResults", 
         "shortname": "OntologySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_ontologies", 
            "get_ontology_query_inspector", 
            "get_ontology_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_ontologies", 
               "doc": {
                  "headline": "Gets the ontology list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyList) - the ontology list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology list\n        :rtype: ``osid.ontology.OntologyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_ontology_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyQueryInspector) - the ontology\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology query inspector\n        :rtype: ``osid.ontology.OntologyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ontology_search_results_record", 
               "doc": {
                  "headline": "Gets the ontology search results record corresponding to the given calndar search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    ontology_search_record_type (osid.type.Type): an\n                ontology search record type\n", 
               "return_doc": "        return: (osid.ontology.records.OntologySearchResultsRecord) -\n                the ontology search results record", 
               "error_doc": "        raise:  NullArgument - ``ontology_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(ontology_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param ontology_search_record_type: an ontology search record type\n        :type ontology_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the ontology search results record\n        :rtype: ``osid.ontology.records.OntologySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``ontology_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(ontology_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "ontology_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.ontology.records.OntologySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.records.OntologySearchResultsRecord", 
         "shortname": "OntologySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``OntologySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.ontology.OntologyReceiver", 
         "shortname": "OntologyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The vault receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Ontology`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_ontology", 
            "new_ancestor_ontology", 
            "new_descendant_ontology", 
            "changed_ontology", 
            "deleted_ontology", 
            "deleted_ancestor_ontology", 
            "deleted_descendant_ontology"
         ], 
         "methods": [
            {
               "name": "new_ontology", 
               "doc": {
                  "headline": "The callback for notifications of new ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the new\n                ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the new ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_ontology", 
               "doc": {
                  "headline": "The callback for notifications of new ontology ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    ancestor_id (osid.id.Id):\n                ``has_record_type(ontology_record_type) is false``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param ancestor_id: ``has_record_type(ontology_record_type) is false``\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_ontology", 
               "doc": {
                  "headline": "The callback for notifications of new ontology descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Ontology`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Ontology`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_ontology", 
               "doc": {
                  "headline": "The callback for notification of updated ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the updated\n                ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the updated ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ontology", 
               "doc": {
                  "headline": "The callback for notification of deleted ontologies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the deleted\n                ``Ontology``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the deleted ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_ontology", 
               "doc": {
                  "headline": "The callback for notifications of deleted ontology ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Ontology`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Ontology`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_ontology", 
               "doc": {
                  "headline": "The callback for notifications of deleted ontology descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ontology_id (osid.id.Id): the ``Id`` of the ``Ontology``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Ontology`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param ontology_id: the ``Id`` of the ``Ontology``\n        :type ontology_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Ontology`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ontology_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyList", 
         "shortname": "OntologyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``OntologyList`` provides a means for accessing ``Ontology`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ol.hasNext()) { Ontology ontology =\n    ol.getNextOntology(); }\n\n    or\n      while (ol.hasNext()) {\n           Ontology[] ontologies = ol.getNextOntologies(ol.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_ontology", 
            "get_next_ontologies"
         ], 
         "methods": [
            {
               "name": "get_next_ontology", 
               "doc": {
                  "headline": "Gets the next ``Ontology`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the next ``Ontology`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Ontology`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Ontology`` in this list. The ``has_next()`` method should be used to test that a next ``Ontology`` is available before calling this method.\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_ontologies", 
               "doc": {
                  "headline": "Gets the next set of ``Ontology`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Ontology`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.ontology.Ontology) - an array of ``Ontology``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Ontology`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Ontology`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyNode", 
         "shortname": "OntologyNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``OntologyHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_ontology", 
            "get_parent_ontology_nodes", 
            "get_child_ontology_nodes"
         ], 
         "methods": [
            {
               "name": "get_ontology", 
               "doc": {
                  "headline": "Gets the ``Ontology`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.Ontology) - the ontology represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ontology represented by this node\n        :rtype: ``osid.ontology.Ontology``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.Ontology", 
               "errors": {}
            }, 
            {
               "name": "get_parent_ontology_nodes", 
               "doc": {
                  "headline": "Gets the parents of this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.ontology.OntologyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_ontology_nodes", 
               "doc": {
                  "headline": "Gets the children of this ontology.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyNodeList) - the children of this\n                ontology", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this ontology\n        :rtype: ``osid.ontology.OntologyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.ontology.OntologyNodeList", 
         "shortname": "OntologyNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``OntologyNodeList`` provides a means for accessing ``OntologyNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (onl.hasNext()) { OntologyNode node =\n    onl.getNextOntologyNode(); }\n\n    or\n      while (onl.hasNext()) {\n           OntologyNode[] nodes = onl.getNextOntologyNodes(onl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_ontology_node", 
            "get_next_ontology_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_ontology_node", 
               "doc": {
                  "headline": "Gets the next ``OntologyNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.ontology.OntologyNode) - the next ``OntologyNode``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``OntologyNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``OntologyNode`` in this list. The ``has_next()`` method should be used to test that a next ``OntologyNode`` is available before calling this method.\n        :rtype: ``osid.ontology.OntologyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.ontology.OntologyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_ontology_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``OntologyNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``OntologyNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.ontology.OntologyNode) - an array of\n                ``OntologyNode`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``OntologyNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``OntologyNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.ontology.OntologyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.ontology.OntologyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.ontology"
}
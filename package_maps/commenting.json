{
   "name": "commenting", 
   "version": "3.0.0", 
   "title": "Commenting Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Commenting OSID provides a means of relating user comments and\nratings to OSID Objects.\n\nThe Commenting OSID may be used as an auxiliary service orchestrated\nwith other OSIDs to either provide administrative comments as well as\ncreate a social network-esque comment and rating service to various\n``OsidObjects``.\n\nComments\n\n``Comments`` contain text entries logged by date and ``Agent``. A\n``Comment`` may also include a rating represented by a ``Grade`` defined\nin a ``GradeSystem``. The ``RatingLookupSession`` may be used to query\ncumulative scores across an object reference or the entire ``Book``.\n\n``Comments`` are ``OsidRelationships`` between a commentor and a\nreference Id. The relationship defines dates for which the comment\nand/or rating is effective.\n\nCommentors\n\nAn ``Agent`` comments on something. As a person is represented by a\n``Resource`` in the Resource OSID, the Comments provide access to both\nthe commenting ``Agent`` and the related ``Resource`` to avoid the need\nof an additional service orchestration for resolving the ``Agent``.\n\nCataloging\n\n``Comments`` are cataloged in ``Books`` which may also be grouped\nhierarchically to federate multiple collections of comments.\n\nSub Packages\n\nThe Commenting OSID includes a Commenting Batch OSID for managing\n``Comments`` and ``Books`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.commenting.CommentingProfile", 
         "shortname": "CommentingProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The commenting profile describes the interoperability among commenting services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_comment_lookup", 
            "supports_rating_lookup", 
            "supports_comment_query", 
            "supports_comment_search", 
            "supports_comment_admin", 
            "supports_comment_notification", 
            "supports_comment_book", 
            "supports_comment_book_assignment", 
            "supports_comment_smart_book", 
            "supports_book_lookup", 
            "supports_book_query", 
            "supports_book_search", 
            "supports_book_admin", 
            "supports_book_notification", 
            "supports_book_hierarchy", 
            "supports_book_hierarchy_design", 
            "supports_commenting_batch", 
            "get_comment_record_types", 
            "supports_comment_record_type", 
            "get_comment_search_record_types", 
            "supports_comment_search_record_type", 
            "get_book_record_types", 
            "supports_book_record_type", 
            "get_book_search_record_types", 
            "supports_book_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any book federation is exposed.", 
                  "body": "        Federation is exposed when a specific book may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of books appears as a\n        single book."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supproted,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supproted, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_lookup", 
               "doc": {
                  "headline": "Tests for the availability of a comment lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rating_lookup", 
               "doc": {
                  "headline": "Tests for the availability of a rating lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rating lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rating lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_query", 
               "doc": {
                  "headline": "Tests if querying comments is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_search", 
               "doc": {
                  "headline": "Tests if searching for comments is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_admin", 
               "doc": {
                  "headline": "Tests if managing comments is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment admin is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment admin is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_notification", 
               "doc": {
                  "headline": "Tests if comment notification is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment notification is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_book", 
               "doc": {
                  "headline": "Tests if a comment to book lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment book lookup session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment book lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_book_assignment", 
               "doc": {
                  "headline": "Tests if a comment to book assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment book assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment book assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_smart_book", 
               "doc": {
                  "headline": "Tests if a comment smart booking session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if comment smart booking is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if comment smart booking is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_lookup", 
               "doc": {
                  "headline": "Tests for the availability of an book lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_query", 
               "doc": {
                  "headline": "Tests if querying books is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_search", 
               "doc": {
                  "headline": "Tests if searching for books is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_admin", 
               "doc": {
                  "headline": "Tests for the availability of a book administrative service for creating and deleting books.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book administration is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book administration is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_notification", 
               "doc": {
                  "headline": "Tests for the availability of a book notification service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a book hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_book_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a book hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if book hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if book hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_commenting_batch", 
               "doc": {
                  "headline": "Tests for the availability of a commenting batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if commenting batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if commenting batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_comment_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Comment`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                comment record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported comment record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Comment`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): a ``Type``\n                indicating a ``Comment`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param comment_record_type: a ``Type`` indicating a ``Comment`` record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_record_types", 
               "doc": {
                  "headline": "Gets the supported comment search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                comment search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported comment search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_search_record_type", 
               "doc": {
                  "headline": "Tests if the given comment search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_search_record_type (osid.type.Type): a ``Type``\n                indicating a comment record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``comment_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param comment_search_record_type: a ``Type`` indicating a comment record type\n        :type comment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Book`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                book record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported book record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_book_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Book`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Book`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param book_record_type: a ``Type`` indicating a ``Book`` record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_search_record_types", 
               "doc": {
                  "headline": "Gets the supported book search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                book search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported book search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_book_search_record_type", 
               "doc": {
                  "headline": "Tests if the given book search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_search_record_type (osid.type.Type): a ``Type``\n                indicating a book record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``book_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param book_search_record_type: a ``Type`` indicating a book record type\n        :type book_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentingManager", 
         "shortname": "CommentingManager", 
         "category": "managers", 
         "doc": {
            "headline": "The commenting manager provides access to commenting sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``CommentLookupSession:`` a session to lookup comments\n      * ``RatingLookupSession:`` a session to lookup comments\n      * ``CommentQuerySession:`` a session to query comments\n      * ``CommentSearchSession:`` a session to search comments\n      * ``CommentAdminSession:`` a session to manage comments\n      * ``CommentNotificationSession:`` a session to subscribe to\n        notifications of comment changes\n      * ``CommentBookSession:`` a session for looking up comment and\n        book mappings\n      * ``CommentBookAssignmentSession:`` a session for managing comment\n        and book mappings\n      * ``CommentSmartBookSession:`` a session to manage dynamic comment\n        books\n      * ``BookLookupSession:`` a session to retrieve books\n      * ``BookQuerySession:`` a session to query books\n      * ``BookSearchSession:`` a session to search for books\n      * ``BookAdminSession:`` a session to create, update and delete\n        books\n      * ``BookNotificationSession:`` a session to receive notifications\n        for changes in books\n      * ``BookHierarchyTraversalSession:`` a session to traverse\n        hierarchies of books\n      * ``BookHierarchyDesignSession:`` a session to manage hierarchies\n        of books\n\n    \n    The commenting manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.commenting.CommentingProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "CommentingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "commenting"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "commenting", 
               "name": "CommentingProfile"
            }
         ], 
         "method_names": [
            "get_comment_lookup_session", 
            "get_comment_lookup_session_for_book", 
            "get_rating_lookup_session", 
            "get_rating_lookup_session_for_book", 
            "get_comment_query_session", 
            "get_comment_query_session_for_book", 
            "get_comment_search_session", 
            "get_comment_search_session_for_book", 
            "get_comment_admin_session", 
            "get_comment_admin_session_for_book", 
            "get_comment_notification_session", 
            "get_comment_notification_session_for_book", 
            "get_comment_book_session", 
            "get_comment_book_assignment_session", 
            "get_comment_smart_book_session", 
            "get_book_lookup_session", 
            "get_book_query_session", 
            "get_book_search_session", 
            "get_book_admin_session", 
            "get_book_notification_session", 
            "get_book_hierarchy_session", 
            "get_book_hierarchy_design_session", 
            "get_commenting_batch_manager"
         ], 
         "methods": [
            {
               "name": "get_comment_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentLookupSession) - a\n                ``CommentLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentLookupSession``\n        :rtype: ``osid.commenting.CommentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_lookup_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment lookup service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentLookupSession) - a\n                ``CommentLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentLookupSession``\n        :rtype: ``osid.commenting.CommentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rating lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.RatingLookupSession) - a\n                ``RatingLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rating_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RatingLookupSession``\n        :rtype: ``osid.commenting.RatingLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rating_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.RatingLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating_lookup_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rating lookup service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.RatingLookupSession) - a\n                ``RatingLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rating_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RatingLookupSession``\n        :rtype: ``osid.commenting.RatingLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rating_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.RatingLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQuerySession) - a\n                ``CommentQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentQuerySession``\n        :rtype: ``osid.commenting.CommentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment query service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentQuerySession) - a\n                ``CommentQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentQuerySession``\n        :rtype: ``osid.commenting.CommentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentSearchSession) - a\n                ``CommentSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentSearchSession``\n        :rtype: ``osid.commenting.CommentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment search service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentSearchSession) - a\n                ``CommentSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentSearchSession``\n        :rtype: ``osid.commenting.CommentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentAdminSession) - a\n                ``CommentAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentAdminSession``\n        :rtype: ``osid.commenting.CommentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_admin_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment administration service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentAdminSession) - a\n                ``CommentAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentAdminSession``\n        :rtype: ``osid.commenting.CommentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_receiver (osid.commenting.CommentReceiver): the\n                receiver\n", 
               "return_doc": "        return: (osid.commenting.CommentNotificationSession) - a\n                ``CommentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``comment_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param comment_receiver: the receiver\n        :type comment_receiver: ``osid.commenting.CommentReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``CommentNotificationSession``\n        :rtype: ``osid.commenting.CommentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentReceiver", 
                     "var_name": "comment_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentReceiver"
               ], 
               "return_type": "osid.commenting.CommentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_notification_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment notification service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_receiver (osid.commenting.CommentReceiver): the\n                receiver\n        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentNotificationSession) - a\n                ``CommentNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``comment_receiver`` or ``book_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param comment_receiver: the receiver\n        :type comment_receiver: ``osid.commenting.CommentReceiver``\n        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentNotificationSession``\n        :rtype: ``osid.commenting.CommentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``comment_receiver`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentReceiver", 
                     "var_name": "comment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_book_session", 
               "doc": {
                  "headline": "Gets the session for retrieving comment to book mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentBookSession) - a\n                ``CommentBookSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentBookSession``\n        :rtype: ``osid.commenting.CommentBookSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_book()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_book()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentBookSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_book_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning comment to book mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentBookAssignmentSession) - a\n                ``CommentBookAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentBookAssignmentSession``\n        :rtype: ``osid.commenting.CommentBookAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_book_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_book_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentBookAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_smart_book_session", 
               "doc": {
                  "headline": "Gets the session associated with the comment smart book for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the book\n", 
               "return_doc": "        return: (osid.commenting.CommentSmartBookSession) - a\n                ``CommentSmartBookSession``", 
               "error_doc": "        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_smart_book()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CommentSmartBookSession``\n        :rtype: ``osid.commenting.CommentSmartBookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_smart_book()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_smart_book()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentSmartBookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookLookupSession) - a\n                ``BookLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookLookupSession``\n        :rtype: ``osid.commenting.BookLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQuerySession) - a\n                ``BookQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookQuerySession``\n        :rtype: ``osid.commenting.BookQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookSearchSession) - a\n                ``BookSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookSearchSession``\n        :rtype: ``osid.commenting.BookSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookAdminSession) - a\n                ``BookAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookAdminSession``\n        :rtype: ``osid.commenting.BookAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_receiver (osid.commenting.BookReceiver): the\n                receiver\n", 
               "return_doc": "        return: (osid.commenting.BookNotificationSession) - a\n                ``BookNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``book_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_receiver: the receiver\n        :type book_receiver: ``osid.commenting.BookReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``BookNotificationSession``\n        :rtype: ``osid.commenting.BookNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookReceiver", 
                     "var_name": "book_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookReceiver"
               ], 
               "return_type": "osid.commenting.BookNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookHierarchySession) - a\n                ``BookHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookHierarchySession``\n        :rtype: ``osid.commenting.BookHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookHierarchyDesignSession) - a\n                ``BookHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BookHierarchyDesignSession``\n        :rtype: ``osid.commenting.BookHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_commenting_batch_manager", 
               "doc": {
                  "headline": "Gets a ``CommentingBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.batch.CommentingBatchManager) - a\n                ``CommentingBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_commenting_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentingBatchManager``\n        :rtype: ``osid.commenting.batch.CommentingBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_commenting_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commenting_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.batch.CommentingBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentingProxyManager", 
         "shortname": "CommentingProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The commenting manager provides access to commenting sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager accept a ``Proxy`` for passing information\n    from a server environment. The sessions included in this manager\n    are:\n\n      * ``CommentLookupSession:`` a session to lookup comments\n      * ``RatingLookupSession:`` a session to lookup comments\n      * ``CommentQuerySession:`` a session to query comments\n      * ``CommentSearchSession:`` a session to search comments\n      * ``CommentAdminSession:`` a session to manage comments\n      * ``CommentNotificationSession:`` a session to subscribe to\n        notifications of comment changes\n      * ``CommentBookSession:`` a session for looking up comment and\n        book mappings\n      * ``CommentBookAssignmentSession:`` a session for managing comment\n        and book mappings\n      * ``CommentSmartBookSession:`` a session to manage dynamic comment\n        books\n      * ``BookLookupSession:`` a session to retrieve books\n      * ``BookQuerySession:`` a session to query books\n      * ``BookSearchSession:`` a session to search for books\n      * ``BookAdminSession:`` a session to create, update and delete\n        books\n      * ``BookNotificationSession:`` a session to receive notifications\n        for changes in books\n      * ``BookHierarchyTraversalSession:`` a session to traverse\n        hierarchies of books\n      * ``BookHierarchyDesignSession:`` a session to manage hierarchies\n        of books\n\n    \n    The commenting manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.commenting.CommentingProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "CommentingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "commenting"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "commenting", 
               "name": "CommentingProfile"
            }
         ], 
         "method_names": [
            "get_comment_lookup_session", 
            "get_comment_lookup_session_for_book", 
            "get_rating_lookup_session", 
            "get_rating_lookup_session_for_book", 
            "get_comment_query_session", 
            "get_comment_query_session_for_book", 
            "get_comment_search_session", 
            "get_comment_search_session_for_book", 
            "get_comment_admin_session", 
            "get_comment_admin_session_for_book", 
            "get_comment_notification_session", 
            "get_comment_notification_session_for_book", 
            "get_comment_book_session", 
            "get_comment_book_assignment_session", 
            "get_comment_smart_book_session", 
            "get_book_lookup_session", 
            "get_book_query_session", 
            "get_book_search_session", 
            "get_book_admin_session", 
            "get_book_notification_session", 
            "get_book_hierarchy_session", 
            "get_book_hierarchy_design_session", 
            "get_commenting_batch_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_comment_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentLookupSession) - a\n                ``CommentLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentLookupSession``\n        :rtype: ``osid.commenting.CommentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_lookup_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment lookup service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentLookupSession) - a\n                ``CommentLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentLookupSession``\n        :rtype: ``osid.commenting.CommentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rating lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.RatingLookupSession) - a\n                ``RatingLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rating_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RatingLookupSession``\n        :rtype: ``osid.commenting.RatingLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rating_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.RatingLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating_lookup_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rating lookup service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.RatingLookupSession) - a\n                ``RatingLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Book`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rating_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RatingLookupSession``\n        :rtype: ``osid.commenting.RatingLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Book`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rating_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.RatingLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentQuerySession) - a\n                ``CommentQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentQuerySession``\n        :rtype: ``osid.commenting.CommentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment query service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentQuerySession) - a\n                ``CommentQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Comment`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentQuerySession``\n        :rtype: ``osid.commenting.CommentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Comment`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentSearchSession) - a\n                ``CommentSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentSearchSession``\n        :rtype: ``osid.commenting.CommentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment search service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentSearchSession) - a\n                ``CommentSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Comment`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentSearchSession``\n        :rtype: ``osid.commenting.CommentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Comment`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentAdminSession) - a\n                ``CommentAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentAdminSession``\n        :rtype: ``osid.commenting.CommentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_admin_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment administration service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentAdminSession) - a\n                ``CommentAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Comment`` found by the given ``Id``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentAdminSession``\n        :rtype: ``osid.commenting.CommentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Comment`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_receiver (osid.commenting.CommentReceiver): the\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentNotificationSession) - a\n                ``CommentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``comment_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param comment_receiver: the receiver\n        :type comment_receiver: ``osid.commenting.CommentReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentNotificationSession``\n        :rtype: ``osid.commenting.CommentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentReceiver", 
                     "var_name": "comment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_notification_session_for_book", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the comment notification service for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_receiver (osid.commenting.CommentReceiver): the\n                receiver\n        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentNotificationSession) - a\n                ``CommentNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Comment`` found by the given ``Id``\n        raise:  NullArgument - ``comment_receiver, book_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param comment_receiver: the receiver\n        :type comment_receiver: ``osid.commenting.CommentReceiver``\n        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentNotificationSession``\n        :rtype: ``osid.commenting.CommentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Comment`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``comment_receiver, book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentReceiver", 
                     "var_name": "comment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_book_session", 
               "doc": {
                  "headline": "Gets the session for retrieving comment to book mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentBookSession) - a\n                ``CommentBookSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentBookSession``\n        :rtype: ``osid.commenting.CommentBookSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_book()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_book()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentBookSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_book_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning comment to book mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentBookAssignmentSession) - a\n                ``CommentBookAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_book_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CommentBookAssignmentSession``\n        :rtype: ``osid.commenting.CommentBookAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_book_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_book_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentBookAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_smart_book_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic comment books for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.CommentSmartBookSession) - ``book_id``\n                not found", 
               "error_doc": "        raise:  NotFound - ``book_id`` or ``proxy`` is ``null``\n        raise:  NullArgument - ``book_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_comment_smart_book()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``book_id`` not found\n        :rtype: ``osid.commenting.CommentSmartBookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``NullArgument`` -- ``book_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_comment_smart_book()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_smart_book()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.CommentSmartBookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookLookupSession) - a\n                ``BookLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookLookupSession``\n        :rtype: ``osid.commenting.BookLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookQuerySession) - a\n                ``BookQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_queryh()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookQuerySession``\n        :rtype: ``osid.commenting.BookQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_queryh()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookSearchSession) - a\n                ``BookSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookSearchSession``\n        :rtype: ``osid.commenting.BookSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookAdminSession) - a\n                ``BookAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookAdminSession``\n        :rtype: ``osid.commenting.BookAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_receiver (osid.commenting.BookReceiver): the\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookNotificationSession) - a\n                ``BookNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``book_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_receiver: the receiver\n        :type book_receiver: ``osid.commenting.BookReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookNotificationSession``\n        :rtype: ``osid.commenting.BookNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookReceiver", 
                     "var_name": "book_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookHierarchySession) - a\n                ``BookHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookHierarchySession``\n        :rtype: ``osid.commenting.BookHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the book hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.commenting.BookHierarchyDesignSession) - a\n                ``BookHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_book_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BookHierarchyDesignSession``\n        :rtype: ``osid.commenting.BookHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_book_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.commenting.BookHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_commenting_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``CommentingBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.batch.CommentingBatchProxyManager) - a\n                ``CommentingBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_commenting_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CommentingBatchProxyManager``\n        :rtype: ``osid.commenting.batch.CommentingBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_commenting_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commenting_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.batch.CommentingBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentLookupSession", 
         "shortname": "CommentLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving comments.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_lookup_comments", 
            "use_comparative_comment_view", 
            "use_plenary_comment_view", 
            "use_federated_book_view", 
            "use_isolated_book_view", 
            "use_effective_comment_view", 
            "use_any_effective_comment_view", 
            "get_comment", 
            "get_comments_by_ids", 
            "get_comments_by_genus_type", 
            "get_comments_by_parent_genus_type", 
            "get_comments_by_record_type", 
            "get_comments_on_date", 
            "get_comments_by_genus_type_on_date", 
            "get_comments_for_commentor", 
            "get_comments_for_commentor_on_date", 
            "get_comments_by_genus_type_for_commentor", 
            "get_comments_by_genus_type_for_commentor_on_date", 
            "get_comments_for_reference", 
            "get_comments_for_reference_on_date", 
            "get_comments_by_genus_type_for_reference", 
            "get_comments_by_genus_type_for_reference_on_date", 
            "get_comments_for_commentor_and_reference", 
            "get_comments_for_commentor_and_reference_on_date", 
            "get_comments_by_genus_type_for_commentor_and_reference", 
            "get_comments_by_genus_type_for_commentor_and_reference_on_date", 
            "get_comments"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_comments", 
               "doc": {
                  "headline": "Tests if this user can examine this book.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer these\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if book reading methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if book reading methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_comment_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_comment_view", 
               "doc": {
                  "headline": "A complete view of the ``Comment`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_book_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include comments in books which are\n        children of this book in the book hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_book_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this book only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_comment_view", 
               "doc": {
                  "headline": "Only comments whose effective dates are current are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_comment_view", 
               "doc": {
                  "headline": "All comments of any effective dates are returned by all methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_comment", 
               "doc": {
                  "headline": "Gets the ``Comment`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n                to retrieve\n", 
               "return_doc": "        return: (osid.commenting.Comment) - the returned ``Comment``", 
               "error_doc": "        raise:  NotFound - no ``Comment`` found with the given ``Id``\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment`` to retrieve\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment``\n        :rtype: ``osid.commenting.Comment``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Comment`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.Comment", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_ids", 
               "doc": {
                  "headline": "Gets a ``CommentList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment\n                list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``comment_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_ids: the list of ``Ids`` to retrieve\n        :type comment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment list``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``comment_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "comment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``CommentList`` corresponding to the given comment genus ``Type`` which does not include comments of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_genus_type (osid.type.Type): a comment genus\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment``\n                list", 
               "error_doc": "        raise:  NullArgument - ``comment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_genus_type: a comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment`` list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``CommentList`` corresponding to the given comment genus ``Type`` and include any additional comments with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_genus_type (osid.type.Type): a comment genus\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment``\n                list", 
               "error_doc": "        raise:  NullArgument - ``comment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_genus_type: a comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment`` list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_record_type", 
               "doc": {
                  "headline": "Gets a ``CommentList`` containing the given comment record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): a comment record\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment``\n                list", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_record_type: a comment record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment`` list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_on_date", 
               "doc": {
                  "headline": "Gets a ``CommentList`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment`` list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_on_date", 
               "doc": {
                  "headline": "Gets a ``CommentList`` of a given genus type and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_genus_type (osid.type.Type): a comment genus\n                type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned ``Comment``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``comment_genus_type, from,`` or ``to``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_genus_type: a comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Comment`` list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``comment_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_commentor", 
               "doc": {
                  "headline": "Gets a list of comments corresponding to a resource ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_commentor_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments corresponding to a resource ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``resource_id, from,`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``resource_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_commentor", 
               "doc": {
                  "headline": "Gets a list of comments of the given genus type corresponding to a resource ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``comment_genus_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``comment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_commentor_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments of the given genus type corresponding to a resource ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``resource_id, comment_genus_type,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``resource_id, comment_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_reference", 
               "doc": {
                  "headline": "Gets a list of comments corresponding to a reference ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_reference_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments corresponding to a reference ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): a reference ``Id``\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``reference_id, from,`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: a reference ``Id``\n        :type reference_id: ``osid.id.Id``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``reference_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_reference", 
               "doc": {
                  "headline": "Gets a list of comments of the given genus type corresponding to a reference ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``reference_id`` or\n                ``comment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference\n        :type reference_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id`` or ``comment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_reference_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments of the given genus type corresponding to a reference ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): a reference ``Id``\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``reference_id, comment_genus_type,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: a reference ``Id``\n        :type reference_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``reference_id, comment_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_commentor_and_reference", 
               "doc": {
                  "headline": "Gets a list of comments corresponding to a resource and reference ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``reference_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param reference_id: the ``Id`` of the reference\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_for_commentor_and_reference_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments corresponding to a resource and reference ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    reference_id (osid.id.Id): a reference ``Id``\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``resource_id, reference_id, from,`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param reference_id: a reference ``Id``\n        :type reference_id: ``osid.id.Id``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``resource_id, reference_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_commentor_and_reference", 
               "doc": {
                  "headline": "Gets a list of comments of the given genus type corresponding to a resource and reference ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``resource_id, reference_id`` or\n                ``comment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param reference_id: the ``Id`` of the reference\n        :type reference_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id, reference_id`` or ``comment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_genus_type_for_commentor_and_reference_on_date", 
               "doc": {
                  "headline": "Gets a list of all comments corresponding to a resource and reference ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n        arg:    reference_id (osid.id.Id): a reference ``Id``\n        arg:    comment_genus_type (osid.type.Type): the comment genus\n                type\n        arg:    from (osid.calendaring.DateTime): from date\n        arg:    to (osid.calendaring.DateTime): to date\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  InvalidArgument - ``to`` is less than ``from``\n        raise:  NullArgument - ``resource_id, reference_id,\n                comment_genus_type, from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n        :param reference_id: a reference ``Id``\n        :type reference_id: ``osid.id.Id``\n        :param comment_genus_type: the comment genus type\n        :type comment_genus_type: ``osid.type.Type``\n        :param from: from date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: to date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``to`` is less than ``from``\n        :raise: ``NullArgument`` -- ``resource_id, reference_id, comment_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments", 
               "doc": {
                  "headline": "Gets all comments.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentList) - a list of comments", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of comments\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.RatingLookupSession", 
         "shortname": "RatingLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving comments.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_lookup_ratings", 
            "use_comparative_comment_view", 
            "use_plenary_comment_view", 
            "use_federated_book_view", 
            "use_isolated_book_view", 
            "get_cumulative_rating", 
            "get_cumulative_rating_for_reference", 
            "get_cumulative_rating_for_commentor", 
            "get_top_references", 
            "get_references"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_ratings", 
               "doc": {
                  "headline": "Tests if this user can examine this book.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer these\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if book reading methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if book reading methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_comment_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_comment_view", 
               "doc": {
                  "headline": "A complete view of the ``Comment`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_book_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include ratings in books which are\n        children of this book in the book hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_book_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this book only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_cumulative_rating", 
               "doc": {
                  "headline": "Gets the cumulative rating for all the references in this book.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the cumulative rating", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the cumulative rating\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_cumulative_rating_for_reference", 
               "doc": {
                  "headline": "Gets the cumulative rating for a reference.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n", 
               "return_doc": "        return: (osid.grading.Grade) - the cumulative rating", 
               "error_doc": "        raise:  NotFound - no reference found with the given ``Id``\n        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the cumulative rating\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no reference found with the given ``Id``\n        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_cumulative_rating_for_commentor", 
               "doc": {
                  "headline": "Gets the cumulative rating for a commentor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource\n", 
               "return_doc": "        return: (osid.grading.Grade) - the cumulative rating", 
               "error_doc": "        raise:  NotFound - no resource found with the given ``Id``\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the cumulative rating\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no resource found with the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_top_references", 
               "doc": {
                  "headline": "Gets the top rated references in this book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    max (cardinal): the maximum number to return\n", 
               "return_doc": "        return: (osid.id.IdList) - the top references", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param max: the maximum number to return\n        :type max: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the top references\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "max", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_references", 
               "doc": {
                  "headline": "Gets the references with ratings equal to or higher than the given grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the ``Id`` of the grade\n", 
               "return_doc": "        return: (osid.grading.Grade) - the cumulative rating", 
               "error_doc": "        raise:  NotFound - no reference found with the given ``Id``\n        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_id: the ``Id`` of the grade\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the cumulative rating\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no reference found with the given ``Id``\n        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentQuerySession", 
         "shortname": "CommentQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Comment`` objects.", 
            "body": "    The search query is constructed using the ``CommentQuery``. The book\n    record ``Type`` also specifies the record for the book query.\n\n    Comments may have a query record indicated by their respective\n    record types. The query record is accessed via the ``CommentQuery``.\n    The returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_search_comments", 
            "use_federated_book_view", 
            "use_isolated_book_view", 
            "get_comment_query", 
            "get_comments_by_query"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_comments", 
               "doc": {
                  "headline": "Tests if this user can perform comment searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not wish to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_book_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include comments in books which are\n        children of this book in the book hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_book_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this book only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_comment_query", 
               "doc": {
                  "headline": "Gets a comment query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQuery) - the comment query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment query\n        :rtype: ``osid.commenting.CommentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_comments_by_query", 
               "doc": {
                  "headline": "Gets a list of comments matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_query (osid.commenting.CommentQuery): the search\n                query array\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - the returned\n                ``CommentList``", 
               "error_doc": "        raise:  NullArgument - ``comment_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``comment_query`` is not of this service", 
               "sphinx_param_doc": "        :param comment_query: the search query array\n        :type comment_query: ``osid.commenting.CommentQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``CommentList``\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``comment_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentQuery", 
                     "var_name": "comment_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentQuery"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentSearchSession", 
         "shortname": "CommentSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Comment`` objects.", 
            "body": "    The search query is constructed using the ``CommentQuery``. The\n    comment record ``Type`` also specifies the record for the comment\n    query.\n\n    ``get_comments_by_query()`` is the basic search method and returns a\n    list of ``Comment`` elements. A more advanced search may be\n    performed with ``getCommentsBySearch()``. It accepts a\n    ``CommentSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_comments_by_search()`` returns a\n    ``CommentSearchResults`` that can be used to access the resulting\n    ``CommentList`` or be used to perform a search within the result set\n    through ``CommentSearch``.\n    \n    Comments may have a query record indicated by their respective\n    record types. The query record is accessed via the ``CommentQuery``.\n    The returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.commenting.CommentQuerySession"
         ], 
         "inherit_shortnames": [
            "CommentQuerySession"
         ], 
         "inherit_pkg_names": [
            "commenting"
         ], 
         "inheritance": [
            {
               "pkg_name": "commenting", 
               "name": "CommentQuerySession"
            }
         ], 
         "method_names": [
            "get_comment_search", 
            "get_comment_search_order", 
            "get_comments_by_search", 
            "get_comment_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_comment_search", 
               "doc": {
                  "headline": "Gets a comment search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentSearch) - the comment search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment search\n        :rtype: ``osid.commenting.CommentSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentSearch", 
               "errors": {}
            }, 
            {
               "name": "get_comment_search_order", 
               "doc": {
                  "headline": "Gets a comment search order.", 
                  "body": "        The ``CommentSearchOrder`` is supplied to a ``CommentSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentSearchOrder) - the comment\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment search order\n        :rtype: ``osid.commenting.CommentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_comments_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_query (osid.commenting.CommentQuery): the\n                comment query\n        arg:    comment_search (osid.commenting.CommentSearch): the\n                comment search\n", 
               "return_doc": "        return: (osid.commenting.CommentSearchResults) - the search\n                results", 
               "error_doc": "        raise:  NullArgument - ``comment_query`` or ``comment_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``comment_query`` or ``comment_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param comment_query: the comment query\n        :type comment_query: ``osid.commenting.CommentQuery``\n        :param comment_search: the comment search\n        :type comment_search: ``osid.commenting.CommentSearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.commenting.CommentSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_query`` or ``comment_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``comment_query`` or ``comment_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentQuery", 
                     "var_name": "comment_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.commenting.CommentSearch", 
                     "var_name": "comment_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentQuery", 
                  "osid.commenting.CommentSearch"
               ], 
               "return_type": "osid.commenting.CommentSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_from_inspector", 
               "doc": {
                  "headline": "Gets an entry query from an inspector.", 
                  "body": "        The inspector is available from an ``CommentSearchResults``."
               }, 
               "arg_doc": "        arg:    comment_query_inspector\n                (osid.commenting.CommentQueryInspector): a comment query\n                inspector\n", 
               "return_doc": "        return: (osid.commenting.CommentQuery) - the entry query", 
               "error_doc": "        raise:  NullArgument - ``comment_query_inspector`` is ``null``\n        raise:  Unsupported - ``comment_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param comment_query_inspector: a comment query inspector\n        :type comment_query_inspector: ``osid.commenting.CommentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the entry query\n        :rtype: ``osid.commenting.CommentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``comment_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentQueryInspector", 
                     "var_name": "comment_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentQueryInspector"
               ], 
               "return_type": "osid.commenting.CommentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentAdminSession", 
         "shortname": "CommentAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Comments``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Comment,`` a ``CommentForm`` is requested using\n    ``get_comment_form_for_create()`` specifying the desired\n    relationship peers and record ``Types`` or none if no record\n    ``Types`` are needed. The returned ``CommentForm`` will indicate\n    that it is to be used with a create operation and can be used to\n    examine metdata or validate data prior to creation. Once the\n    ``CommentForm`` is submiited to a create operation, it cannot be\n    reused with another create operation unless the first operation was\n    unsuccessful. Each ``CommentForm`` corresponds to an attempted\n    transaction.\n    \n    For updates, ``CommentForms`` are requested to the ``Comment``\n    ``Id`` that is to be updated using ``getCommentFormForUpdate()``.\n    Similarly, the ``CommentForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``CommentForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Comments``. To unmap a ``Comment``\n    from the current ``Book,`` the ``CommentBookAssignmentSession``\n    should be used. These delete operations attempt to remove the\n    ``Comment`` itself thus removing it from all known ``Book``\n    catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_create_comments", 
            "can_create_comment_with_record_types", 
            "get_comment_form_for_create", 
            "create_comment", 
            "can_update_comments", 
            "get_comment_form_for_update", 
            "update_comment", 
            "can_delete_comments", 
            "delete_comment", 
            "can_manage_comment_aliases", 
            "alias_comment"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_comments", 
               "doc": {
                  "headline": "Tests if this user can create comments.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Comment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Comment`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Comment`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_comment_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Comment`` using the desired record types.", 
                  "body": "        While ``CommentingManager.getCommentRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Comment``.\n        Providing an empty array tests if a ``Comment`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    comment_record_types (osid.type.Type[]): array of\n                comment record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Comment`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``comment_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param comment_record_types: array of comment record types\n        :type comment_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Comment`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "comment_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_form_for_create", 
               "doc": {
                  "headline": "Gets the comment form for creating new comments.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` for the reference\n                object\n        arg:    comment_record_types (osid.type.Type[]): array of\n                comment record types\n", 
               "return_doc": "        return: (osid.commenting.CommentForm) - the comment form", 
               "error_doc": "        raise:  NullArgument - ``reference_id or comment_record_types``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` for the reference object\n        :type reference_id: ``osid.id.Id``\n        :param comment_record_types: array of comment record types\n        :type comment_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the comment form\n        :rtype: ``osid.commenting.CommentForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id or comment_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "comment_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.commenting.CommentForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_comment", 
               "doc": {
                  "headline": "Creates a new ``Comment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_form (osid.commenting.CommentForm): the form for\n                this ``Comment``\n", 
               "return_doc": "        return: (osid.commenting.Comment) - the new ``Comment``", 
               "error_doc": "        raise:  IllegalState - ``comment_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``comment_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``comment_form`` did not originate from\n                ``get_comment_form_for_create()``", 
               "sphinx_param_doc": "        :param comment_form: the form for this ``Comment``\n        :type comment_form: ``osid.commenting.CommentForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Comment``\n        :rtype: ``osid.commenting.Comment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``comment_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``comment_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``comment_form`` did not originate from ``get_comment_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentForm", 
                     "var_name": "comment_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentForm"
               ], 
               "return_type": "osid.commenting.Comment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_comments", 
               "doc": {
                  "headline": "Tests if this user can update comments.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Comment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Comment`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Comment`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_comment_form_for_update", 
               "doc": {
                  "headline": "Gets the comment form for updating an existing comment.", 
                  "body": "        A new comment form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n", 
               "return_doc": "        return: (osid.commenting.CommentForm) - the comment form", 
               "error_doc": "        raise:  NotFound - ``comment_id`` is not found\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment``\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the comment form\n        :rtype: ``osid.commenting.CommentForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``comment_id`` is not found\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_comment", 
               "doc": {
                  "headline": "Updates an existing comment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_form (osid.commenting.CommentForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``comment_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``comment_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``comment_form`` did not originate from\n                ``get_comment_form_for_update()``", 
               "sphinx_param_doc": "        :param comment_form: the form containing the elements to be updated\n        :type comment_form: ``osid.commenting.CommentForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``comment_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``comment_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``comment_form`` did not originate from ``get_comment_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentForm", 
                     "var_name": "comment_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_comments", 
               "doc": {
                  "headline": "Tests if this user can delete comments.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Comment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Comment`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Comment`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_comment", 
               "doc": {
                  "headline": "Deletes a ``Comment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n                to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``comment_id`` not found\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment`` to remove\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``comment_id`` not found\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_comment_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Comnents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Comment`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Comment`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_comment", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Comment`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Comment`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another comment, it is\n        reassigned to the given comment ``Id``."
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of a ``Comment``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``comment_id`` not found\n        raise:  NullArgument - ``comment_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of a ``Comment``\n        :type comment_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``comment_id`` not found\n        :raise: ``NullArgument`` -- ``comment_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentNotificationSession", 
         "shortname": "CommentNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Comment`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_register_for_comment_notifications", 
            "use_federated_book_view", 
            "use_isolated_book_view", 
            "register_for_new_comments", 
            "register_for_new_comments_for_commentor", 
            "register_for_new_comments_for_reference", 
            "register_for_changed_comments", 
            "register_for_changed_comments_for_commentor", 
            "register_for_changed_comments_for_reference", 
            "register_for_changed_comment", 
            "register_for_deleted_comments", 
            "register_for_deleted_comments_for_commentor", 
            "register_for_deleted_comments_for_reference", 
            "register_for_deleted_comment"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_comment_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Comment`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_book_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for commentss in\n        books which are children of this book in the book hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_book_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this book only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_comments", 
               "doc": {
                  "headline": "Register for notifications of new comments.", 
                  "body": "        ``CommentReceiver.newComment()`` is invoked when a new\n        ``Comment`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_comments_for_commentor", 
               "doc": {
                  "headline": "Register for notifications of new comments by the given resource ``Id``.", 
                  "body": "        ``CommentReceiver.newComment()`` is invoked when a new\n        ``Comment`` is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_comments_for_reference", 
               "doc": {
                  "headline": "Register for notifications of new comments for the given reference ``Id``.", 
                  "body": "        ``CommentReceiver.newComment()`` is invoked when a new\n        ``Comment`` is created."
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference to monitor\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_comments", 
               "doc": {
                  "headline": "Registers for notification of updated comments.", 
                  "body": "        ``CommentReceiver.changedComment()`` is invoked when a comment\n        is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_comments_for_commentor", 
               "doc": {
                  "headline": "Register for notifications of changed comments by the given resource ``Id``.", 
                  "body": "        ``CommentReceiver.changedComment()`` is invoked when a\n        ``Comment`` by the resource is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_comments_for_reference", 
               "doc": {
                  "headline": "Register for notifications of changed comments for the given reference ``Id``.", 
                  "body": "        ``CommentReceiver.changedComment()`` is invoked when a\n        ``Comment`` for the reference is changed."
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference to monitor\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_comment", 
               "doc": {
                  "headline": "Registers for notification of an updated comment.", 
                  "body": "        ``CommentReceiver.changedComment()`` is invoked when the\n        specified comment is changed."
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a comment was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment`` to monitor\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a comment was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_comments", 
               "doc": {
                  "headline": "Registers for notification of deleted comments.", 
                  "body": "        ``CommentReceiver.deletedComment()`` is invoked when a comment\n        is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_comments_for_commentor", 
               "doc": {
                  "headline": "Register for notifications of deleted comments by the given resource ``Id``.", 
                  "body": "        ``CommentReceiver.deletedComment()`` is invoked when a\n        ``Comment`` by the resource is deleted."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_comments_for_reference", 
               "doc": {
                  "headline": "Register for notifications of deleted comments for the given reference ``Id``.", 
                  "body": "        ``CommentReceiver.deletedComment()`` is invoked when a\n        ``Comment`` for the reference is deleted."
               }, 
               "arg_doc": "        arg:    reference_id (osid.id.Id): the ``Id`` of the reference\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reference_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reference_id: the ``Id`` of the reference to monitor\n        :type reference_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reference_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_comment", 
               "doc": {
                  "headline": "Registers for notification of a deleted comment.", 
                  "body": "        ``CommentReceiver.deletedComment()`` is invoked when the\n        specified comment is deleted."
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a comment was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment`` to monitor\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a comment was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentBookSession", 
         "shortname": "CommentBookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Comment`` to ``Book`` mappings.", 
            "body": "    A ``Comment`` may appear in multiple ``Books``. Each ``Book`` may\n    have its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_comment_book_mappings", 
            "use_comparative_book_view", 
            "use_plenary_book_view", 
            "get_comment_ids_by_book", 
            "get_comments_by_book", 
            "get_comment_ids_by_books", 
            "get_comments_by_books", 
            "get_book_ids_by_comment", 
            "get_books_by_comment"
         ], 
         "methods": [
            {
               "name": "can_lookup_comment_book_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of comment/book mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intendedas a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_book_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_book_view", 
               "doc": {
                  "headline": "A complete view of the ``Comment`` and ``Book`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_comment_ids_by_book", 
               "doc": {
                  "headline": "Gets the list of Comment Ids associated with a ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): ``Id`` of a ``Book``.\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related comment ``Ids``", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: ``Id`` of a ``Book``.\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related comment ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_book", 
               "doc": {
                  "headline": "Gets the list of ``Comments`` associated with a ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): ``Id`` of a ``Book``\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - list of related comments", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: ``Id`` of a ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related comments\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comment_ids_by_books", 
               "doc": {
                  "headline": "Gets the list of ``Comment Ids`` corresponding to a list of ``Book`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_ids (osid.id.IdList): list of book ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of comment ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``book_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_ids: list of book ``Ids``\n        :type book_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of comment ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "book_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_comments_by_books", 
               "doc": {
                  "headline": "Gets the list of ``Comments`` corresponding to a list of ``Books``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_ids (osid.id.IdList): list of book ``Ids``\n", 
               "return_doc": "        return: (osid.commenting.CommentList) - list of comments", 
               "error_doc": "        raise:  NullArgument - ``book_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_ids: list of book ``Ids``\n        :type book_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of comments\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "book_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_book_ids_by_comment", 
               "doc": {
                  "headline": "Gets the list of ``Book``  ``Ids`` mapped to a ``Comment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): ``Id`` of a ``Comment``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of book ``Ids``", 
               "error_doc": "        raise:  NotFound - ``comment_id`` is not found\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: ``Id`` of a ``Comment``\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of book ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``comment_id`` is not found\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_comment", 
               "doc": {
                  "headline": "Gets the list of ``Book`` objects mapped to a ``Comment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): ``Id`` of a ``Comment``\n", 
               "return_doc": "        return: (osid.commenting.BookList) - list of books", 
               "error_doc": "        raise:  NotFound - ``comment_id`` is not found\n        raise:  NullArgument - ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: ``Id`` of a ``Comment``\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of books\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``comment_id`` is not found\n        :raise: ``NullArgument`` -- ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentBookAssignmentSession", 
         "shortname": "CommentBookAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Comments`` to ``Books``.", 
            "body": "    A ``Comment`` may map to multiple ``Books`` and removing the last\n    reference to a ``Comment`` is the equivalent of deleting it. Each\n    ``Book`` may have its own authorizations governing who is allowed to\n    operate on it.\n\n    Adding a reference of a ``Comment`` to another ``Book`` is not a\n    copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_comments", 
            "can_assign_comments_to_book", 
            "get_assignable_book_ids", 
            "get_assignable_book_ids_for_comment", 
            "assign_comment_to_book", 
            "unassign_comment_from_book"
         ], 
         "methods": [
            {
               "name": "can_assign_comments", 
               "doc": {
                  "headline": "Tests if this user can alter comment/book mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_comments_to_book", 
               "doc": {
                  "headline": "Tests if this user can alter comment/book mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_book_ids", 
               "doc": {
                  "headline": "Gets a list of books including and under the given book node in which any comment can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable book ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable book ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_book_ids_for_comment", 
               "doc": {
                  "headline": "Gets a list of books including and under the given book node in which a specific comment can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable book ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``book_id`` or ``comment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n        :param comment_id: the ``Id`` of the ``Comment``\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable book ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` or ``comment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_comment_to_book", 
               "doc": {
                  "headline": "Adds an existing ``Comment`` to a ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``comment_id`` is already assigned to\n                ``book_id``\n        raise:  NotFound - ``comment_id`` or ``book_id`` not found\n        raise:  NullArgument - ``comment_id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment``\n        :type comment_id: ``osid.id.Id``\n        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``comment_id`` is already assigned to ``book_id``\n        :raise: ``NotFound`` -- ``comment_id`` or ``book_id`` not found\n        :raise: ``NullArgument`` -- ``comment_id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_comment_from_book", 
               "doc": {
                  "headline": "Removes a ``Comment`` from a ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the ``Comment``\n        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``comment_id`` or ``book_id`` not found or\n                ``comment_id`` not assigned to ``book_id``\n        raise:  NullArgument - ``comment_id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the ``Comment``\n        :type comment_id: ``osid.id.Id``\n        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``comment_id`` or ``book_id`` not found or ``comment_id`` not assigned to ``book_id``\n        :raise: ``NullArgument`` -- ``comment_id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentSmartBookSession", 
         "shortname": "CommentSmartBookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``CommentQuery`` can be retrieved from this session and mapped to\n    this ``Book`` to create a virtual collection of ``Comments``. The\n    comments may be sequenced using the ``CommentSearchOrder`` from this\n    session.\n\n    This ``Book`` has a default query that matches any comment and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``CommentQueryInspector``. The query may be\n    modified by converting the inspector back to a ``CommentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_id", 
            "get_book", 
            "can_manage_smart_books", 
            "get_comment_query", 
            "get_comment_search_order", 
            "apply_comment_query", 
            "inspect_comment_query", 
            "apply_comment_sequencing", 
            "get_comment_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_book_id", 
               "doc": {
                  "headline": "Gets the ``Book``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Book Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the ``Book`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Book`` associated with this session\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_books", 
               "doc": {
                  "headline": "Tests if this user can manage smart books.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart book management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart book management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_comment_query", 
               "doc": {
                  "headline": "Gets a comment query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQuery) - the comment query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment query\n        :rtype: ``osid.commenting.CommentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_comment_search_order", 
               "doc": {
                  "headline": "Gets a comment search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentSearchOrder) - the comment\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment search order\n        :rtype: ``osid.commenting.CommentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_comment_query", 
               "doc": {
                  "headline": "Applies a comment query to this book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_query (osid.commenting.CommentQuery): the\n                comment query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``comment_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``comment_query`` not of this service", 
               "sphinx_param_doc": "        :param comment_query: the comment query\n        :type comment_query: ``osid.commenting.CommentQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``comment_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentQuery", 
                     "var_name": "comment_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_comment_query", 
               "doc": {
                  "headline": "Gets a comment query inspector for this book.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQueryInspector) - the comment\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment query inspector\n        :rtype: ``osid.commenting.CommentQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_comment_sequencing", 
               "doc": {
                  "headline": "Applies a comment search order to this book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_search_order\n                (osid.commenting.CommentSearchOrder): the comment search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``comment_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``comment_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param comment_search_order: the comment search order\n        :type comment_search_order: ``osid.commenting.CommentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``comment_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentSearchOrder", 
                     "var_name": "comment_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_from_inspector", 
               "doc": {
                  "headline": "Gets a comment query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_query_inspector\n                (osid.commenting.CommentQueryInspector): a query\n                inspector\n", 
               "return_doc": "        return: (osid.commenting.CommentQuery) - the comment query", 
               "error_doc": "        raise:  NullArgument - ``comment_query_inspector`` is ``null``\n        raise:  Unsupported - ``comment_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param comment_query_inspector: a query inspector\n        :type comment_query_inspector: ``osid.commenting.CommentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the comment query\n        :rtype: ``osid.commenting.CommentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``comment_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentQueryInspector", 
                     "var_name": "comment_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentQueryInspector"
               ], 
               "return_type": "osid.commenting.CommentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookLookupSession", 
         "shortname": "BookLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Book`` objects.", 
            "body": "    The ``Book`` represents a collection of comments.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_books", 
            "use_comparative_book_view", 
            "use_plenary_book_view", 
            "get_book", 
            "get_books_by_ids", 
            "get_books_by_genus_type", 
            "get_books_by_parent_genus_type", 
            "get_books_by_record_type", 
            "get_books_by_provider", 
            "get_books"
         ], 
         "methods": [
            {
               "name": "can_lookup_books", 
               "doc": {
                  "headline": "Tests if this user can perform ``Book`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_book_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_book_view", 
               "doc": {
                  "headline": "A complete view of the ``Book`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Book`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Book`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.Book) - the book", 
               "error_doc": "        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the book\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_ids", 
               "doc": {
                  "headline": "Gets a ``BookList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the books\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Books`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    book_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``Book`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``book_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_ids: the list of ``Ids`` to retrieve\n        :type book_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Book`` list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``book_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "book_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``BookList`` corresponding to the given book genus ``Type`` which does not include books of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known books or\n        an error results. Otherwise, the returned list may contain only\n        those books that are accessible through this session."
               }, 
               "arg_doc": "        arg:    book_genus_type (osid.type.Type): a book genus type\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``Book`` list", 
               "error_doc": "        raise:  NullArgument - ``book_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_genus_type: a book genus type\n        :type book_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Book`` list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``BookList`` corresponding to the given book genus ``Type`` and include any additional books with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known books or\n        an error results. Otherwise, the returned list may contain only\n        those books that are accessible through this session."
               }, 
               "arg_doc": "        arg:    book_genus_type (osid.type.Type): a book genus type\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``Book`` list", 
               "error_doc": "        raise:  NullArgument - ``book_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_genus_type: a book genus type\n        :type book_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Book`` list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_record_type", 
               "doc": {
                  "headline": "Gets a ``BookList`` containing the given book record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known books or\n        an error results. Otherwise, the returned list may contain only\n        those books that are accessible through this session."
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): a book record type\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``Book`` list", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_record_type: a book record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Book`` list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books_by_provider", 
               "doc": {
                  "headline": "Gets a ``BookList`` from the given provider ````.", 
                  "body": "        In plenary mode, the returned list contains all known books or\n        an error results. Otherwise, the returned list may contain only\n        those books that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``Book`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Book`` list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_books", 
               "doc": {
                  "headline": "Gets all ``Books``.", 
                  "body": "        In plenary mode, the returned list contains all known books or\n        an error results. Otherwise, the returned list may contain only\n        those books that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookList) - a list of ``Books``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Books``\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookQuerySession", 
         "shortname": "BookQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Book`` objects.", 
            "body": "    The search query is constructed using the ``BookQuery``. The book\n    record ``Type`` also specifies the record for the book query.\n\n    Books may have a query record indicated by their respective record\n    types. The query record is accessed via the ``BookQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_books", 
            "get_book_query", 
            "get_books_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_books", 
               "doc": {
                  "headline": "Tests if this user can perform ``Book`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_book_query", 
               "doc": {
                  "headline": "Gets a book query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQuery) - the book query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book query\n        :rtype: ``osid.commenting.BookQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQuery", 
               "errors": {}
            }, 
            {
               "name": "get_books_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Books`` matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_query (osid.commenting.BookQuery): the book query\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the returned ``BookList``", 
               "error_doc": "        raise:  NullArgument - ``book_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``book_query`` is not of this service", 
               "sphinx_param_doc": "        :param book_query: the book query\n        :type book_query: ``osid.commenting.BookQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``BookList``\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``book_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookQuery", 
                     "var_name": "book_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookQuery"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookSearchSession", 
         "shortname": "BookSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Book`` objects.", 
            "body": "    The search query is constructed using the ``BookQuery``. The book\n    record ``Type`` also specifies the record for the book query.\n\n    ``get_books_by_query()`` is the basic search method and returns a\n    list of ``Book`` elements. A more advanced search may be performed\n    with ``getBooksBySearch()``. It accepts a ``BookSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_books_by_search()`` returns a ``BookSearchResults`` that can\n    be used to access the resulting ``BookList`` or be used to perform a\n    search within the result set through ``BookSearch``.\n    \n    Books may have a query record indicated by their respective record\n    types. The query record is accessed via the ``BookQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.commenting.BookQuerySession"
         ], 
         "inherit_shortnames": [
            "BookQuerySession"
         ], 
         "inherit_pkg_names": [
            "commenting"
         ], 
         "inheritance": [
            {
               "pkg_name": "commenting", 
               "name": "BookQuerySession"
            }
         ], 
         "method_names": [
            "get_book_search", 
            "get_book_search_order", 
            "get_books_by_search", 
            "get_book_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_book_search", 
               "doc": {
                  "headline": "Gets a book search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookSearch) - the book search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book search\n        :rtype: ``osid.commenting.BookSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookSearch", 
               "errors": {}
            }, 
            {
               "name": "get_book_search_order", 
               "doc": {
                  "headline": "Gets a book search order.", 
                  "body": "        The ``BookSearchOrder`` is supplied to a ``BookSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookSearchOrder) - the book search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book search order\n        :rtype: ``osid.commenting.BookSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_books_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_query (osid.commenting.BookQuery): the book query\n        arg:    book_search (osid.commenting.BookSearch): the book\n                search\n", 
               "return_doc": "        return: (osid.commenting.BookSearchResults) - the search results", 
               "error_doc": "        raise:  NullArgument - ``book_query`` or ``book_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``book_query`` or ``book_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param book_query: the book query\n        :type book_query: ``osid.commenting.BookQuery``\n        :param book_search: the book search\n        :type book_search: ``osid.commenting.BookSearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.commenting.BookSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_query`` or ``book_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``book_query`` or ``book_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookQuery", 
                     "var_name": "book_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.commenting.BookSearch", 
                     "var_name": "book_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookQuery", 
                  "osid.commenting.BookSearch"
               ], 
               "return_type": "osid.commenting.BookSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_query_from_inspector", 
               "doc": {
                  "headline": "Gets an entry query from an inspector.", 
                  "body": "        The inspector is available from an ``BookSearchResults``."
               }, 
               "arg_doc": "        arg:    book_query_inspector\n                (osid.commenting.BookQueryInspector): a book query\n                inspector\n", 
               "return_doc": "        return: (osid.commenting.BookQuery) - the book query", 
               "error_doc": "        raise:  NullArgument - ``book_query_inspector`` is ``null``\n        raise:  Unsupported - ``book_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param book_query_inspector: a book query inspector\n        :type book_query_inspector: ``osid.commenting.BookQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the book query\n        :rtype: ``osid.commenting.BookQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``book_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookQueryInspector", 
                     "var_name": "book_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookQueryInspector"
               ], 
               "return_type": "osid.commenting.BookQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookAdminSession", 
         "shortname": "BookAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Books``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Book,`` a ``BookForm`` is requested using\n    ``get_book_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``BookForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``BookForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``BookForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``BookForms`` are requested to the ``Book``  ``Id``\n    that is to be updated using ``getBookFormForUpdate()``. Similarly,\n    the ``BookForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``BookForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Books``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_books", 
            "can_create_book_with_record_types", 
            "get_book_form_for_create", 
            "create_book", 
            "can_update_books", 
            "get_book_form_for_update", 
            "update_book", 
            "can_delete_books", 
            "delete_book", 
            "can_manage_book_aliases", 
            "alias_book"
         ], 
         "methods": [
            {
               "name": "can_create_books", 
               "doc": {
                  "headline": "Tests if this user can create ``Books``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Book``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Book`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Book`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_book_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Book`` using the desired record types.", 
                  "body": "        While ``CommentingManager.getBookRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Book``.\n        Providing an empty array tests if a ``Book`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    book_record_types (osid.type.Type[]): array of book\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Book`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``book_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param book_record_types: array of book record types\n        :type book_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Book`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "book_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_form_for_create", 
               "doc": {
                  "headline": "Gets the book form for creating new books.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    book_record_types (osid.type.Type[]): array of book\n                record types\n", 
               "return_doc": "        return: (osid.commenting.BookForm) - the book form", 
               "error_doc": "        raise:  NullArgument - ``book_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param book_record_types: array of book record types\n        :type book_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the book form\n        :rtype: ``osid.commenting.BookForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "book_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.commenting.BookForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_book", 
               "doc": {
                  "headline": "Creates a new ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_form (osid.commenting.BookForm): the form for this\n                ``Book``\n", 
               "return_doc": "        return: (osid.commenting.Book) - the new ``Book``", 
               "error_doc": "        raise:  IllegalState - ``book_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``book_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``book_form`` did not originte from\n                ``get_book_form_for_create()``", 
               "sphinx_param_doc": "        :param book_form: the form for this ``Book``\n        :type book_form: ``osid.commenting.BookForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Book``\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``book_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``book_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``book_form`` did not originte from ``get_book_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookForm", 
                     "var_name": "book_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookForm"
               ], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_books", 
               "doc": {
                  "headline": "Tests if this user can update ``Books``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Book``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Book`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Book`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_book_form_for_update", 
               "doc": {
                  "headline": "Gets the book form for updating an existing book.", 
                  "body": "        A new book form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book``\n", 
               "return_doc": "        return: (osid.commenting.BookForm) - the book form", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the book form\n        :rtype: ``osid.commenting.BookForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.BookForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_book", 
               "doc": {
                  "headline": "Updates an existing book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_form (osid.commenting.BookForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``book_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``book_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``book_form`` did not originte from\n                ``get_book_form_for_update()``", 
               "sphinx_param_doc": "        :param book_form: the form containing the elements to be updated\n        :type book_form: ``osid.commenting.BookForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``book_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``book_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``book_form`` did not originte from ``get_book_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookForm", 
                     "var_name": "book_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_books", 
               "doc": {
                  "headline": "Tests if this user can delete ``Books`` A return of true does not guarantee successful authorization.", 
                  "body": "        A return of false indicates that it is known deleting a ``Book``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Book`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Book`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_book", 
               "doc": {
                  "headline": "Deletes a ``Book``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to remove\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_book_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Books``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Book`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Book`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_book", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Book`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Book`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another book, it is\n        reassigned to the given book ``Id``."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a ``Book``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a ``Book``\n        :type book_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``book_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookNotificationSession", 
         "shortname": "BookNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Book`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Book`` object\n    itself. Adding and removing comments result in notifications\n    available from the notification session for comments."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_book_notifications", 
            "register_for_new_books", 
            "register_for_new_book_ancestors", 
            "register_for_new_book_descendants", 
            "register_for_changed_books", 
            "register_for_changed_book", 
            "register_for_deleted_books", 
            "register_for_deleted_book", 
            "register_for_deleted_book_ancestors", 
            "register_for_deleted_book_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_book_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Book`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_books", 
               "doc": {
                  "headline": "Register for notifications of new books.", 
                  "body": "        ``BookReceiver.newBook()`` is invoked when a new ``Book`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_book_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new ancestor of the specified book.", 
                  "body": "        ``BookReceiver.newAncestorBook()`` is invoked when the specified\n        book node gets a new ancestor."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` node to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_book_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new descendant of the specified book.", 
                  "body": "        ``BookReceiver.newDescendantBook()`` is invoked when the\n        specified book node gets a new descendant."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` node to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_books", 
               "doc": {
                  "headline": "Registers for notification of updated books.", 
                  "body": "        ``BookReceiver.changedBook()`` is invoked when a book is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_book", 
               "doc": {
                  "headline": "Registers for notification of an updated book.", 
                  "body": "        ``BookReceiver.changedBook()`` is invoked when the specified\n        book is changed."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_books", 
               "doc": {
                  "headline": "Registers for notification of deleted books.", 
                  "body": "        ``BookReceiver.deletedBook()`` is invoked when a book is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_book", 
               "doc": {
                  "headline": "Registers for notification of a deleted book.", 
                  "body": "        ``BookReceiver.deletedBook()`` is invoked when the specified\n        book is deleted."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_book_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes an ancestor of the specified book ``BookReceiver.", 
                  "body": "        deletedAncestor()`` is invoked when the specified book node\n        loses an ancestor."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_book_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes a descendant of the specified book.", 
                  "body": "        ``BookReceiver.deletedDescendant()`` is invoked when the\n        specified book node loses a descendant."
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to monitor\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookHierarchySession", 
         "shortname": "BookHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Book`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Book``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_books()`` and ``getChildBooks()``. To relate these\n    ``Ids`` to another OSID, ``get_book_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Book`` available in the Commenting OSID is known to this hierarchy\n    but does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_books()`` or ``get_child_books()`` in lieu\n    of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: book elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_hierarchy_id", 
            "get_book_hierarchy", 
            "can_access_book_hierarchy", 
            "use_comparative_book_view", 
            "use_plenary_book_view", 
            "get_root_book_ids", 
            "get_root_books", 
            "has_parent_books", 
            "is_parent_of_book", 
            "get_parent_book_ids", 
            "get_parent_books", 
            "is_ancestor_of_book", 
            "has_child_books", 
            "is_child_of_book", 
            "get_child_book_ids", 
            "get_child_books", 
            "is_descendant_of_book", 
            "get_book_node_ids", 
            "get_book_nodes"
         ], 
         "methods": [
            {
               "name": "get_book_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_book_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_book_view", 
               "doc": {
                  "headline": "The returns from the book methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_book_view", 
               "doc": {
                  "headline": "A complete view of the ``Book`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_book_ids", 
               "doc": {
                  "headline": "Gets the root book ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root book ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root book ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_books", 
               "doc": {
                  "headline": "Gets the root books in the book hierarchy.", 
                  "body": "        A node with no parents is an orphan. While all book ``Ids`` are\n        known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root node or child of\n        another node."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookList) - the root books", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root books\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_books", 
               "doc": {
                  "headline": "Tests if the ``Book`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the book has parents, f ``alse``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the book has parents, f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_book", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``book_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``book_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_book_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the book", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the book\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_books", 
               "doc": {
                  "headline": "Gets the parent books of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                query\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the parent books of the\n                ``id``", 
               "error_doc": "        raise:  NotFound - a ``Book`` identified by ``Id is`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to query\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent books of the ``id``\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Book`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_book", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "        return: (boolean) - ``tru`` e if this ``id`` is an ancestor of\n                ``book_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``tru`` e if this ``id`` is an ancestor of ``book_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_books", 
               "doc": {
                  "headline": "Tests if a book has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``book_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``book_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_book", 
               "doc": {
                  "headline": "Tests if a book is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``book_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``book_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_book_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the book", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` to query\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the book\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_books", 
               "doc": {
                  "headline": "Gets the child books of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the ``Book`` to\n                query\n", 
               "return_doc": "        return: (osid.commenting.BookList) - the child books of the\n                ``id``", 
               "error_doc": "        raise:  NotFound - a ``Book`` identified by ``Id is`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the ``Book`` to query\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the child books of the ``id``\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Book`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_book", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``book_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``id`` or ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``book_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_book_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a book node", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` to query\n        :type book_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a book node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_book_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.commenting.BookNode) - a book node", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` to query\n        :type book_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a book node\n        :rtype: ``osid.commenting.BookNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.commenting.BookNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookHierarchyDesignSession", 
         "shortname": "BookHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages a hierarchy of books.", 
            "body": "    Books may be organized into a hierarchy for organizing or\n    federating. A parent ``Book`` includes all of the comments of its\n    children such that a single root node contains all of the comments\n    of the federation."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_book_hierarchy_id", 
            "get_book_hierarchy", 
            "can_modify_book_hierarchy", 
            "add_root_book", 
            "remove_root_book", 
            "add_child_book", 
            "remove_child_book", 
            "remove_child_books"
         ], 
         "methods": [
            {
               "name": "get_book_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_book_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_book_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_book", 
               "doc": {
                  "headline": "Adds a root book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``book_id`` is already in hierarchy\n        raise:  NotFound - ``book_id`` is not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``book_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``book_id`` is not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_book", 
               "doc": {
                  "headline": "Removes a root book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``book_id`` is not a root\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` is not a root\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_book", 
               "doc": {
                  "headline": "Adds a child to a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``book_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``book_id`` or ``child_id`` not found\n        raise:  NullArgument - ``book_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``book_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``book_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_book", 
               "doc": {
                  "headline": "Removes a child from a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``book_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``book_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``book_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_books", 
               "doc": {
                  "headline": "Removes all children from a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of a book\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``book_id`` not found\n        raise:  NullArgument - ``book_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of a book\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``book_id`` not found\n        :raise: ``NullArgument`` -- ``book_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.Comment", 
         "shortname": "Comment", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Comment`` represents a comment and/or rating related to a reference object in a book.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_reference_id", 
            "get_commentor_id", 
            "get_commentor", 
            "get_commenting_agent_id", 
            "get_commenting_agent", 
            "get_text", 
            "has_rating", 
            "get_rating_id", 
            "get_rating", 
            "get_comment_record"
         ], 
         "methods": [
            {
               "name": "get_reference_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the referenced object to which this comment pertains.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the reference ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reference ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_commentor_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the resource who created this comment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Resource``  ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Resource``  ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_commentor", 
               "doc": {
                  "headline": "Gets the resource who created this comment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the ``Resource``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Resource``\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_commenting_agent_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the agent who created this comment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agent``  ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``  ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_commenting_agent", 
               "doc": {
                  "headline": "Gets the agent who created this comment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the ``Agent``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_text", 
               "doc": {
                  "headline": "Gets the comment text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the comment text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment text\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_rating", 
               "doc": {
                  "headline": "Tests if this comment includes a rating.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this comment includes a rating,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this comment includes a rating, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rating_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agent``  ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_rating()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``  ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rating()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating", 
               "doc": {
                  "headline": "Gets the ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the ``Grade``", 
               "error_doc": "        raise:  IllegalState - ``has_rating()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Grade``\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rating()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_comment_record", 
               "doc": {
                  "headline": "Gets the comment record corresponding to the given ``Comment`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``comment_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(comment_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): the type of\n                comment record to retrieve\n", 
               "return_doc": "        return: (osid.commenting.records.CommentRecord) - the comment\n                record", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(comment_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param comment_record_type: the type of comment record to retrieve\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment record\n        :rtype: ``osid.commenting.records.CommentRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentRecord", 
         "shortname": "CommentRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Comment``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentQuery", 
         "shortname": "CommentQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching comments.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_reference_id", 
            "clear_reference_id_terms", 
            "match_commentor_id", 
            "clear_commentor_id_terms", 
            "supports_commentor_query", 
            "get_commentor_query", 
            "clear_commentor_terms", 
            "match_commenting_agent_id", 
            "clear_commenting_agent_id_terms", 
            "supports_commenting_agent_query", 
            "get_commenting_agent_query", 
            "clear_commenting_agent_terms", 
            "match_text", 
            "match_any_text", 
            "clear_text_terms", 
            "match_rating_id", 
            "clear_rating_id_terms", 
            "supports_rating_query", 
            "get_rating_query", 
            "match_any_rating", 
            "clear_rating_terms", 
            "match_book_id", 
            "clear_book_id_terms", 
            "supports_book_query", 
            "get_book_query", 
            "clear_book_terms", 
            "get_comment_query_record"
         ], 
         "methods": [
            {
               "name": "match_reference_id", 
               "doc": {
                  "headline": "Sets reference ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a source ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_id`` is ``null``", 
               "sphinx_param_doc": "        :param source_id: a source ``Id``\n        :type source_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_reference_id_terms", 
               "doc": {
                  "headline": "Clears the reference ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_commentor_id", 
               "doc": {
                  "headline": "Sets a resource ``Id`` to match a commentor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_commentor_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_commentor_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_commentor_query", 
               "doc": {
                  "headline": "Gets the query for a resource query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_commentor_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_commentor_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commentor_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_commentor_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_commenting_agent_id", 
               "doc": {
                  "headline": "Sets an agent ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_commenting_agent_id_terms", 
               "doc": {
                  "headline": "Clears the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_commenting_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_commenting_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_commenting_agent_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_commenting_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commenting_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_commenting_agent_terms", 
               "doc": {
                  "headline": "Clears the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_text", 
               "doc": {
                  "headline": "Matches text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    text (string): the text\n        arg:    string_match_type (osid.type.Type): a string match type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text`` is not of\n                ``string_match_type``\n        raise:  NullArgument - ``text`` is ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param text: the text\n        :type text: ``string``\n        :param string_match_type: a string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text`` is not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``text`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_text", 
               "doc": {
                  "headline": "Matches a comment that has any text assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match comments with any\n                text, ``false`` to match comments with no text\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match comments with any text, ``false`` to match comments with no text\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_text_terms", 
               "doc": {
                  "headline": "Clears the text terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_rating_id", 
               "doc": {
                  "headline": "Sets a grade ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rating_id_terms", 
               "doc": {
                  "headline": "Clears the rating ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_rating_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rating query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rating query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rating_query", 
               "doc": {
                  "headline": "Gets the query for a rating query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the rating query", 
               "error_doc": "        raise:  Unimplemented - ``supports_rating_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rating query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rating_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_rating", 
               "doc": {
                  "headline": "Matches books with any rating.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match comments with any\n                rating, ``false`` to match comments with no ratings\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match comments with any rating, ``false`` to match comments with no ratings\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_rating_terms", 
               "doc": {
                  "headline": "Clears the rating terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_book_id", 
               "doc": {
                  "headline": "Sets the book ``Id`` for this query to match comments assigned to books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_book_id_terms", 
               "doc": {
                  "headline": "Clears the book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_book_query", 
               "doc": {
                  "headline": "Tests if a ``BookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a book query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a book query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_book_query", 
               "doc": {
                  "headline": "Gets the query for a book query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQuery) - the book query", 
               "error_doc": "        raise:  Unimplemented - ``supports_book_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book query\n        :rtype: ``osid.commenting.BookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_book_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_book_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_book_terms", 
               "doc": {
                  "headline": "Clears the book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_comment_query_record", 
               "doc": {
                  "headline": "Gets the comment query record corresponding to the given ``Comment`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): a comment record\n                type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentQueryRecord) - the\n                comment query record", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(comment_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param comment_record_type: a comment record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment query record\n        :rtype: ``osid.commenting.records.CommentQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentQueryRecord", 
         "shortname": "CommentQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentQueryInspector", 
         "shortname": "CommentQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The comment query inspector for examining comment queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_reference_id_terms", 
            "get_commentor_id_terms", 
            "get_commentor_terms", 
            "get_commenting_agent_id_terms", 
            "get_commenting_agent_terms", 
            "get_text_terms", 
            "get_rating_id_terms", 
            "get_rating_terms", 
            "get_book_id_terms", 
            "get_book_terms", 
            "get_comment_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_reference_id_terms", 
               "doc": {
                  "headline": "Gets the reference ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the reference ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reference ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_commentor_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_commentor_terms", 
               "doc": {
                  "headline": "Gets the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_commenting_agent_id_terms", 
               "doc": {
                  "headline": "Gets the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_commenting_agent_terms", 
               "doc": {
                  "headline": "Gets the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the agent\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_text_terms", 
               "doc": {
                  "headline": "Gets the text query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the text query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the text query terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rating_id_terms", 
               "doc": {
                  "headline": "Gets the rating ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the rating ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rating ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rating_terms", 
               "doc": {
                  "headline": "Gets the rating terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the rating terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rating terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_book_id_terms", 
               "doc": {
                  "headline": "Gets the book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the book ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_book_terms", 
               "doc": {
                  "headline": "Gets the book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQueryInspector) - the book terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book terms\n        :rtype: ``osid.commenting.BookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_comment_query_inspector_record", 
               "doc": {
                  "headline": "Gets the comment query inspector record corresponding to the given ``Comment`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): a comment record\n                type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentQueryInspectorRecord) -\n                the comment query inspector record", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(comment_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param comment_record_type: a comment record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment query inspector record\n        :rtype: ``osid.commenting.records.CommentQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentQueryInspectorRecord", 
         "shortname": "CommentQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentForm", 
         "shortname": "CommentForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Comment`` objects.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``CommentAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_text_metadata", 
            "set_text", 
            "clear_text", 
            "get_rating_metadata", 
            "set_rating", 
            "clear_rating", 
            "get_comment_form_record"
         ], 
         "methods": [
            {
               "name": "get_text_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the text\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_text", 
               "doc": {
                  "headline": "Sets the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    text (string): the new text\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``text`` is ``null``", 
               "sphinx_param_doc": "        :param text: the new text\n        :type text: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``text`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_text", 
               "doc": {
                  "headline": "Clears the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rating_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a rating.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the rating", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the rating\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_rating", 
               "doc": {
                  "headline": "Sets the rating.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the new rating\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: the new rating\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rating", 
               "doc": {
                  "headline": "Clears the rating.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_form_record", 
               "doc": {
                  "headline": "Gets the ``CommentFormRecord`` corresponding to the given comment record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): the comment record\n                type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentFormRecord) - the\n                comment form record", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(comment_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param comment_record_type: the comment record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment form record\n        :rtype: ``osid.commenting.records.CommentFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentFormRecord", 
         "shortname": "CommentFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentSearchOrder", 
         "shortname": "CommentSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_reference", 
            "order_by_commentor", 
            "supports_commentor_search_order", 
            "get_commentor_search_order", 
            "order_by_commenting_agent", 
            "supports_commenting_agent_search_order", 
            "get_commenting_agent_search_order", 
            "order_by_text", 
            "order_by_rating", 
            "supports_rating_search_order", 
            "get_rating_search_order", 
            "get_comment_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_reference", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the reference.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_commentor", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_commentor_search_order", 
               "doc": {
                  "headline": "Tests if a resource order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource order interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_commentor_search_order", 
               "doc": {
                  "headline": "Gets the resource order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource search\n                order interface", 
               "error_doc": "        raise:  Unimplemented - ``supports_commentor_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order interface\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_commentor_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commentor_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_commenting_agent", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_commenting_agent_search_order", 
               "doc": {
                  "headline": "Tests if an agent order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent order interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_commenting_agent_search_order", 
               "doc": {
                  "headline": "Gets the agent order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order interface", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_commenting_agent_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order interface\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_commenting_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_commenting_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_text", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_rating", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the rating.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_rating_search_order", 
               "doc": {
                  "headline": "Tests if a rating order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rating order interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rating order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rating_search_order", 
               "doc": {
                  "headline": "Gets the rating order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - the rating search\n                order interface", 
               "error_doc": "        raise:  Unimplemented - ``supports_rating_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rating search order interface\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rating_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rating_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_order_record", 
               "doc": {
                  "headline": "Gets the comment search order record corresponding to the given comment record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    comment_record_type (osid.type.Type): a comment record\n                type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentSearchOrderRecord) - the\n                comment search order record", 
               "error_doc": "        raise:  NullArgument - ``comment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(comment_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param comment_record_type: a comment record type\n        :type comment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment search order record\n        :rtype: ``osid.commenting.records.CommentSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentSearchOrderRecord", 
         "shortname": "CommentSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentSearch", 
         "shortname": "CommentSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing comment searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_comments", 
            "order_comment_results", 
            "get_comment_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_comments", 
               "doc": {
                  "headline": "Execute this search among the given list of comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_ids (osid.id.IdList): list of comments\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``comment_ids`` is ``null``", 
               "sphinx_param_doc": "        :param comment_ids: list of comments\n        :type comment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "comment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_comment_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_search_order\n                (osid.commenting.CommentSearchOrder): comment search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``comment_search_order`` is ``null``\n        raise:  Unsupported - ``comment_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param comment_search_order: comment search order\n        :type comment_search_order: ``osid.commenting.CommentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``comment_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.CommentSearchOrder", 
                     "var_name": "comment_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.CommentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_search_record", 
               "doc": {
                  "headline": "Gets the comment search record corresponding to the given comment search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    comment_search_record_type (osid.type.Type): a comment\n                search record type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentSearchRecord) - the\n                comment search record", 
               "error_doc": "        raise:  NullArgument - ``comment_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(comment_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param comment_search_record_type: a comment search record type\n        :type comment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment search record\n        :rtype: ``osid.commenting.records.CommentSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentSearchRecord", 
         "shortname": "CommentSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentSearchResults", 
         "shortname": "CommentSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_comments", 
            "get_comment_query_inspector", 
            "get_comment_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_comments", 
               "doc": {
                  "headline": "Gets the comment list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentList) - the comment list", 
               "error_doc": "        raise:  IllegalState - list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment list\n        :rtype: ``osid.commenting.CommentList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_comment_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terns used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.commenting.CommentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_comment_search_results_record", 
               "doc": {
                  "headline": "Gets the comment search results record corresponding to the given comment search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    comment_search_record_type (osid.type.Type): a comment\n                search record type\n", 
               "return_doc": "        return: (osid.commenting.records.CommentSearchResultsRecord) -\n                the comment search results record", 
               "error_doc": "        raise:  NullArgument - ``comment_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(comment_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param comment_search_record_type: a comment search record type\n        :type comment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the comment search results record\n        :rtype: ``osid.commenting.records.CommentSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(comment_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "comment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.CommentSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.CommentSearchResultsRecord", 
         "shortname": "CommentSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``CommentSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.CommentReceiver", 
         "shortname": "CommentReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The comment receiver is the consumer supplied interface for receiving notifications pertaining to new or deleted comments.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_comment", 
            "changed_comment", 
            "deleted_comment"
         ], 
         "methods": [
            {
               "name": "new_comment", 
               "doc": {
                  "headline": "The callback for notifications of new comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the new comment\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the new comment\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_comment", 
               "doc": {
                  "headline": "The callback for notifications of updated comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the updated\n                comment\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the updated comment\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_comment", 
               "doc": {
                  "headline": "the callback for notification of deleted comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): the ``Id`` of the deleted\n                comment\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param comment_id: the ``Id`` of the deleted comment\n        :type comment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.CommentList", 
         "shortname": "CommentList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``CommentList`` provides a means for accessing ``Comment`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (cl.hasNext()) { Comment comment =\n    cl.getNextComment(); }\n\n    or\n      while (cl.hasNext()) {\n           Comment[] comments = cl.getNextComments(cl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_comment", 
            "get_next_comments"
         ], 
         "methods": [
            {
               "name": "get_next_comment", 
               "doc": {
                  "headline": "Gets the next ``Comment`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Comment) - the next ``Comment`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Comment`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Comment`` in this list. The ``has_next()`` method should be used to test that a next ``Comment`` is available before calling this method.\n        :rtype: ``osid.commenting.Comment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Comment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_comments", 
               "doc": {
                  "headline": "Gets the next set of ``Comment`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Comment`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.commenting.Comment) - an array of ``Comment``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Comment`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Comment`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.commenting.Comment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.commenting.Comment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.Book", 
         "shortname": "Book", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Book`` represents a collection of comments.", 
            "body": "    Like all OSID objects, a ``Book`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_book_record"
         ], 
         "methods": [
            {
               "name": "get_book_record", 
               "doc": {
                  "headline": "Gets the book record corresponding to the given ``Book`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``book_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(book_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): the type of book\n                record to retrieve\n", 
               "return_doc": "        return: (osid.commenting.records.BookRecord) - the book record", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(book_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_record_type: the type of book record to retrieve\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book record\n        :rtype: ``osid.commenting.records.BookRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookRecord", 
         "shortname": "BookRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Book``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookQuery", 
         "shortname": "BookQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching books.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_comment_id", 
            "clear_comment_id_terms", 
            "supports_comment_query", 
            "get_comment_query", 
            "match_any_comment", 
            "clear_comment_terms", 
            "match_ancestor_book_id", 
            "clear_ancestor_book_id_terms", 
            "supports_ancestor_book_query", 
            "get_ancestor_book_query", 
            "match_any_ancestor_book", 
            "clear_ancestor_book_terms", 
            "match_descendant_book_id", 
            "clear_descendant_book_id_terms", 
            "supports_descendant_book_query", 
            "get_descendant_book_query", 
            "match_any_descendant_book", 
            "clear_descendant_book_terms", 
            "get_book_query_record"
         ], 
         "methods": [
            {
               "name": "match_comment_id", 
               "doc": {
                  "headline": "Sets the comment ``Id`` for this query to match comments assigned to books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comment_id (osid.id.Id): a comment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``comment_id`` is ``null``", 
               "sphinx_param_doc": "        :param comment_id: a comment ``Id``\n        :type comment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``comment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "comment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_comment_id_terms", 
               "doc": {
                  "headline": "Clears the comment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_comment_query", 
               "doc": {
                  "headline": "Tests if a comment query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a comment query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a comment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_comment_query", 
               "doc": {
                  "headline": "Gets the query for a comment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQuery) - the comment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_comment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment query\n        :rtype: ``osid.commenting.CommentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_comment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_comment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_comment", 
               "doc": {
                  "headline": "Matches books with any comment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match books with any\n                comment, ``false`` to match books with no comments\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match books with any comment, ``false`` to match books with no comments\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_comment_terms", 
               "doc": {
                  "headline": "Clears the comment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_book_id", 
               "doc": {
                  "headline": "Sets the book ``Id`` for this query to match books that have the specified book as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n        arg:    match (boolean): ``true`` for a positive match, a\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, a ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_book_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_book_query", 
               "doc": {
                  "headline": "Tests if a ``BookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a book query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a book query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_book_query", 
               "doc": {
                  "headline": "Gets the query for a book.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQuery) - the book query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_book_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book query\n        :rtype: ``osid.commenting.BookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_book_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_book_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_book", 
               "doc": {
                  "headline": "Matches books with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match books with any\n                ancestor, ``false`` to match root books\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match books with any ancestor, ``false`` to match root books\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_book_terms", 
               "doc": {
                  "headline": "Clears the ancestor book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_book_id", 
               "doc": {
                  "headline": "Sets the book ``Id`` for this query to match books that have the specified book as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): a book ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_id`` is ``null``", 
               "sphinx_param_doc": "        :param book_id: a book ``Id``\n        :type book_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_book_id_terms", 
               "doc": {
                  "headline": "Clears the descendant book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_book_query", 
               "doc": {
                  "headline": "Tests if a ``BookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a book query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a book query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_book_query", 
               "doc": {
                  "headline": "Gets the query for a book.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQuery) - the book query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_book_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book query\n        :rtype: ``osid.commenting.BookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_book_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_book_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_book", 
               "doc": {
                  "headline": "Matches books with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match books with any\n                descendant, ``false`` to match leaf books\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match books with any descendant, ``false`` to match leaf books\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_book_terms", 
               "doc": {
                  "headline": "Clears the descendant book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_book_query_record", 
               "doc": {
                  "headline": "Gets the book query record corresponding to the given ``Book`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): a book record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookQueryRecord) - the book\n                query record", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(book_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_record_type: a book record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book query record\n        :rtype: ``osid.commenting.records.BookQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookQueryRecord", 
         "shortname": "BookQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookQueryInspector", 
         "shortname": "BookQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining bok queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_comment_id_terms", 
            "get_comment_terms", 
            "get_ancestor_book_id_terms", 
            "get_ancestor_book_terms", 
            "get_descendant_book_id_terms", 
            "get_descendant_book_terms", 
            "get_book_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_comment_id_terms", 
               "doc": {
                  "headline": "Gets the comment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the comment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_comment_terms", 
               "doc": {
                  "headline": "Gets the comment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.CommentQueryInspector) - the comment\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment terms\n        :rtype: ``osid.commenting.CommentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.CommentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_book_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor book ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor book ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_book_terms", 
               "doc": {
                  "headline": "Gets the ancestor book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQueryInspector) - the ancestor book\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor book terms\n        :rtype: ``osid.commenting.BookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_book_id_terms", 
               "doc": {
                  "headline": "Gets the descendant book ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant book ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant book ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_book_terms", 
               "doc": {
                  "headline": "Gets the descendant book terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQueryInspector) - the descendant\n                book terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant book terms\n        :rtype: ``osid.commenting.BookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_book_query_inspector_record", 
               "doc": {
                  "headline": "Gets the book query inspector record corresponding to the given ``Book`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): a book record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookQueryInspectorRecord) - the\n                book query inspector record", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(book_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_record_type: a book record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book query inspector record\n        :rtype: ``osid.commenting.records.BookQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookQueryInspectorRecord", 
         "shortname": "BookQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookForm", 
         "shortname": "BookForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Books``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``BookAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_book_form_record"
         ], 
         "methods": [
            {
               "name": "get_book_form_record", 
               "doc": {
                  "headline": "Gets the ``BookFormRecord`` corresponding to the given book record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): the book record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookFormRecord) - the book form\n                record", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(book_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_record_type: the book record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book form record\n        :rtype: ``osid.commenting.records.BookFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookFormRecord", 
         "shortname": "BookFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookSearchOrder", 
         "shortname": "BookSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_book_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_book_search_order_record", 
               "doc": {
                  "headline": "Gets the book search order record corresponding to the given book record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    book_record_type (osid.type.Type): a book record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookSearchOrderRecord) - the\n                book search order record", 
               "error_doc": "        raise:  NullArgument - ``book_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(book_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_record_type: a book record type\n        :type book_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book search order record\n        :rtype: ``osid.commenting.records.BookSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookSearchOrderRecord", 
         "shortname": "BookSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookSearch", 
         "shortname": "BookSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing book searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_books", 
            "order_book_results", 
            "get_book_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_books", 
               "doc": {
                  "headline": "Execute this search among the given list of books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_ids (osid.id.IdList): list of books\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_ids`` is ``null``", 
               "sphinx_param_doc": "        :param book_ids: list of books\n        :type book_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "book_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_book_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_search_order (osid.commenting.BookSearchOrder):\n                book search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``book_search_order`` is ``null``\n        raise:  Unsupported - ``book_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param book_search_order: book search order\n        :type book_search_order: ``osid.commenting.BookSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``book_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.commenting.BookSearchOrder", 
                     "var_name": "book_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.commenting.BookSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_search_record", 
               "doc": {
                  "headline": "Gets the book search record corresponding to the given book search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    book_search_record_type (osid.type.Type): a book search\n                record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookSearchRecord) - the book\n                search record", 
               "error_doc": "        raise:  NullArgument - ``book_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(book_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_search_record_type: a book search record type\n        :type book_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book search record\n        :rtype: ``osid.commenting.records.BookSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``book_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookSearchRecord", 
         "shortname": "BookSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookSearchResults", 
         "shortname": "BookSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_books", 
            "get_book_query_inspector", 
            "get_book_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_books", 
               "doc": {
                  "headline": "Gets the book list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookList) - the book list", 
               "error_doc": "        raise:  IllegalState - list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book list\n        :rtype: ``osid.commenting.BookList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_book_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terns used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.commenting.BookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_book_search_results_record", 
               "doc": {
                  "headline": "Gets the book search results record corresponding to the given book search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    book_search_record_type (osid.type.Type): a book search\n                record type\n", 
               "return_doc": "        return: (osid.commenting.records.BookSearchResultsRecord) - the\n                book search results record", 
               "error_doc": "        raise:  NullArgument - ``BookSearchRecordType`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(book_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param book_search_record_type: a book search record type\n        :type book_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the book search results record\n        :rtype: ``osid.commenting.records.BookSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``BookSearchRecordType`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(book_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "book_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.commenting.records.BookSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.records.BookSearchResultsRecord", 
         "shortname": "BookSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BookSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.commenting.BookReceiver", 
         "shortname": "BookReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The book receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Book`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_book", 
            "new_ancestor_book", 
            "new_descendant_book", 
            "changed_book", 
            "deleted_book", 
            "deleted_ancestor_book", 
            "deleted_descendant_book"
         ], 
         "methods": [
            {
               "name": "new_book", 
               "doc": {
                  "headline": "The callback for notifications of new books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the new ``Book``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the new ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_book", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the registered\n                ``Book``\n        arg:    ancestor_id (osid.id.Id): the Id of the new ancestor\n                book\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the registered ``Book``\n        :type book_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the new ancestor book\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_book", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the registered\n                ``Book``\n        arg:    descendant_id (osid.id.Id): the Id of the new descendant\n                book\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the registered ``Book``\n        :type book_id: ``osid.id.Id``\n        :param descendant_id: the Id of the new descendant book\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_book", 
               "doc": {
                  "headline": "The callback for notification of updated books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the updated ``Book``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the updated ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_book", 
               "doc": {
                  "headline": "the callback for notification of deleted books.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the registered\n                ``Book``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the registered ``Book``\n        :type book_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_book", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the registered\n                ``Book``\n        arg:    ancestor_id (osid.id.Id): the Id of the removed ancestor\n                book\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the registered ``Book``\n        :type book_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the removed ancestor book\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_book", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of a book.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    book_id (osid.id.Id): the ``Id`` of the registered\n                ``Book``\n        arg:    descendant_id (osid.id.Id): the Id of the deleted\n                descendant book\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param book_id: the ``Id`` of the registered ``Book``\n        :type book_id: ``osid.id.Id``\n        :param descendant_id: the Id of the deleted descendant book\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "book_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookList", 
         "shortname": "BookList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BookList`` provides a means for accessing ``Book`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bl.hasNext()) { Book book = bl.getNextBook(); }\n\n    or\n      while (bl.hasNext()) {\n           Book[] books = bl.getNextBooks(bl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_book", 
            "get_next_books"
         ], 
         "methods": [
            {
               "name": "get_next_book", 
               "doc": {
                  "headline": "Gets the next ``Book`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the next ``Book`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Book`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Book`` in this list. The ``has_next()`` method should be used to test that a next ``Book`` is available before calling this method.\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_books", 
               "doc": {
                  "headline": "Gets the next set of ``Book`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Book`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.commenting.Book) - an array of ``Book``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Book`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Book`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.commenting.Book", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookNode", 
         "shortname": "BookNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``BookHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_book", 
            "get_parent_book_nodes", 
            "get_child_book_nodes"
         ], 
         "methods": [
            {
               "name": "get_book", 
               "doc": {
                  "headline": "Gets the ``Book`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.Book) - the book represented by this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the book represented by this node\n        :rtype: ``osid.commenting.Book``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.Book", 
               "errors": {}
            }, 
            {
               "name": "get_parent_book_nodes", 
               "doc": {
                  "headline": "Gets the parents of this book.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookNodeList) - the parents of this\n                book", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this book\n        :rtype: ``osid.commenting.BookNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_book_nodes", 
               "doc": {
                  "headline": "Gets the children of this book.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookNodeList) - the children of this\n                book", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this book\n        :rtype: ``osid.commenting.BookNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.commenting.BookNodeList", 
         "shortname": "BookNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BookNodeList`` provides a means for accessing ``BookNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bnl.hasNext()) { BookNode node =\n    bnl.getNextBookNode(); }\n\n    or\n      while (bnl.hasNext()) {\n           BookNode[] nodes = bnl.getNextBookNodes(bnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_book_node", 
            "get_next_book_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_book_node", 
               "doc": {
                  "headline": "Gets the next ``BookNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.commenting.BookNode) - the next ``BookNode`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``BookNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``BookNode`` in this list. The ``has_next()`` method should be used to test that a next ``BookNode`` is available before calling this method.\n        :rtype: ``osid.commenting.BookNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.commenting.BookNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_book_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``BookNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``BookNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.commenting.BookNode) - an array of ``BookNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``BookNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``BookNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.commenting.BookNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.commenting.BookNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.commenting"
}
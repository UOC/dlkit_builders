{
   "name": "workflow", 
   "version": "3.0.0", 
   "title": "Workflow Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2004 Massachusetts Institute of Technology.\n\nCopyright (c) 2011 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may modify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Workflow OSID provides a means for managing the flow of work. The\nWorkflow OSID is part of a service cluster that includes the Resourcing\nOSID, Tracking OSID and Process OSID. The Workflow OSID provides an\noverall view of the flow of work through a process.\n\nWork\n\n``Work`` is an abstract concept that indicates something to be worked on\nby ``Resources`` (workers) in a workflow ``Process`` .\n\nSteps\n\nA ``Step`` is the primary component of a workflow process in which work\nis performed. A ``Step`` may have required input conditions (or states)\nthat permit ``Work`` to enter a ``Step``. When the ``Work`` is completed\nat a ``Step,`` the ``Step`` defines the ``State`` transition of the\n``Work``. The valid next ``Steps`` in a ``Process`` is determined by the\naccepted input ``States`` of the other ``Steps``.\n\nA ``Step`` may have assigned ``Resources`` to perform the work. These\n``Resources`` may be managed manually in the Workflow OSID or through\norchestration of the Resourcing OSID where the ``Process`` maps to a\n``Job`` and the ``Work`` is the ``Work`` .\n\nProcesses\n\nA ``Process`` is a set of ``Steps`` in a workflow. ``Work`` entering a\n``Process`` is assigned an initial ``Step`` and an initial ``State`` as\ndefined by the ``Process``.\n\nBoth ``Processes`` and ``Steps`` are ``OsidGovernators`` that may be\noperated through a set of rules to dynamically manage the workflow.\n\nWorkflowEvents\n\n``Work`` moving through a ``Process`` can be examined using\n``WorkflowEvents``. Monitoring at a finer grained level can be performed\nby orchestrating a Tracking OSID where a ``Step`` is a ``Queue`` and the\n``Work`` is an ``Issue``.\n\nOffice Cataloging\n\n``Work,``  ``Steps,`` and ``Processes`` may be organized into\nfederateable ``OsidCatalogs`` .\n\nSub Packages\n\nThe Workflow OSID includes a Workflow Rules OSID to manage the operation\nof ``Processes`` and ``Steps`` and impose additional input constraints\non ``Steps``.", 
   "interfaces": [
      {
         "fullname": "osid.workflow.WorkflowProfile", 
         "shortname": "WorkflowProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The workflow profile describes the interoperability among workflow services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_process_lookup", 
            "supports_process_query", 
            "supports_process_search", 
            "supports_process_admin", 
            "supports_process_notification", 
            "supports_process_office", 
            "supports_process_office_assignment", 
            "supports_process_smart_office", 
            "supports_step_lookup", 
            "supports_step_query", 
            "supports_step_search", 
            "supports_step_admin", 
            "supports_step_notification", 
            "supports_step_office", 
            "supports_step_office_assignment", 
            "supports_step_smart_office", 
            "supports_work_lookup", 
            "supports_work_query", 
            "supports_work_search", 
            "supports_work_admin", 
            "supports_work_notification", 
            "supports_work_office", 
            "supports_work_office_assignment", 
            "supports_work_smart_office", 
            "supports_workflow", 
            "supports_workflow_initiation", 
            "supports_workflow_management", 
            "supports_manual_workflow", 
            "supports_workflow_event_lookup", 
            "supports_workflow_event_notification", 
            "supports_office_lookup", 
            "supports_office_query", 
            "supports_office_search", 
            "supports_office_admin", 
            "supports_office_notification", 
            "supports_office_hierarchy", 
            "supports_office_hierarchy_design", 
            "supports_workflow_batch", 
            "supports_workflow_rules", 
            "get_process_record_types", 
            "supports_process_record_type", 
            "get_process_search_record_types", 
            "supports_process_search_record_type", 
            "get_step_record_types", 
            "supports_step_record_type", 
            "get_step_search_record_types", 
            "supports_step_search_record_type", 
            "get_work_record_types", 
            "supports_work_record_type", 
            "get_work_search_record_types", 
            "supports_work_search_record_type", 
            "get_workflow_event_record_types", 
            "supports_workflow_event_record_type", 
            "get_office_record_types", 
            "supports_office_record_type", 
            "get_office_search_record_types", 
            "supports_office_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any office federation is exposed.", 
                  "body": "        Federation is exposed when a specific office may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of offices appears as a\n        single office."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_lookup", 
               "doc": {
                  "headline": "Tests if looking up process is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_query", 
               "doc": {
                  "headline": "Tests if querying process is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_search", 
               "doc": {
                  "headline": "Tests if searching process is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_admin", 
               "doc": {
                  "headline": "Tests if process administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_notification", 
               "doc": {
                  "headline": "Tests if a process notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_office", 
               "doc": {
                  "headline": "Tests if a process office lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process office lookup service\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process office lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_office_assignment", 
               "doc": {
                  "headline": "Tests if a process office service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if process to office assignment\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if process to office assignment service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_process_smart_office", 
               "doc": {
                  "headline": "Tests if a process smart office lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process smart office service\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process smart office service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_lookup", 
               "doc": {
                  "headline": "Tests if looking up steps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if step lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if step lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_query", 
               "doc": {
                  "headline": "Tests if querying steps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if step query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if step query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_search", 
               "doc": {
                  "headline": "Tests if searching steps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if step search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if step search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_admin", 
               "doc": {
                  "headline": "Tests if a step administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if step administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if step administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_notification", 
               "doc": {
                  "headline": "Tests if a stepnotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if step notification is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if step notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_office", 
               "doc": {
                  "headline": "Tests if a step office lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step office lookup service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step office lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_office_assignment", 
               "doc": {
                  "headline": "Tests if a step office assignment service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step to office assignment\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step to office assignment service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_step_smart_office", 
               "doc": {
                  "headline": "Tests if a step smart office service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step smart office service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step smart office service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_lookup", 
               "doc": {
                  "headline": "Tests if looking up work is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_query", 
               "doc": {
                  "headline": "Tests if querying work is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_search", 
               "doc": {
                  "headline": "Tests if searching work is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_admin", 
               "doc": {
                  "headline": "Tests if work administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_notification", 
               "doc": {
                  "headline": "Tests if a work notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work notification is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_office", 
               "doc": {
                  "headline": "Tests if a work office lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a work office lookup service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a work office lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_office_assignment", 
               "doc": {
                  "headline": "Tests if a work office service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if work to office assignment\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if work to office assignment service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_work_smart_office", 
               "doc": {
                  "headline": "Tests if a work smart office lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a work smart office service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a work smart office service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow", 
               "doc": {
                  "headline": "Tests if a workflow service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if workflow is supported, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if workflow is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_initiation", 
               "doc": {
                  "headline": "Tests if a workflow initiation service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if workflow initiation is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if workflow initiation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_management", 
               "doc": {
                  "headline": "Tests if a workflow management service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if workflow management is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if workflow management is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_manual_workflow", 
               "doc": {
                  "headline": "Tests if a manual workflow service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if manual workflow is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if manual workflow is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_event_lookup", 
               "doc": {
                  "headline": "Tests if a workflowevent lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if workflow event lookup service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if workflow event lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_event_notification", 
               "doc": {
                  "headline": "Tests if a workflow event notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a workflow event notification\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a workflow event notification service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_lookup", 
               "doc": {
                  "headline": "Tests if looking up offices is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_query", 
               "doc": {
                  "headline": "Tests if querying offices is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_search", 
               "doc": {
                  "headline": "Tests if searching offices is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_admin", 
               "doc": {
                  "headline": "Tests if office administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_notification", 
               "doc": {
                  "headline": "Tests if a officenotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a office hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_office_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a office hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if office hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if office hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_batch", 
               "doc": {
                  "headline": "Tests for the availability of a workflow batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a workflow batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a workflow batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_rules", 
               "doc": {
                  "headline": "Tests for the availability of a workflow rules service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a workflow rules service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a workflow rules service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Process`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Process`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Process`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_process_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Process`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a ``Type``\n                indicating a ``Process`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param process_record_type: a ``Type`` indicating a ``Process`` record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Process`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Process`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Process`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_process_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Process`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Process`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param process_search_record_type: a ``Type`` indicating a ``Process`` search record type\n        :type process_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Step`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Step`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Step`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_step_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Step`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Step`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param step_record_type: a ``Type`` indicating a ``Step`` record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Step`` search types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Step`` search types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Step`` search types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_step_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Step`` search type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Step`` search type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``effiort_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param step_search_record_type: a ``Type`` indicating a ``Step`` search type\n        :type step_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``effiort_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Work`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Work`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Work`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_work_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Work`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Work`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param work_record_type: a ``Type`` indicating a ``Work`` record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Work`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Work`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Work`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_work_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Work`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Work`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``work_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param work_search_record_type: a ``Type`` indicating a ``Work`` search record type\n        :type work_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_record_types", 
               "doc": {
                  "headline": "Gets the supported ``WorkflowEvent`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``WorkflowEvent`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``WorkflowEvent`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_workflow_event_record_type", 
               "doc": {
                  "headline": "Tests if the given ``WorkflowEvent`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_record_type (osid.type.Type): a ``Type``\n                indicating a ``WorkflowEvent`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param workflow_event_record_type: a ``Type`` indicating a ``WorkflowEvent`` record type\n        :type workflow_event_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "workflow_event_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Office`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Office`` types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Office`` types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_office_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Office`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): a ``Type``\n                indicating a ``Office`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param office_record_type: a ``Type`` indicating a ``Office`` record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Office`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Office`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Office`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_office_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Office`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Office`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param office_search_record_type: a ``Type`` indicating a ``Office`` search record type\n        :type office_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowManager", 
         "shortname": "WorkflowManager", 
         "category": "managers", 
         "doc": {
            "headline": "The workflow manager provides access to rules sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``ProcessLookupSession:`` a session to retrieve processs\n      * ``ProcessQuerySession:`` a session to query for processs\n      * ``ProcessSearchSession:`` a session to search for processs\n      * ``ProcessAdminSession:`` a session to create and delete processs\n      * ``ProcessNotificationSession:`` a session to receive\n        notifications pertaining to process changes\n      * ``ProcessOfficeSession:`` a session to looking mappings of\n        process to offices\n      * ``ProcessOfficeAssignmentSession:`` a session to manage process\n        to office workflows\n      * ``ProcessSmartOfficeSession:`` a session to manage dynamic\n        offices of processs\n    \n      * ``StepLookupSession:`` a session to retrieve steps\n      * ``StepQuerySession:`` a session to query for steps\n      * ``StepSearchSession:`` a session to search for steps\n      * ``StepAdminSession:`` a session to create and delete steps\n      * ``StepNotificationSession:`` a session to receive notifications\n        pertaining to step changes\n      * ``StepOfficeSession:`` a session to look up step office mappings\n      * ``StepOfficeAssignmentSession:`` a session to manage steps to\n        office mappings\n      * ``StepSmartOfficeSession:`` a session to manage dynamic offices\n        of stepss\n    \n      * ``WorkLookupSession:`` a session to retrieve work\n      * ``WorkQuerySession:`` a session to query for work\n      * ``WorkSearchSession:`` a session to search for work\n      * ``WorkAdminSession:`` a session to create and delete work\n      * ``WorkNotificationSession:`` a session to receive notifications\n        pertaining to work changes\n      * ``WorkOfficeSession:`` a session to look up work office mappings\n      * ``WorkOfficeAssignmentSession:`` a session to manage\n        availability to office mappings\n      * ``WorkSmartOfficeSession:`` a session to manage dynamic offices\n        of work\n    \n      * ``WorkflowSession:`` a session to examine work in a process\n      * ``WorkflowInitiationSession:`` a session to start work through a\n        process\n      * ``WorkflowManagementSession:`` a session to enable and disable\n        work in a process\n      * ``ManualWorkflowSession:`` a session to manuall assign work to\n        steps in a process\n      * ``WorkflowLogSession:`` a session to look up changes in a\n        workflow\n      * ``WorkflowEventNotificationSession:`` a session to receive\n        notifications of workflow changes\n    \n      * ``OfficeLookupSession:`` a session to retrieve offices\n      * ``OfficeQuerySession:`` a session to search for offices\n      * ``OfficeSearchSession:`` a session to search for offices\n      * ``OfficeAdminSession:`` a session to create and delete offices\n      * ``OfficeNotificationSession:`` a session to receive\n        notifications pertaining to office changes\n      * ``OfficeHierarchySession:`` a session to traverse a hierarchy of\n        office\n      * ``OfficeHierarchyDesignSession:`` a session to manage a office\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.workflow.WorkflowProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "WorkflowProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "workflow", 
               "name": "WorkflowProfile"
            }
         ], 
         "method_names": [
            "get_process_lookup_session", 
            "get_process_lookup_session_for_office", 
            "get_process_query_session", 
            "get_process_query_session_for_office", 
            "get_process_search_session", 
            "get_process_search_session_for_office", 
            "get_process_admin_session", 
            "get_process_admin_session_for_office", 
            "get_process_notification_session", 
            "get_process_notification_session_for_office", 
            "get_process_office_session", 
            "get_process_office_assignment_session", 
            "get_process_smart_office_session", 
            "get_step_lookup_session", 
            "get_step_lookup_session_for_office", 
            "get_step_query_session", 
            "get_step_query_session_for_office", 
            "get_step_search_session", 
            "get_step_search_session_for_office", 
            "get_step_admin_session", 
            "get_step_admin_session_for_office", 
            "get_step_notification_session", 
            "get_step_notification_session_for_office", 
            "get_step_office_session", 
            "get_step_office_assignment_session", 
            "get_step_smart_office_session", 
            "get_work_lookup_session", 
            "get_work_lookup_session_for_office", 
            "get_work_query_session", 
            "get_work_query_session_for_office", 
            "get_work_search_session", 
            "get_work_search_session_for_office", 
            "get_work_admin_session", 
            "get_work_admin_session_for_office", 
            "get_work_notification_session", 
            "get_work_notification_session_for_office", 
            "get_work_office_session", 
            "get_work_office_assignment_session", 
            "get_work_smart_office_session", 
            "get_workflow_session", 
            "get_workflow_session_for_office", 
            "get_workflow_initiation_session", 
            "get_workflow_initiation_session_for_office", 
            "get_workflow_management_session", 
            "get_workflow_management_session_for_office", 
            "get_manual_workflow_session", 
            "get_manual_workflow_session_for_office", 
            "get_workflow_event_lookup_session", 
            "get_workflow_event_lookup_session_for_office", 
            "get_workflow_event_notification_session", 
            "get_workflow_event_notification_session_for_office", 
            "get_office_lookup_session", 
            "get_office_query_session", 
            "get_office_search_session", 
            "get_office_admin_session", 
            "get_office_notification_session", 
            "get_office_hierarchy_session", 
            "get_office_hierarchy_design_session", 
            "get_workflow_batch_manager", 
            "get_workflow_rules_manager"
         ], 
         "methods": [
            {
               "name": "get_process_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessLookupSession) - a\n                ``ProcessLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessLookupSession``\n        :rtype: ``osid.workflow.ProcessLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessLookupSession) - a\n                ``ProcessLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessLookupSession``\n        :rtype: ``osid.workflow.ProcessLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuerySession) - a\n                ``ProcessQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessQuerySession``\n        :rtype: ``osid.workflow.ProcessQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessQuerySession) - a\n                ``ProcessQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessQuerySession``\n        :rtype: ``osid.workflow.ProcessQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessSearchSession) - a\n                ``ProcessSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessSearchSession``\n        :rtype: ``osid.workflow.ProcessSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessSearchSession) - a\n                ``ProcessSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessSearchSession``\n        :rtype: ``osid.workflow.ProcessSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessAdminSession) - a\n                ``ProcessAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessAdminSession``\n        :rtype: ``osid.workflow.ProcessAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessAdminSession) - a\n                ``ProcessAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessAdminSession``\n        :rtype: ``osid.workflow.ProcessAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_receiver (osid.workflow.ProcessReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.workflow.ProcessNotificationSession) - a\n                ``ProcessNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``process_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param process_receiver: the notification callback\n        :type process_receiver: ``osid.workflow.ProcessReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessNotificationSession``\n        :rtype: ``osid.workflow.ProcessNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessReceiver", 
                     "var_name": "process_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessReceiver"
               ], 
               "return_type": "osid.workflow.ProcessNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_receiver (osid.workflow.ProcessReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessNotificationSession) - a\n                ``ProcessNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``process_receiver`` or ``office_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param process_receiver: the notification callback\n        :type process_receiver: ``osid.workflow.ProcessReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessNotificationSession``\n        :rtype: ``osid.workflow.ProcessNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``process_receiver`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessReceiver", 
                     "var_name": "process_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup process/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessOfficeSession) - a\n                ``ProcessOfficeSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_office()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessOfficeSession``\n        :rtype: ``osid.workflow.ProcessOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessOfficeSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning process to offices.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessOfficeAssignmentSession) - a\n                ``ProcessOfficeAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_office_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProcessOfficeAssignmentSession``\n        :rtype: ``osid.workflow.ProcessOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessOfficeAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage process smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessSmartOfficeSession) - a\n                ``ProcessSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessSmartOfficeSession``\n        :rtype: ``osid.workflow.ProcessSmartOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessSmartOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepLookupSession) - a\n                ``StepLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepLookupSession``\n        :rtype: ``osid.workflow.StepLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepLookupSession) - a\n                ``StepLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepLookupSession``\n        :rtype: ``osid.workflow.StepLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuerySession) - a\n                ``StepQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepQuerySession``\n        :rtype: ``osid.workflow.StepQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepQuerySession) - a\n                ``StepQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepQuerySession``\n        :rtype: ``osid.workflow.StepQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepSearchSession) - a\n                ``StepSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepSearchSession``\n        :rtype: ``osid.workflow.StepSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepSearchSession) - a\n                ``StepSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepSearchSession``\n        :rtype: ``osid.workflow.StepSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepAdminSession) - a\n                ``StepAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepAdminSession``\n        :rtype: ``osid.workflow.StepAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepAdminSession) - a\n                ``StepAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepAdminSession``\n        :rtype: ``osid.workflow.StepAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_receiver (osid.workflow.StepReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.workflow.StepNotificationSession) - a\n                ``StepNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``step_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_receiver: the notification callback\n        :type step_receiver: ``osid.workflow.StepReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``StepNotificationSession``\n        :rtype: ``osid.workflow.StepNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepReceiver", 
                     "var_name": "step_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepReceiver"
               ], 
               "return_type": "osid.workflow.StepNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_receiver (osid.workflow.StepReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepNotificationSession) - a\n                ``StepNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``step_receiver`` or ``office_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param step_receiver: the notification callback\n        :type step_receiver: ``osid.workflow.StepReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepNotificationSession``\n        :rtype: ``osid.workflow.StepNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``step_receiver`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepReceiver", 
                     "var_name": "step_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup step/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepOfficeSession) - a\n                ``StepOfficeSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_office()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepOfficeSession``\n        :rtype: ``osid.workflow.StepOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepOfficeSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning steps to offices.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepOfficeAssignmentSession) - a\n                ``StepOfficeAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_office_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``StepOfficeAssignmentSession``\n        :rtype: ``osid.workflow.StepOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepOfficeAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage step smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepOfficeSession) - a\n                ``StepSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``StepSmartOfficeSession``\n        :rtype: ``osid.workflow.StepOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkLookupSession) - a\n                ``WorkLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkLookupSession``\n        :rtype: ``osid.workflow.WorkLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkLookupSession) - a\n                ``WorkLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkLookupSession``\n        :rtype: ``osid.workflow.WorkLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuerySession) - a\n                ``WorkQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkQuerySession``\n        :rtype: ``osid.workflow.WorkQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkQuerySession) - a\n                ``WorkQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkQuerySession``\n        :rtype: ``osid.workflow.WorkQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkSearchSession) - a\n                ``WorkSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkSearchSession``\n        :rtype: ``osid.workflow.WorkSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkSearchSession) - a\n                ``WorkSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkSearchSession``\n        :rtype: ``osid.workflow.WorkSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkAdminSession) - a\n                ``WorkAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkAdminSession``\n        :rtype: ``osid.workflow.WorkAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkAdminSession) - a\n                ``WorkAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkAdminSession``\n        :rtype: ``osid.workflow.WorkAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_receiver (osid.workflow.WorkReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.workflow.WorkNotificationSession) - a\n                ``WorkNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``work_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_receiver: the notification callback\n        :type work_receiver: ``osid.workflow.WorkReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``WorkNotificationSession``\n        :rtype: ``osid.workflow.WorkNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkReceiver", 
                     "var_name": "work_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkReceiver"
               ], 
               "return_type": "osid.workflow.WorkNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_receiver (osid.workflow.WorkReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkNotificationSession) - a\n                ``WorkNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``work_receiver`` or ``office_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param work_receiver: the notification callback\n        :type work_receiver: ``osid.workflow.WorkReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkNotificationSession``\n        :rtype: ``osid.workflow.WorkNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``work_receiver`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkReceiver", 
                     "var_name": "work_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup work/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkOfficeSession) - a\n                ``WorkOfficeSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_office()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkOfficeSession``\n        :rtype: ``osid.workflow.WorkOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkOfficeSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning work to offices.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkOfficeAssignmentSession) - a\n                ``WorkOfficeAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workb_office_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkOfficeAssignmentSession``\n        :rtype: ``osid.workflow.WorkOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workb_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkOfficeAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage work smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkSmartOfficeSession) - a\n                ``WorkSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkSmartOfficeSession``\n        :rtype: ``osid.workflow.WorkSmartOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkSmartOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowSession) - a ``WorkflowSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowSession``\n        :rtype: ``osid.workflow.WorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowSession) - a ``WorkflowSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowSession``\n        :rtype: ``osid.workflow.WorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_initiation_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow initiation service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowInitiationSession) - a\n                ``WorkflowInitiationSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_initiation()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowInitiationSession``\n        :rtype: ``osid.workflow.WorkflowInitiationSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_initiation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_initiation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowInitiationSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_initiation_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow initiation service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowInitiationSession) - a\n                ``WorkflowInitiationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``offiec_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_initiation()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowInitiationSession``\n        :rtype: ``osid.workflow.WorkflowInitiationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``offiec_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_initiation()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_initiation()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowInitiationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_management_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow management service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowManagementSession) - a\n                ``WorkflowManagementSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_management()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowManagementSession``\n        :rtype: ``osid.workflow.WorkflowManagementSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_management()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_management()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowManagementSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_management_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow management service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowManagementSession) - a\n                ``WorkflowManagementSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_management() or\n                supports_visible_federation() is false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowManagementSession``\n        :rtype: ``osid.workflow.WorkflowManagementSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_management() or supports_visible_federation() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_management()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowManagementSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_manual_workflow_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a manual workflow service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ManualWorkflowSession) - a\n                ``ManualWorkflowSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_manual_workflow()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ManualWorkflowSession``\n        :rtype: ``osid.workflow.ManualWorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_manual_workflow()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_manual_workflow()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ManualWorkflowSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_manual_workflow_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a manual workflow service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``office``\n", 
               "return_doc": "        return: (osid.workflow.ManualWorkflowSession) - a\n                ``ManualWorkflowSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_manual_workflow() or\n                supports_visible_federation() is false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ManualWorkflowSession``\n        :rtype: ``osid.workflow.ManualWorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_manual_workflow() or supports_visible_federation() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_manual_workflow()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ManualWorkflowSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow event lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowEventLookupSession) - a\n                ``WorkflowLogSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_event_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowLogSession``\n        :rtype: ``osid.workflow.WorkflowEventLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowEventLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow event lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``office``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventLookupSession) - a\n                ``WorkflowEventLookupSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_event_lookup() or\n                supports_visible_federation() is false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventLookupSession``\n        :rtype: ``osid.workflow.WorkflowEventLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_lookup() or supports_visible_federation() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the workflow event notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_receiver\n                (osid.workflow.WorkflowEventReceiver): the notification\n                callback\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventNotificationSession) - a\n                ``WorkflowEventNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_workflow_event_notification()`` is ``false``", 
               "sphinx_param_doc": "        :param workflow_event_receiver: the notification callback\n        :type workflow_event_receiver: ``osid.workflow.WorkflowEventReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventNotificationSession``\n        :rtype: ``osid.workflow.WorkflowEventNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_notification()`` is ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkflowEventReceiver", 
                     "var_name": "workflow_event_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkflowEventReceiver"
               ], 
               "return_type": "osid.workflow.WorkflowEventNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the workflow event notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_receiver\n                (osid.workflow.WorkflowEventReceiver): the notification\n                callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventNotificationSession) - a\n                ``WorkflowEventNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``workflow_event_receiver`` or\n                ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_workflow_event_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param workflow_event_receiver: the notification callback\n        :type workflow_event_receiver: ``osid.workflow.WorkflowEventReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventNotificationSession``\n        :rtype: ``osid.workflow.WorkflowEventNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``workflow_event_receiver`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkflowEventReceiver", 
                     "var_name": "workflow_event_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkflowEventReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeLookupSession) - a\n                ``OfficeLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``OfficeLookupSession``\n        :rtype: ``osid.workflow.OfficeLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuerySession) - a\n                ``OfficeQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``OfficeQuerySession``\n        :rtype: ``osid.workflow.OfficeQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeSearchSession) - a\n                ``OfficeSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``OfficeSearchSession``\n        :rtype: ``osid.workflow.OfficeSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeAdminSession) - a\n                ``OfficeAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``OfficeAdminSession``\n        :rtype: ``osid.workflow.OfficeAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_receiver (osid.workflow.OfficeReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.workflow.OfficeNotificationSession) - a\n                ``OfficeNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``office_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_receiver: the notification callback\n        :type office_receiver: ``osid.workflow.OfficeReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeNotificationSession``\n        :rtype: ``osid.workflow.OfficeNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeReceiver", 
                     "var_name": "office_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeReceiver"
               ], 
               "return_type": "osid.workflow.OfficeNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeHierarchySession) - a\n                ``OfficeHierarchySession`` for offices", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``OfficeHierarchySession`` for offices\n        :rtype: ``osid.workflow.OfficeHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for offices", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for offices\n        :rtype: ``osid.workflow.OfficeHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_batch_manager", 
               "doc": {
                  "headline": "Gets a ``WorkflowBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.batch.WorkflowBatchManager) - a\n                ``WorkflowbatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowbatchManager``\n        :rtype: ``osid.workflow.batch.WorkflowBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.batch.WorkflowBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_rules_manager", 
               "doc": {
                  "headline": "Gets a ``WorkflowRulesManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.rules.WorkflowRulesManager) - a\n                ``WorkflowRulesManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_rules()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowRulesManager``\n        :rtype: ``osid.workflow.rules.WorkflowRulesManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.rules.WorkflowRulesManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowProxyManager", 
         "shortname": "WorkflowProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The workflow proxy manager provides access to rules sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager pass a ``Proxy`` for passing information\n    from server environments. The sessions included in this manager are:\n\n      * ``ProcessLookupSession:`` a session to retrieve processs\n      * ``ProcessQuerySession:`` a session to query for processs\n      * ``ProcessSearchSession:`` a session to search for processs\n      * ``ProcessAdminSession:`` a session to create and delete processs\n      * ``ProcessNotificationSession:`` a session to receive\n        notifications pertaining to process changes\n      * ``ProcessOfficeSession:`` a session to looking mappings of\n        process to offices\n      * ``ProcessOfficeAssignmentSession:`` a session to manage process\n        to office workflows\n      * ``ProcessSmartOfficeSession:`` a session to manage dynamic\n        offices of processs\n    \n      * ``StepLookupSession:`` a session to retrieve steps\n      * ``StepQuerySession:`` a session to query for steps\n      * ``StepSearchSession:`` a session to search for steps\n      * ``StepAdminSession:`` a session to create and delete steps\n      * ``StepNotificationSession:`` a session to receive notifications\n        pertaining to step changes\n      * ``StepOfficeSession:`` a session to look up step office mappings\n      * ``StepOfficeAssignmentSession:`` a session to manage steps to\n        office mappings\n      * ``StepSmartOfficeSession:`` a session to manage dynamic offices\n        of stepss\n    \n      * ``WorkLookupSession:`` a session to retrieve work\n      * ``WorkQuerySession:`` a session to query for work\n      * ``WorkSearchSession:`` a session to search for work\n      * ``WorkAdminSession:`` a session to create and delete work\n      * ``WorkNotificationSession:`` a session to receive notifications\n        pertaining to work changes\n      * ``WorkOfficeSession:`` a session to look up work office mappings\n      * ``WorkOfficeAssignmentSession:`` a session to manage\n        availability to office mappings\n      * ``WorkSmartOfficeSession:`` a session to manage dynamic offices\n        of work\n    \n      * ``WorkflowSession:`` a session to examine work in a process\n      * ``WorkflowInitiationSession:`` a session to start work through a\n        process\n      * ``WorkflowManagementSession:`` a session to enable and disable\n        work in a process\n      * ``ManualWorkflowSession:`` a session to manuall assign work to\n        steps in a process\n      * ``WorkflowLogSession:`` a session to look up changes in a\n        workflow\n      * ``WorkflowEventNotificationSession:`` a session to receive\n        notifications of workflow changes\n    \n      * ``OfficeLookupSession:`` a session to retrieve offices\n      * ``OfficeQuerySession:`` a session to search for offices\n      * ``OfficeSearchSession:`` a session to search for offices\n      * ``OfficeAdminSession:`` a session to create and delete offices\n      * ``OfficeNotificationSession:`` a session to receive\n        notifications pertaining to office changes\n      * ``OfficeHierarchySession:`` a session to traverse a hierarchy of\n        office\n      * ``OfficeHierarchyDesignSession:`` a session to manage a office\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.workflow.WorkflowProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "WorkflowProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "workflow", 
               "name": "WorkflowProfile"
            }
         ], 
         "method_names": [
            "get_process_lookup_session", 
            "get_process_lookup_session_for_office", 
            "get_process_query_session", 
            "get_process_query_session_for_office", 
            "get_process_search_session", 
            "get_process_search_session_for_office", 
            "get_process_admin_session", 
            "get_process_admin_session_for_office", 
            "get_process_notification_session", 
            "get_process_notification_session_for_office", 
            "get_process_office_session", 
            "get_process_office_assignment_session", 
            "get_process_smart_office_session", 
            "get_step_lookup_session", 
            "get_step_lookup_session_for_office", 
            "get_step_query_session", 
            "get_step_query_session_for_office", 
            "get_step_search_session", 
            "get_step_search_session_for_office", 
            "get_step_admin_session", 
            "get_step_admin_session_for_office", 
            "get_step_notification_session", 
            "get_step_notification_session_for_office", 
            "get_step_office_session", 
            "get_step_office_assignment_session", 
            "get_step_smart_office_session", 
            "get_work_lookup_session", 
            "get_work_lookup_session_for_office", 
            "get_work_query_session", 
            "get_work_query_session_for_office", 
            "get_work_search_session", 
            "get_work_search_session_for_office", 
            "get_work_admin_session", 
            "get_work_admin_session_for_office", 
            "get_work_notification_session", 
            "get_work_notification_session_for_office", 
            "get_work_office_session", 
            "get_work_office_assignment_session", 
            "get_work_smart_office_session", 
            "get_workflow_session", 
            "get_workflow_session_for_office", 
            "get_workflow_initiation_session", 
            "get_workflow_initiation_session_for_office", 
            "get_workflow_management_session", 
            "get_workflow_management_session_for_office", 
            "get_manual_workflow_session", 
            "get_manual_workflow_session_for_office", 
            "get_workflow_event_lookup_session", 
            "get_workflow_event_lookup_session_for_office", 
            "get_workflow_event_notification_session", 
            "get_workflow_event_notification_session_for_office", 
            "get_office_lookup_session", 
            "get_office_query_session", 
            "get_office_search_session", 
            "get_office_admin_session", 
            "get_office_notification_session", 
            "get_office_hierarchy_session", 
            "get_office_hierarchy_design_session", 
            "get_workflow_batch_proxy_manager", 
            "get_workflow_rules_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_process_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessLookupSession) - a\n                ``ProcessLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessLookupSession``\n        :rtype: ``osid.workflow.ProcessLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessLookupSession) - a\n                ``ProcessLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessLookupSession``\n        :rtype: ``osid.workflow.ProcessLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessQuerySession) - a\n                ``ProcessQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessQuerySession``\n        :rtype: ``osid.workflow.ProcessQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessQuerySession) - a\n                ``ProcessQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessQuerySession``\n        :rtype: ``osid.workflow.ProcessQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessSearchSession) - a\n                ``ProcessSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessSearchSession``\n        :rtype: ``osid.workflow.ProcessSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessSearchSession) - a\n                ``ProcessSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessSearchSession``\n        :rtype: ``osid.workflow.ProcessSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessAdminSession) - a\n                ``ProcessAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessAdminSession``\n        :rtype: ``osid.workflow.ProcessAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessAdminSession) - a\n                ``ProcessAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessAdminSession``\n        :rtype: ``osid.workflow.ProcessAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_receiver (osid.workflow.ProcessReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessNotificationSession) - a\n                ``ProcessNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``process_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param process_receiver: the notification callback\n        :type process_receiver: ``osid.workflow.ProcessReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessNotificationSession``\n        :rtype: ``osid.workflow.ProcessNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessReceiver", 
                     "var_name": "process_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the process notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_receiver (osid.workflow.ProcessReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessNotificationSession) - a\n                ``ProcessNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``process_receiver, office_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param process_receiver: the notification callback\n        :type process_receiver: ``osid.workflow.ProcessReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessNotificationSession``\n        :rtype: ``osid.workflow.ProcessNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``process_receiver, office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessReceiver", 
                     "var_name": "process_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup process/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessOfficeSession) - a\n                ``ProcessOfficeSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessOfficeSession``\n        :rtype: ``osid.workflow.ProcessOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessOfficeSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning process to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessOfficeAssignmentSession) - a\n                ``ProcessOfficeAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_office_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessOfficeAssignmentSession``\n        :rtype: ``osid.workflow.ProcessOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessOfficeAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage process smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ProcessSmartOfficeSession) - a\n                ``ProcessSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_process_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProcessSmartOfficeSession``\n        :rtype: ``osid.workflow.ProcessSmartOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_process_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ProcessSmartOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepLookupSession) - an\n                ``StepLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepLookupSession``\n        :rtype: ``osid.workflow.StepLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepLookupSession) - an\n                ``StepLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepLookupSession``\n        :rtype: ``osid.workflow.StepLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepQuerySession) - an\n                ``StepQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepQuerySession``\n        :rtype: ``osid.workflow.StepQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepQuerySession) - an\n                ``StepQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepQuerySession``\n        :rtype: ``osid.workflow.StepQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepSearchSession) - an\n                ``StepSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepSearchSession``\n        :rtype: ``osid.workflow.StepSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepSearchSession) - an\n                ``StepSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepSearchSession``\n        :rtype: ``osid.workflow.StepSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepAdminSession) - an\n                ``StepAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepAdminSession``\n        :rtype: ``osid.workflow.StepAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepAdminSession) - an\n                ``StepAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepAdminSession``\n        :rtype: ``osid.workflow.StepAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_receiver (osid.workflow.StepReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepNotificationSession) - an\n                ``StepNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``step_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_receiver: the notification callback\n        :type step_receiver: ``osid.workflow.StepReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepNotificationSession``\n        :rtype: ``osid.workflow.StepNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepReceiver", 
                     "var_name": "step_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the step notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_receiver (osid.workflow.StepReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepNotificationSession) - an\n                ``StepNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``step_receiver, office_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param step_receiver: the notification callback\n        :type step_receiver: ``osid.workflow.StepReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepNotificationSession``\n        :rtype: ``osid.workflow.StepNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``step_receiver, office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepReceiver", 
                     "var_name": "step_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup step/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepOfficeSession) - an\n                ``StepOfficeSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_office()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepOfficeSession``\n        :rtype: ``osid.workflow.StepOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepOfficeSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning steps to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepOfficeAssignmentSession) - an\n                ``StepOfficeAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_office_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepOfficeAssignmentSession``\n        :rtype: ``osid.workflow.StepOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepOfficeAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage step smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.StepOfficeSession) - an\n                ``StepSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_step_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``StepSmartOfficeSession``\n        :rtype: ``osid.workflow.StepOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_step_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.StepOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkLookupSession) - a\n                ``WorkLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkLookupSession``\n        :rtype: ``osid.workflow.WorkLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkLookupSession) - a\n                ``WorkLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Office`` found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkLookupSession``\n        :rtype: ``osid.workflow.WorkLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Office`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkQuerySession) - a\n                ``WorkQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkQuerySession``\n        :rtype: ``osid.workflow.WorkQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work query service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkQuerySession) - a\n                ``WorkQuerySession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkQuerySession``\n        :rtype: ``osid.workflow.WorkQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkSearchSession) - a\n                ``WorkSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkSearchSession``\n        :rtype: ``osid.workflow.WorkSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work search service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkSearchSession) - a\n                ``WorkSearchSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkSearchSession``\n        :rtype: ``osid.workflow.WorkSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkAdminSession) - a\n                ``WorkAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkAdminSession``\n        :rtype: ``osid.workflow.WorkAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_admin_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work administration service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkAdminSession) - a\n                ``WorkAdminSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkAdminSession``\n        :rtype: ``osid.workflow.WorkAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_receiver (osid.workflow.WorkReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkNotificationSession) - a\n                ``WorkNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``work_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_receiver: the notification callback\n        :type work_receiver: ``osid.workflow.WorkReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkNotificationSession``\n        :rtype: ``osid.workflow.WorkNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkReceiver", 
                     "var_name": "work_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the work notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_receiver (osid.workflow.WorkReceiver): the\n                notification callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkNotificationSession) - a\n                ``WorkNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``work_receiver, office_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param work_receiver: the notification callback\n        :type work_receiver: ``osid.workflow.WorkReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkNotificationSession``\n        :rtype: ``osid.workflow.WorkNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``work_receiver, office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkReceiver", 
                     "var_name": "work_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup work/office mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkOfficeSession) - a\n                ``WorkOfficeSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_office()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkOfficeSession``\n        :rtype: ``osid.workflow.WorkOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkOfficeSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_office_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning work to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkOfficeAssignmentSession) - a\n                ``WorkOfficeAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workb_office_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkOfficeAssignmentSession``\n        :rtype: ``osid.workflow.WorkOfficeAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workb_office_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_office_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkOfficeAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_smart_office_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage work smart offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkSmartOfficeSession) - a\n                ``WorkSmartOfficeSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - no ``Office`` found by the given ``Id``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_work_smart_office()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkSmartOfficeSession``\n        :rtype: ``osid.workflow.WorkSmartOfficeSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- no ``Office`` found by the given ``Id``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_work_smart_office()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_smart_office()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkSmartOfficeSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowSession) - a ``WorkflowSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowSession``\n        :rtype: ``osid.workflow.WorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowSession) - a ``WorkflowSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowSession``\n        :rtype: ``osid.workflow.WorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_initiation_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow initiation service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowInitiationSession) - a\n                ``WorkflowInitiationSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_initiation()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowInitiationSession``\n        :rtype: ``osid.workflow.WorkflowInitiationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_initiation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_initiation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowInitiationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_initiation_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow initiation service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowInitiationSession) - a\n                ``WorkflowInitiationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_initiation()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowInitiationSession``\n        :rtype: ``osid.workflow.WorkflowInitiationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_initiation()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_initiation()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowInitiationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_management_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow management service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowManagementSession) - a\n                ``WorkflowManagementSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_management()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowManagementSession``\n        :rtype: ``osid.workflow.WorkflowManagementSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_management()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_management()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowManagementSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_management_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow management service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowManagementSession) - a\n                ``WorkflowManagementSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_management()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowManagementSession``\n        :rtype: ``osid.workflow.WorkflowManagementSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_management()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_management()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowManagementSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_manual_workflow_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a manual workflow service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ManualWorkflowSession) - a\n                ``ManualWorkflowSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_manual_workflow()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ManualWorkflowSession``\n        :rtype: ``osid.workflow.ManualWorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_manual_workflow()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_manual_workflow()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ManualWorkflowSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_manual_workflow_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a manual workflow service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.ManualWorkflowSession) - a\n                ``ManualWorkflowSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_manual_workflow()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ManualWorkflowSession``\n        :rtype: ``osid.workflow.ManualWorkflowSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_manual_workflow()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_manual_workflow()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.ManualWorkflowSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow event lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventLookupSession) - a\n                ``WorkflowEventLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_event_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventLookupSession``\n        :rtype: ``osid.workflow.WorkflowEventLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowEventLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_lookup_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` for a workflow event lookup service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventLookupSession) - a\n                ``WorkflowEventLookupSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``office_id or proxy is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_event_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventLookupSession``\n        :rtype: ``osid.workflow.WorkflowEventLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``office_id or proxy is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowEventLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the workflow event notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_receiver\n                (osid.workflow.WorkflowEventReceiver): the notification\n                callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventNotificationSession) - a\n                ``WorkflowEventNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_receiver`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_workflow_event_notification()`` is ``false``", 
               "sphinx_param_doc": "        :param workflow_event_receiver: the notification callback\n        :type workflow_event_receiver: ``osid.workflow.WorkflowEventReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventNotificationSession``\n        :rtype: ``osid.workflow.WorkflowEventNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_notification()`` is ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkflowEventReceiver", 
                     "var_name": "workflow_event_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkflowEventReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowEventNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_event_notification_session_for_office", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the workflow event notification service for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_receiver\n                (osid.workflow.WorkflowEventReceiver): the notification\n                callback\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventNotificationSession) - a\n                ``WorkflowEventNotificationSession``", 
               "error_doc": "        raise:  NotFound - no office found by the given ``Id``\n        raise:  NullArgument - ``workflow_event_receiver, office_id,``\n                or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_workflow_event_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param workflow_event_receiver: the notification callback\n        :type workflow_event_receiver: ``osid.workflow.WorkflowEventReceiver``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``WorkflowEventNotificationSession``\n        :rtype: ``osid.workflow.WorkflowEventNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no office found by the given ``Id``\n        :raise: ``NullArgument`` -- ``workflow_event_receiver, office_id,`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_event_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_event_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkflowEventReceiver", 
                     "var_name": "workflow_event_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkflowEventReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.WorkflowEventNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeLookupSession) - a\n                ``OfficeLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeLookupSession``\n        :rtype: ``osid.workflow.OfficeLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeQuerySession) - a\n                ``OfficeQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeQuerySession``\n        :rtype: ``osid.workflow.OfficeQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeSearchSession) - a\n                ``OfficeSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeSearchSession``\n        :rtype: ``osid.workflow.OfficeSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeAdminSession) - a\n                ``OfficeAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeAdminSession``\n        :rtype: ``osid.workflow.OfficeAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_receiver (osid.workflow.OfficeReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeNotificationSession) - a\n                ``OfficeNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``office_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_receiver: the notification callback\n        :type office_receiver: ``osid.workflow.OfficeReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeNotificationSession``\n        :rtype: ``osid.workflow.OfficeNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeReceiver", 
                     "var_name": "office_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeHierarchySession) - a\n                ``OfficeHierarchySession`` for offices", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``OfficeHierarchySession`` for offices\n        :rtype: ``osid.workflow.OfficeHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the office hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.workflow.OfficeHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for offices", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_office_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for offices\n        :rtype: ``osid.workflow.OfficeHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_office_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.workflow.OfficeHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``WorkflowBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.batch.WorkflowBatchProxyManager) - a\n                ``WorkflowbatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowbatchProxyManager``\n        :rtype: ``osid.workflow.batch.WorkflowBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.batch.WorkflowBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_workflow_rules_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``WorkflowRulesProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.rules.WorkflowRulesProxyManager) - a\n                ``WorkflowRulesProxyManager`` for offices", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_workflow_rules()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``WorkflowRulesProxyManager`` for offices\n        :rtype: ``osid.workflow.rules.WorkflowRulesProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_workflow_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_workflow_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.rules.WorkflowRulesProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessLookupSession", 
         "shortname": "ProcessLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Process`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_lookup_processes", 
            "use_comparative_process_view", 
            "use_plenary_process_view", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "use_active_process_view", 
            "use_any_status_process_view", 
            "get_process", 
            "get_processes_by_ids", 
            "get_processes_by_genus_type", 
            "get_processes_by_parent_genus_type", 
            "get_processes_by_record_type", 
            "get_processes_by_provider", 
            "get_processes"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_processes", 
               "doc": {
                  "headline": "Tests if this user can perform ``Process`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_process_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_process_view", 
               "doc": {
                  "headline": "A complete view of the ``Process`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include processes in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_active_process_view", 
               "doc": {
                  "headline": "Only active processes are returned from methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_status_process_view", 
               "doc": {
                  "headline": "Borth active and inactive processes are returned from methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_process", 
               "doc": {
                  "headline": "Gets the ``Process`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): ``Id`` of the ``Process``\n", 
               "return_doc": "        return: (osid.workflow.Process) - the process", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: ``Id`` of the ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the process\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_ids", 
               "doc": {
                  "headline": "Gets a ``ProcessList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned ``Process``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``process_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_ids: the list of ``Ids`` to retrieve\n        :type process_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Process`` list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``process_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "process_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ProcessList`` corresponding to the given process genus ``Type`` which does not include processes of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_genus_type (osid.type.Type): a process genus\n                type\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned ``Process``\n                list", 
               "error_doc": "        raise:  NullArgument - ``process_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_genus_type: a process genus type\n        :type process_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Process`` list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ProcessList`` corresponding to the given process genus ``Type`` and include any additional processes with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_genus_type (osid.type.Type): a process genus\n                type\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned ``Process``\n                list", 
               "error_doc": "        raise:  NullArgument - ``process_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_genus_type: a process genus type\n        :type process_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Process`` list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ProcessList`` containing the given process record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a process record\n                type\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned ``Process``\n                list", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_record_type: a process record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Process`` list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_provider", 
               "doc": {
                  "headline": "Gets a ``ProcessList`` from the given provider.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned ``Process``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Process`` list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes", 
               "doc": {
                  "headline": "Gets all ``Processes``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessList) - a list of ``Processes``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Processes``\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessQuerySession", 
         "shortname": "ProcessQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Process`` objects.", 
            "body": "    The search query is constructed using the ``ProcessQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include processes in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to processes in\n        this office\n\n    \n    Process may have a query record indicated by their respective record\n    types. The query record is accessed via the ``ProcessQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_search_processes", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "get_process_query", 
            "get_processes_by_query"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_processes", 
               "doc": {
                  "headline": "Tests if this user can perform ``Process`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include processes in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_process_query", 
               "doc": {
                  "headline": "Gets a process query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {}
            }, 
            {
               "name": "get_processes_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Processes`` matching the given process query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_query (osid.workflow.ProcessQuery): the process\n                query\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the returned\n                ``ProcessList``", 
               "error_doc": "        raise:  NullArgument - ``process_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``process_query`` is not of this service", 
               "sphinx_param_doc": "        :param process_query: the process query\n        :type process_query: ``osid.workflow.ProcessQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ProcessList``\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``process_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessQuery", 
                     "var_name": "process_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessQuery"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessSearchSession", 
         "shortname": "ProcessSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Process`` objects.", 
            "body": "    The search query is constructed using the ``ProcessQuery``.\n\n    ``get_processs_by_query()`` is the basic search method and returns a\n    list of ``Processes``. A more advanced search may be performed with\n    ``getProcessesBySearch()``. It accepts a ``ProcessSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_processes_by_search()`` returns a ``ProcessSearchResults``\n    that can be used to access the resulting ``ProcessList`` or be used\n    to perform a search within the result set through ``ProcessSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include processes in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to processes in\n        this office\n\n    \n    Processes may have a query record indicated by their respective\n    record types. The query record is accessed via the ``ProcessQuery``."
         }, 
         "inherit_fullnames": [
            "osid.workflow.ProcessQuerySession"
         ], 
         "inherit_shortnames": [
            "ProcessQuerySession"
         ], 
         "inherit_pkg_names": [
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "workflow", 
               "name": "ProcessQuerySession"
            }
         ], 
         "method_names": [
            "get_process_search", 
            "get_process_search_order", 
            "get_processes_by_search", 
            "get_process_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_process_search", 
               "doc": {
                  "headline": "Gets a process search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessSearch) - the process search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process search\n        :rtype: ``osid.workflow.ProcessSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessSearch", 
               "errors": {}
            }, 
            {
               "name": "get_process_search_order", 
               "doc": {
                  "headline": "Gets a process search order.", 
                  "body": "        The ``ProcessSearchOrder`` is supplied to a ``ProcessSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessSearchOrder) - the process search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process search order\n        :rtype: ``osid.workflow.ProcessSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_processes_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_query (osid.workflow.ProcessQuery): the process\n                query\n        arg:    process_search (osid.workflow.ProcessSearch): the\n                process search\n", 
               "return_doc": "        return: (osid.workflow.ProcessSearchResults) - the process\n                search results", 
               "error_doc": "        raise:  NullArgument - ``process_query`` or ``process_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``process_query`` or ``process_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param process_query: the process query\n        :type process_query: ``osid.workflow.ProcessQuery``\n        :param process_search: the process search\n        :type process_search: ``osid.workflow.ProcessSearch``\n", 
               "sphinx_return_doc": "        :return: the process search results\n        :rtype: ``osid.workflow.ProcessSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_query`` or ``process_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``process_query`` or ``process_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessQuery", 
                     "var_name": "process_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.workflow.ProcessSearch", 
                     "var_name": "process_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessQuery", 
                  "osid.workflow.ProcessSearch"
               ], 
               "return_type": "osid.workflow.ProcessSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_from_inspector", 
               "doc": {
                  "headline": "Gets a process query from an inspector.", 
                  "body": "        The inspector is available from a ``ProcessSearchResults``."
               }, 
               "arg_doc": "        arg:    process_query_inspector\n                (osid.workflow.ProcessQueryInspector): a process query\n                inspector\n", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "        raise:  NullArgument - ``process_query_inspector`` is ``null``\n        raise:  Unsupported - ``process_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param process_query_inspector: a process query inspector\n        :type process_query_inspector: ``osid.workflow.ProcessQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``process_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessQueryInspector", 
                     "var_name": "process_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessQueryInspector"
               ], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessAdminSession", 
         "shortname": "ProcessAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Processes``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Process,`` a ``ProcessForm`` is requested using\n    ``get_process_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``ProcessForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``ProcessForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ProcessForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``ProcessForms`` are requested to the ``Process``\n    ``Id`` that is to be updated using ``getProcessFormForUpdate()``.\n    Similarly, the ``ProcessForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``ProcessForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Processes``. To unmap a ``Process``\n    from the current ``Office,`` the ``ProcessOfficeAssignmentSession``\n    should be used. These delete operations attempt to remove the\n    ``Process`` itself thus removing it from all known ``Office``\n    catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_create_processes", 
            "can_create_process_with_record_types", 
            "get_process_form_for_create", 
            "create_process", 
            "can_update_processes", 
            "get_process_form_for_update", 
            "update_process", 
            "can_delete_processes", 
            "delete_process", 
            "can_manage_process_aliases", 
            "alias_process", 
            "can_assign_competencies", 
            "add_competency", 
            "remove_competency", 
            "remove_competencies"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_processes", 
               "doc": {
                  "headline": "Tests if this user can create ``Process``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Process`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Process`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Process`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_process_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Process`` using the desired record types.", 
                  "body": "        While ``WorkflowManager.getProcessRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Process``.\n        Providing an empty array tests if a ``Process`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    process_record_types (osid.type.Type[]): array of\n                process record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Process`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param process_record_types: array of process record types\n        :type process_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Process`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "process_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_form_for_create", 
               "doc": {
                  "headline": "Gets the process form for creating new processes.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    process_record_types (osid.type.Type[]): array of\n                process record types\n", 
               "return_doc": "        return: (osid.workflow.ProcessForm) - the process form", 
               "error_doc": "        raise:  NullArgument - ``process_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param process_record_types: array of process record types\n        :type process_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the process form\n        :rtype: ``osid.workflow.ProcessForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "process_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.workflow.ProcessForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_process", 
               "doc": {
                  "headline": "Creates a new ``Process``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_form (osid.workflow.ProcessForm): the form for\n                this ``Process``\n", 
               "return_doc": "        return: (osid.workflow.Process) - the new ``Process``", 
               "error_doc": "        raise:  IllegalState - ``process_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``process_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``process_form`` did not originate from\n                ``get_process_form_for_create()``", 
               "sphinx_param_doc": "        :param process_form: the form for this ``Process``\n        :type process_form: ``osid.workflow.ProcessForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Process``\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``process_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``process_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``process_form`` did not originate from ``get_process_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessForm", 
                     "var_name": "process_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessForm"
               ], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_processes", 
               "doc": {
                  "headline": "Tests if this user can update ``Processes``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Process`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Process`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Process`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_form_for_update", 
               "doc": {
                  "headline": "Gets the process form for updating an existing process.", 
                  "body": "        A new process form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n", 
               "return_doc": "        return: (osid.workflow.ProcessForm) - the process form", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the process form\n        :rtype: ``osid.workflow.ProcessForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_process", 
               "doc": {
                  "headline": "Updates an existing process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_form (osid.workflow.ProcessForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``process_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``process_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``process_form`` did not originate from\n                ``get_process_form_for_update()``", 
               "sphinx_param_doc": "        :param process_form: the form containing the elements to be updated\n        :type process_form: ``osid.workflow.ProcessForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``process_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``process_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``process_form`` did not originate from ``get_process_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessForm", 
                     "var_name": "process_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_processes", 
               "doc": {
                  "headline": "Tests if this user can delete ``Processes``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Process`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Process`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Process`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_process", 
               "doc": {
                  "headline": "Deletes a ``Process``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n                to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process`` to remove\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_process_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Process``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Process`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Process`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_process", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Process`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Process`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another process, it is\n        reassigned to the given process ``Id``."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of a ``Process``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of a ``Process``\n        :type process_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_assign_competencies", 
               "doc": {
                  "headline": "Tests if this user can assign competencies to process.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known assigning a\n        competency will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        competency operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if competency assignment is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if competency assignment is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_competency", 
               "doc": {
                  "headline": "Adds a competency to a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the processId ``Id``\n        arg:    competency_id (osid.id.Id): the competency ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - competency already part of work\n        raise:  NotFound - ``competency_id`` or ``process_id`` is not\n                found\n        raise:  NullArgument - ``competency_id`` or ``process_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the processId ``Id``\n        :type process_id: ``osid.id.Id``\n        :param competency_id: the competency ``Id``\n        :type competency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- competency already part of work\n        :raise: ``NotFound`` -- ``competency_id`` or ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``competency_id`` or ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "competency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_competency", 
               "doc": {
                  "headline": "Removes a competency from a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the process ``Id``\n        arg:    competency_id (osid.id.Id): the competency ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - competency is not part of process\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param competency_id: the competency ``Id``\n        :type competency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- competency is not part of process\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "competency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_competencies", 
               "doc": {
                  "headline": "Removes all competency from a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the process ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessNotificationSession", 
         "shortname": "ProcessNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Process`` objects in this ``Office``.", 
            "body": "    This also includes existing process that may appear or disappear due\n    to changes in the ``Office`` hierarchy, This session is intended for\n    consumers needing to synchronize their state with this service\n    without the use of polling. Notifications are cancelled when this\n    session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``ProcessLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_register_for_process_notifications", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "register_for_new_processes", 
            "register_for_changed_processes", 
            "register_for_changed_process", 
            "register_for_deleted_processes", 
            "register_for_deleted_process"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_process_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Process`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include process in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_processes", 
               "doc": {
                  "headline": "Register for notifications of new processes.", 
                  "body": "        ``ProcessReceiver.newProcess()`` is invoked when a new\n        ``Process`` appears in this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_processes", 
               "doc": {
                  "headline": "Registers for notification of updated processes.", 
                  "body": "        ``ProcessReceiver.changedProcess()`` is invoked when a process\n        in this office is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_process", 
               "doc": {
                  "headline": "Registers for notification of an updated process.", 
                  "body": "        ``ProcessReceiver.changedProcess()`` is invoked when the\n        specified process in this office is changed."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process`` to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_processes", 
               "doc": {
                  "headline": "Registers for notification of deleted processes.", 
                  "body": "        ``ProcessReceiver.deletedProcess()`` is invoked when a process\n        is deleted or removed from this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_process", 
               "doc": {
                  "headline": "Registers for notification of a deleted process.", 
                  "body": "        ``ProcessReceiver.deletedProcess()`` is invoked when the\n        specified process is deleted or removed from this office."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process`` to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessOfficeSession", 
         "shortname": "ProcessOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Process`` to ``Office`` workflows.", 
            "body": "    A ``Process`` may appear in multiple ``Office`` objects. Each office\n    may have its own authorizations governing who is allowed to look at\n    it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_process_office_mappings", 
            "use_comparative_process_office_view", 
            "use_plenary_process_office_view", 
            "get_process_ids_by_office", 
            "get_processes_by_office", 
            "get_process_ids_by_offices", 
            "get_processes_by_offices", 
            "get_office_ids_by_process", 
            "get_offices_by_process"
         ], 
         "methods": [
            {
               "name": "can_lookup_process_office_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of process/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_process_office_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_process_office_view", 
               "doc": {
                  "headline": "A complete view of the ``Process`` and ``Office`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_process_ids_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Process Ids`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related process ``Ids``", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related process ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Processes`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - list of related processes", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related processes\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_process_ids_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Process Ids`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of process ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of process ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_processes_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Processes`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - list of processes", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of processes\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_office_ids_by_process", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Ids`` mapped to a ``Process``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): ``Id`` of a ``Process``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: ``Id`` of a ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_process", 
               "doc": {
                  "headline": "Gets the ``Offices`` mapped to a ``Process``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): ``Id`` of a ``Process``\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: ``Id`` of a ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessOfficeAssignmentSession", 
         "shortname": "ProcessOfficeAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Process`` to ``Office`` mappings.", 
            "body": "    A ``Process`` may appear in multiple ``Office`` objects and removing\n    the last reference to a ``Process`` is the equivalent of deleting\n    it. Each ``Office`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Process`` to another ``Office`` is not a\n    copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_processes", 
            "can_assign_processes_to_office", 
            "get_assignable_office_ids", 
            "get_assignable_office_ids_for_process", 
            "assign_process_to_office", 
            "unassign_process_from_office"
         ], 
         "methods": [
            {
               "name": "can_assign_processes", 
               "doc": {
                  "headline": "Tests if this user can alter process/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_processes_to_office", 
               "doc": {
                  "headline": "Tests if this user can alter process/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_office_ids", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which any process can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_office_ids_for_process", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which a specific process can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` or ``process_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param process_id: the ``Id`` of the ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` or ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_process_to_office", 
               "doc": {
                  "headline": "Adds an existing ``Process`` to a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``process_id`` is already assigned to\n                ``office_id``\n        raise:  NotFound - ``process_id`` or ``office_id`` not found\n        raise:  NullArgument - ``process_id`` or ``office_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process``\n        :type process_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``process_id`` is already assigned to ``office_id``\n        :raise: ``NotFound`` -- ``process_id`` or ``office_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_process_from_office", 
               "doc": {
                  "headline": "Removes a ``Process`` from a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` or ``office_id`` not found or\n                ``process_id`` is not assigned to ``office_id``\n        raise:  NullArgument - ``process_id`` or ``office_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process``\n        :type process_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` or ``office_id`` not found or ``process_id`` is not assigned to ``office_id``\n        :raise: ``NullArgument`` -- ``process_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessSmartOfficeSession", 
         "shortname": "ProcessSmartOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``ProcessQuery`` can be retrieved from this session and mapped to\n    this ``Office`` to create a virtual collection of ``Processes``. The\n    process may be sequenced using the ``ProcessSearchOrder`` from this\n    session.\n\n    This ``Office`` has a default query that matches any process and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``ProcessQueryInspector``. The query may be\n    modified by converting the inspector back to a ``ProcessQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_manage_smart_offices", 
            "get_process_query", 
            "get_process_search_order", 
            "apply_process_query", 
            "inspect_process_query", 
            "apply_process_sequencing", 
            "get_process_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_offices", 
               "doc": {
                  "headline": "Tests if this user can manage smart offices.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart office management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart office management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_query", 
               "doc": {
                  "headline": "Gets a process query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {}
            }, 
            {
               "name": "get_process_search_order", 
               "doc": {
                  "headline": "Gets a process search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessSearchOrder) - the process search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process search order\n        :rtype: ``osid.workflow.ProcessSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_process_query", 
               "doc": {
                  "headline": "Applies a process query to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_query (osid.workflow.ProcessQuery): the process\n                query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``process_query`` not of this service", 
               "sphinx_param_doc": "        :param process_query: the process query\n        :type process_query: ``osid.workflow.ProcessQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``process_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessQuery", 
                     "var_name": "process_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_process_query", 
               "doc": {
                  "headline": "Gets a process query inspector for this office.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQueryInspector) - the process\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query inspector\n        :rtype: ``osid.workflow.ProcessQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_process_sequencing", 
               "doc": {
                  "headline": "Applies a process search order to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_search_order (osid.workflow.ProcessSearchOrder):\n                the process search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``process_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param process_search_order: the process search order\n        :type process_search_order: ``osid.workflow.ProcessSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``process_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessSearchOrder", 
                     "var_name": "process_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_from_inspector", 
               "doc": {
                  "headline": "Gets a process query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_query_inspector\n                (osid.workflow.ProcessQueryInspector): a process query\n                inspector\n", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "        raise:  NullArgument - ``process_query_inspector`` is ``null``\n        raise:  Unsupported - ``process_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param process_query_inspector: a process query inspector\n        :type process_query_inspector: ``osid.workflow.ProcessQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``process_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessQueryInspector", 
                     "var_name": "process_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessQueryInspector"
               ], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepLookupSession", 
         "shortname": "StepLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Step`` objects.", 
            "body": "    The ``Step`` represents a fixed connection between two\n    ``Availabilities``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * isolated office view: All step methods in this session operate,\n        retrieve and pertain to steps defined explicitly in the current\n        office. Using an isolated view is useful for managing ``Steps``\n        with the ``StepAdminSession.``\n      * federated office view: All step methods in this session operate,\n        retrieve and pertain to all steps defined in this office and any\n        other steps implicitly available in this office through office\n        inheritence.\n      * active step view: active steps are returned from methods in this\n        session\n      * any status step view: active and inactive steps are returned\n        from methods in this session\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. The methods ``use_federated_office_view()`` and\n    ``use_isolated_office_view()`` behave as a radio group and one\n    should be selected before invoking any lookup methods."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_lookup_steps", 
            "use_comparative_step_view", 
            "use_plenary_step_view", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "use_active_step_view", 
            "use_any_status_step_view", 
            "get_step", 
            "get_steps_by_ids", 
            "get_steps_by_genus_type", 
            "get_steps_by_parent_genus_type", 
            "get_steps_by_record_type", 
            "get_steps_by_provider", 
            "get_steps_for_process", 
            "get_steps_by_state", 
            "get_steps"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_steps", 
               "doc": {
                  "headline": "Tests if this user can perform ``Step`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_step_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_step_view", 
               "doc": {
                  "headline": "A complete view of the ``Step`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include steps in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_active_step_view", 
               "doc": {
                  "headline": "Only active steps are returned from methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_status_step_view", 
               "doc": {
                  "headline": "Borth active and inactive steps are returned from methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_step", 
               "doc": {
                  "headline": "Gets the ``Step`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): ``Id`` of the ``Step``\n", 
               "return_doc": "        return: (osid.workflow.Step) - the step", 
               "error_doc": "        raise:  NotFound - ``step_id`` not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: ``Id`` of the ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the step\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_ids", 
               "doc": {
                  "headline": "Gets a ``StepList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``step_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_ids: the list of ``Ids`` to retrieve\n        :type step_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``step_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "step_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``StepList`` corresponding to the given step genus ``Type`` which does not include steps of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_genus_type (osid.type.Type): a step genus type\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``step_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_genus_type: a step genus type\n        :type step_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``StepList`` corresponding to the given step genus ``Type`` and include any additional steps with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_genus_type (osid.type.Type): a step genus type\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``step_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_genus_type: a step genus type\n        :type step_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_record_type", 
               "doc": {
                  "headline": "Gets a ``StepList`` containing the given step record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a step record type\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_record_type: a step record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_provider", 
               "doc": {
                  "headline": "Gets a ``StepList`` from the given provider.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_for_process", 
               "doc": {
                  "headline": "Gets a list of steps by process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_state", 
               "doc": {
                  "headline": "Gets a list of steps for which the given state is valid.", 
                  "body": "        The steps returned are the states specified in the previous step\n        or the process.\n\n        In plenary mode, the returned list contains all known steps or\n        an error results. Otherwise, the returned list may contain only\n        those steps that are accessible through this session.\n        \n        In active mode, steps are returned that are currently active. In\n        any status mode, active and inactive steps are returned."
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): a stateId ``Id``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NullArgument - ``state_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param state_id: a stateId ``Id``\n        :type state_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``state_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps", 
               "doc": {
                  "headline": "Gets all ``Steps``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepList) - a list of ``Steps``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Steps``\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepQuerySession", 
         "shortname": "StepQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Step`` objects.", 
            "body": "    The search query is constructed using the ``StepQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include steps in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to steps in this\n        office\n\n    \n    Steps may have a query record indicated by their respective record\n    types. The query record is accessed via the ``StepQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_search_steps", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "get_step_query", 
            "get_steps_by_query"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_steps", 
               "doc": {
                  "headline": "Tests if this user can perform ``Step`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include steps in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_step_query", 
               "doc": {
                  "headline": "Gets a step query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {}
            }, 
            {
               "name": "get_steps_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Steps`` matching the given step query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_query (osid.workflow.StepQuery): the step query\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``StepList``", 
               "error_doc": "        raise:  NullArgument - ``step_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``step_query`` is not of this service", 
               "sphinx_param_doc": "        :param step_query: the step query\n        :type step_query: ``osid.workflow.StepQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``StepList``\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``step_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepQuery", 
                     "var_name": "step_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepQuery"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepSearchSession", 
         "shortname": "StepSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Step`` objects.", 
            "body": "    The search query is constructed using the ``StepQuery``.\n\n    ``get_steps_by_query()`` is the basic search method and returns a\n    list of ``Steps``. A more advanced search may be performed with\n    ``getStepsBySearch()``. It accepts a ``StepSearch`` in addition to\n    the query for the purpose of specifying additional options affecting\n    the entire search, such as ordering. ``get_steps_by_search()``\n    returns a ``StepSearchResults`` that can be used to access the\n    resulting ``StepList`` or be used to perform a search within the\n    result set through ``StepSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include steps in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to steps in this\n        office\n\n    \n    Steps may have a query record indicated by their respective record\n    types. The query record is accessed via the ``StepQuery``."
         }, 
         "inherit_fullnames": [
            "osid.workflow.StepQuerySession"
         ], 
         "inherit_shortnames": [
            "StepQuerySession"
         ], 
         "inherit_pkg_names": [
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "workflow", 
               "name": "StepQuerySession"
            }
         ], 
         "method_names": [
            "get_step_search", 
            "get_step_search_order", 
            "get_steps_by_search", 
            "get_step_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_step_search", 
               "doc": {
                  "headline": "Gets a step search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepSearch) - the step search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step search\n        :rtype: ``osid.workflow.StepSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepSearch", 
               "errors": {}
            }, 
            {
               "name": "get_step_search_order", 
               "doc": {
                  "headline": "Gets a step search order.", 
                  "body": "        The ``StepSearchOrder`` is supplied to a ``StepSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepSearchOrder) - the step search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step search order\n        :rtype: ``osid.workflow.StepSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_steps_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_query (osid.workflow.StepQuery): the step query\n        arg:    step_search (osid.workflow.StepSearch): the step search\n", 
               "return_doc": "        return: (osid.workflow.StepSearchResults) - the step search\n                results", 
               "error_doc": "        raise:  NullArgument - ``step_query`` or ``step_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``step_query`` or ``step_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param step_query: the step query\n        :type step_query: ``osid.workflow.StepQuery``\n        :param step_search: the step search\n        :type step_search: ``osid.workflow.StepSearch``\n", 
               "sphinx_return_doc": "        :return: the step search results\n        :rtype: ``osid.workflow.StepSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_query`` or ``step_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``step_query`` or ``step_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepQuery", 
                     "var_name": "step_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.workflow.StepSearch", 
                     "var_name": "step_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepQuery", 
                  "osid.workflow.StepSearch"
               ], 
               "return_type": "osid.workflow.StepSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_from_inspector", 
               "doc": {
                  "headline": "Gets a step query from an inspector.", 
                  "body": "        The inspector is available from a ``StepSearchResults``."
               }, 
               "arg_doc": "        arg:    step_query_inspector (osid.workflow.StepQueryInspector):\n                a step query inspector\n", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  NullArgument - ``step_query_inspector`` is ``null``\n        raise:  Unsupported - ``step_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param step_query_inspector: a step query inspector\n        :type step_query_inspector: ``osid.workflow.StepQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``step_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepQueryInspector", 
                     "var_name": "step_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepQueryInspector"
               ], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepAdminSession", 
         "shortname": "StepAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Steps``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Step,`` a ``StepForm`` is requested using\n    ``get_step_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``StepForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``StepForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``StepForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``StepForms`` are requested to the ``Step``  ``Id``\n    that is to be updated using ``getStepFormForUpdate()``. Similarly,\n    the ``StepForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``StepForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Steps``. To unmap a ``Step`` from the\n    current ``Office,`` the ``StepOfficeAssignmentSession`` should be\n    used. These delete operations attempt to remove the ``Step`` itself\n    thus removing it from all known ``Office`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_create_steps", 
            "can_create_step_with_record_types", 
            "get_step_form_for_create", 
            "create_step", 
            "can_update_steps", 
            "get_step_form_for_update", 
            "update_step", 
            "can_delete_steps", 
            "delete_step", 
            "can_manage_step_aliases", 
            "alias_step"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_steps", 
               "doc": {
                  "headline": "Tests if this user can create ``Steps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Step``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Step`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Step`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_step_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Step`` using the desired record types.", 
                  "body": "        While ``WorkflowManager.getStepRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Step``.\n        Providing an empty array tests if a ``Step`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    step_record_types (osid.type.Type[]): array of step\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Step`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``step_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param step_record_types: array of step record types\n        :type step_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Step`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "step_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_form_for_create", 
               "doc": {
                  "headline": "Gets the step form for creating new steps.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    step_record_types (osid.type.Type[]): array of step\n                record types\n", 
               "return_doc": "        return: (osid.workflow.StepForm) - the step form", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``step_record_types``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param step_record_types: array of step record types\n        :type step_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the step form\n        :rtype: ``osid.workflow.StepForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``step_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "step_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.workflow.StepForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_step", 
               "doc": {
                  "headline": "Creates a new ``Step``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_form (osid.workflow.StepForm): the form for this\n                ``Step``\n", 
               "return_doc": "        return: (osid.workflow.Step) - the new ``Step``", 
               "error_doc": "        raise:  IllegalState - ``step_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``step_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``step_form`` did not originate from\n                ``get_step_form_for_create()``", 
               "sphinx_param_doc": "        :param step_form: the form for this ``Step``\n        :type step_form: ``osid.workflow.StepForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Step``\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``step_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``step_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``step_form`` did not originate from ``get_step_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepForm", 
                     "var_name": "step_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepForm"
               ], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_steps", 
               "doc": {
                  "headline": "Tests if this user can update ``Steps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Step``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer update\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Step`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Step`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_form_for_update", 
               "doc": {
                  "headline": "Gets the step form for updating an existing step.", 
                  "body": "        A new step form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step``\n", 
               "return_doc": "        return: (osid.workflow.StepForm) - the step form", 
               "error_doc": "        raise:  NotFound - ``step_id`` is not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the step form\n        :rtype: ``osid.workflow.StepForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` is not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_step", 
               "doc": {
                  "headline": "Updates an existing step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_form (osid.workflow.StepForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``step_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``step_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``step_form`` did not originate from\n                ``get_step_form_for_update()``", 
               "sphinx_param_doc": "        :param step_form: the form containing the elements to be updated\n        :type step_form: ``osid.workflow.StepForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``step_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``step_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``step_form`` did not originate from ``get_step_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepForm", 
                     "var_name": "step_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_steps", 
               "doc": {
                  "headline": "Tests if this user can delete ``Steps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Step``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer delete\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Step`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Step`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_step", 
               "doc": {
                  "headline": "Deletes a ``Step``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``step_id`` not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step`` to remove\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_step_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Steps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Step`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Step`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_step", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Step`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Step`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another step, it is\n        reassigned to the given step ``Id``."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of a ``Step``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``step_id`` not found\n        raise:  NullArgument - ``step_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of a ``Step``\n        :type step_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``step_id`` not found\n        :raise: ``NullArgument`` -- ``step_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepNotificationSession", 
         "shortname": "StepNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Step`` objects in this ``Office``.", 
            "body": "    This also includes existing steps that may appear or disappear due\n    to changes in the ``Office`` hierarchy, This session is intended for\n    consumers needing to synchronize their state with this service\n    without the use of polling. Notifications are cancelled when this\n    session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``StepLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_register_for_step_notifications", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "register_for_new_steps", 
            "register_for_new_steps_for_process", 
            "register_for_changed_steps", 
            "register_for_changed_steps_for_process", 
            "register_for_changed_step", 
            "register_for_deleted_steps", 
            "register_for_deleted_steps_for_process", 
            "register_for_deleted_step"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_step_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Step`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include steps in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_steps", 
               "doc": {
                  "headline": "Register for notifications of new steps.", 
                  "body": "        ``StepReceiver.newStep()`` is invoked when a new ``Step``\n        appears in this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_steps_for_process", 
               "doc": {
                  "headline": "Register for notifications of new steps in the given process ``Id``.", 
                  "body": "        ``StepReceiver.newStep()`` is invoked when a new ``Step`` is\n        created."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the process to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the process to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_steps", 
               "doc": {
                  "headline": "Registers for notification of updated steps.", 
                  "body": "        ``StepReceiver.changedStep()`` is invoked when a step in this\n        office is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_steps_for_process", 
               "doc": {
                  "headline": "Register for notifications of updated steps for the given process ``Id``.", 
                  "body": "        ``StepReceiver.changedStep()`` is invoked when a step in this\n        office is changed."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the process to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the process to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_step", 
               "doc": {
                  "headline": "Registers for notification of an updated step.", 
                  "body": "        ``StepReceiver.changedStep()`` is invoked when the specified\n        step in this office is changed."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step`` to monitor\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_steps", 
               "doc": {
                  "headline": "Registers for notification of deleted steps.", 
                  "body": "        ``StepReceiver.deletedStep()`` is invoked when a step is deleted\n        or removed from this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_steps_for_process", 
               "doc": {
                  "headline": "Register for notifications of deleted steps for the given process ``Id``.", 
                  "body": "        ``StepReceiver.deletedStep()`` is invoked when a step in this\n        office is removed or deleted."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the process to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the process to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_step", 
               "doc": {
                  "headline": "Registers for notification of a deleted step.", 
                  "body": "        ``StepReceiver.deletedStep()`` is invoked when the specified\n        step is deleted or removed from this office."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step`` to monitor\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepOfficeSession", 
         "shortname": "StepOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Step`` to ``Office`` workflows.", 
            "body": "    A ``Step`` may appear in multiple ``Office`` objects. Each office\n    may have its own authorizations governing who is allowed to look at\n    it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_step_office_mappings", 
            "use_comparative_step_office_view", 
            "use_plenary_step_office_view", 
            "get_step_ids_by_office", 
            "get_stepes_by_office", 
            "get_step_ids_by_offices", 
            "get_steps_by_offices", 
            "get_office_ids_by_step", 
            "get_offices_by_step"
         ], 
         "methods": [
            {
               "name": "can_lookup_step_office_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of step/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_step_office_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_step_office_view", 
               "doc": {
                  "headline": "A complete view of the ``Step`` and ``Office`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_step_ids_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Step Ids`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related step ``Ids``", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related step ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_stepes_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Steps`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - list of related steps", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related steps\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_step_ids_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Step Ids`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of step ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of step ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_steps_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Steps`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - list of steps", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of steps\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_office_ids_by_step", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Ids`` mapped to a ``Step``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): ``Id`` of a ``Step``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``step_id`` is not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: ``Id`` of a ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` is not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_step", 
               "doc": {
                  "headline": "Gets the ``Offices`` mapped to a ``Step``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): ``Id`` of a ``Step``\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``step_id`` is not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: ``Id`` of a ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` is not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepOfficeAssignmentSession", 
         "shortname": "StepOfficeAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Step`` to ``Office`` mappings.", 
            "body": "    A ``Step`` may appear in multiple ``Office`` objects and removing\n    the last reference to a ``Step`` is the equivalent of deleting it.\n    Each ``Office`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Step`` to another ``Office`` is not a copy\n    operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_stepes", 
            "can_assign_stepes_to_office", 
            "get_assignable_office_ids", 
            "get_assignable_office_ids_for_step", 
            "assign_step_to_office", 
            "unassign_step_from_office"
         ], 
         "methods": [
            {
               "name": "can_assign_stepes", 
               "doc": {
                  "headline": "Tests if this user can alter step/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_stepes_to_office", 
               "doc": {
                  "headline": "Tests if this user can alter step/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_office_ids", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which any step can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_office_ids_for_step", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which a specific step can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` or ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param step_id: the ``Id`` of the ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` or ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_step_to_office", 
               "doc": {
                  "headline": "Adds an existing ``Step`` to a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``step_id`` is already assigned to\n                ``office_id``\n        raise:  NotFound - ``step_id`` or ``office_id`` not found\n        raise:  NullArgument - ``step_id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step``\n        :type step_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``step_id`` is already assigned to ``office_id``\n        :raise: ``NotFound`` -- ``step_id`` or ``office_id`` not found\n        :raise: ``NullArgument`` -- ``step_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_step_from_office", 
               "doc": {
                  "headline": "Removes a ``Step`` from a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``step_id`` or ``office_id`` not found or\n                ``step_id`` is not assigned to ``office_id``\n        raise:  NullArgument - ``step_id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step``\n        :type step_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` or ``office_id`` not found or ``step_id`` is not assigned to ``office_id``\n        :raise: ``NullArgument`` -- ``step_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepSmartOfficeSession", 
         "shortname": "StepSmartOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``StepQuery`` can be retrieved from this session and mapped to\n    this ``Office`` to create a virtual collection of ``Steps``. The\n    step may be sequenced using the ``StepSearchOrder`` from this\n    session.\n\n    This ``Office`` has a default query that matches any step and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``StepQueryInspector``. The query may be\n    modified by converting the inspector back to a ``StepQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_manage_smart_offices", 
            "get_step_query", 
            "get_step_search_order", 
            "apply_step_query", 
            "inspect_step_query", 
            "apply_step_sequencing", 
            "get_step_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_offices", 
               "doc": {
                  "headline": "Tests if this user can manage smart offices.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart office management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart office management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_query", 
               "doc": {
                  "headline": "Gets a step query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {}
            }, 
            {
               "name": "get_step_search_order", 
               "doc": {
                  "headline": "Gets a step search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepSearchOrder) - the step search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step search order\n        :rtype: ``osid.workflow.StepSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_step_query", 
               "doc": {
                  "headline": "Applies a step query to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_query (osid.workflow.StepQuery): the step query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``step_query`` not of this service", 
               "sphinx_param_doc": "        :param step_query: the step query\n        :type step_query: ``osid.workflow.StepQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``step_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepQuery", 
                     "var_name": "step_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_step_query", 
               "doc": {
                  "headline": "Gets a step query inspector for this office.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the step query\n                inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query inspector\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_step_sequencing", 
               "doc": {
                  "headline": "Applies a step search order to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_search_order (osid.workflow.StepSearchOrder): the\n                step search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``step_search_order`` not of this service", 
               "sphinx_param_doc": "        :param step_search_order: the step search order\n        :type step_search_order: ``osid.workflow.StepSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``step_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepSearchOrder", 
                     "var_name": "step_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_from_inspector", 
               "doc": {
                  "headline": "Gets a step query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_query_inspector (osid.workflow.StepQueryInspector):\n                a step query inspector\n", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  NullArgument - ``step_query_inspector`` is ``null``\n        raise:  Unsupported - ``step_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param step_query_inspector: a step query inspector\n        :type step_query_inspector: ``osid.workflow.StepQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``step_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepQueryInspector", 
                     "var_name": "step_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepQueryInspector"
               ], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkLookupSession", 
         "shortname": "WorkLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Work`` objects.", 
            "body": "    The ``Work`` represents a fixed connection between two\n    ``Availabilities``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * isolated office view: All work methods in this session operate,\n        retrieve and pertain to works defined explicitly in the current\n        office. Using an isolated view is useful for managing ``Works``\n        with the ``WorkAdminSession.``\n      * federated office view: All work methods in this session operate,\n        retrieve and pertain to all works defined in this office and any\n        other works implicitly available in this office through office\n        inheritence.\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. The methods ``use_federated_office_view()`` and\n    ``use_isolated_office_view()`` behave as a radio group and one\n    should be selected before invoking any lookup methods."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_lookup_works", 
            "use_comparative_work_view", 
            "use_plenary_work_view", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "get_work", 
            "get_works_by_ids", 
            "get_works_by_genus_type", 
            "get_works_by_parent_genus_type", 
            "get_works_by_record_type", 
            "get_works"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_works", 
               "doc": {
                  "headline": "Tests if this user can perform ``Work`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_work_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_work_view", 
               "doc": {
                  "headline": "A complete view of the ``Work`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include works in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_work", 
               "doc": {
                  "headline": "Gets the ``Work`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Work`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Work`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): ``Id`` of the ``Work``\n", 
               "return_doc": "        return: (osid.workflow.Work) - the work", 
               "error_doc": "        raise:  NotFound - ``work_id`` not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: ``Id`` of the ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the work\n        :rtype: ``osid.workflow.Work``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.Work", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_ids", 
               "doc": {
                  "headline": "Gets a ``WorkList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the works\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Works`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    work_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``work_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_ids: the list of ``Ids`` to retrieve\n        :type work_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``work_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "work_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``WorkList`` corresponding to the given work genus ``Type`` which does not include works of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known works or\n        an error results. Otherwise, the returned list may contain only\n        those works that are accessible through this session."
               }, 
               "arg_doc": "        arg:    work_genus_type (osid.type.Type): a work genus type\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` list", 
               "error_doc": "        raise:  NullArgument - ``work_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_genus_type: a work genus type\n        :type work_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``WorkList`` corresponding to the given work genus ``Type`` and include any additional works with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known works or\n        an error results. Otherwise, the returned list may contain only\n        those works that are accessible through this session"
               }, 
               "arg_doc": "        arg:    work_genus_type (osid.type.Type): a work genus type\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` list", 
               "error_doc": "        raise:  NullArgument - ``work_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_genus_type: a work genus type\n        :type work_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_record_type", 
               "doc": {
                  "headline": "Gets a ``WorkList`` containing the given work record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known works or\n        an error results. Otherwise, the returned list may contain only\n        those works that are accessible through this session."
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a work record type\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` list", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_record_type: a work record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works", 
               "doc": {
                  "headline": "Gets all ``Works``.", 
                  "body": "        In plenary mode, the returned list contains all known works or\n        an error results. Otherwise, the returned list may contain only\n        those works that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkList) - a list of ``Works``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Works``\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkQuerySession", 
         "shortname": "WorkQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Work`` objects.", 
            "body": "    The search query is constructed using the ``WorkQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include works in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to works in this\n        office\n\n    \n    Works may have a query record indicated by their respective record\n    types. The query record is accessed via the ``WorkQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_search_works", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "get_work_query", 
            "get_works_by_query"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_works", 
               "doc": {
                  "headline": "Tests if this user can perform ``Work`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include works in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_work_query", 
               "doc": {
                  "headline": "Gets a work query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {}
            }, 
            {
               "name": "get_works_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Works`` matching the given work query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_query (osid.workflow.WorkQuery): the work query\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``WorkList``", 
               "error_doc": "        raise:  NullArgument - ``work_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``work_query`` is not of this service", 
               "sphinx_param_doc": "        :param work_query: the work query\n        :type work_query: ``osid.workflow.WorkQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``WorkList``\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``work_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkQuery", 
                     "var_name": "work_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkQuery"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkSearchSession", 
         "shortname": "WorkSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Work`` objects.", 
            "body": "    The search query is constructed using the ``WorkQuery``.\n\n    ``get_works_by_query()`` is the basic search method and returns a\n    list of ``Works``. A more advanced search may be performed with\n    ``getWorksBySearch()``. It accepts a ``WorkSearch`` in addition to\n    the query for the purpose of specifying additional options affecting\n    the entire search, such as ordering. ``get_works_by_search()``\n    returns a ``WorkSearchResults`` that can be used to access the\n    resulting ``WorkList`` or be used to perform a search within the\n    result set through ``WorkSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated office view: searches include works in offices of\n        which this office is an ancestor in the office hierarchy\n      * isolated office view: searches are restricted to works in this\n        office\n\n    \n    Works may have a query record indicated by their respective record\n    types. The query record is accessed via the ``WorkQuery``."
         }, 
         "inherit_fullnames": [
            "osid.workflow.WorkQuerySession"
         ], 
         "inherit_shortnames": [
            "WorkQuerySession"
         ], 
         "inherit_pkg_names": [
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "workflow", 
               "name": "WorkQuerySession"
            }
         ], 
         "method_names": [
            "get_work_search", 
            "get_work_search_order", 
            "get_works_by_search", 
            "get_work_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_work_search", 
               "doc": {
                  "headline": "Gets a work search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkSearch) - the work search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work search\n        :rtype: ``osid.workflow.WorkSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkSearch", 
               "errors": {}
            }, 
            {
               "name": "get_work_search_order", 
               "doc": {
                  "headline": "Gets a work search order.", 
                  "body": "        The ``WorkSearchOrder`` is supplied to a ``WorkSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkSearchOrder) - the work search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work search order\n        :rtype: ``osid.workflow.WorkSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_works_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_query (osid.workflow.WorkQuery): the work query\n        arg:    work_search (osid.workflow.WorkSearch): the work search\n", 
               "return_doc": "        return: (osid.workflow.WorkSearchResults) - the work search\n                results", 
               "error_doc": "        raise:  NullArgument - ``work_query`` or ``work_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``work_query`` or ``work_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param work_query: the work query\n        :type work_query: ``osid.workflow.WorkQuery``\n        :param work_search: the work search\n        :type work_search: ``osid.workflow.WorkSearch``\n", 
               "sphinx_return_doc": "        :return: the work search results\n        :rtype: ``osid.workflow.WorkSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_query`` or ``work_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``work_query`` or ``work_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkQuery", 
                     "var_name": "work_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.workflow.WorkSearch", 
                     "var_name": "work_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkQuery", 
                  "osid.workflow.WorkSearch"
               ], 
               "return_type": "osid.workflow.WorkSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_from_inspector", 
               "doc": {
                  "headline": "Gets a work query from an inspector.", 
                  "body": "        The inspector is available from a ``WorkSearchResults``."
               }, 
               "arg_doc": "        arg:    work_query_inspector (osid.workflow.WorkQueryInspector):\n                a work query inspector\n", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "        raise:  NullArgument - ``work_query_inspector`` is ``null``\n        raise:  Unsupported - ``work_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param work_query_inspector: a work query inspector\n        :type work_query_inspector: ``osid.workflow.WorkQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``work_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkQueryInspector", 
                     "var_name": "work_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkQueryInspector"
               ], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkAdminSession", 
         "shortname": "WorkAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Works``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Work,`` a ``WorkForm`` is requested using\n    ``get_work_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``WorkForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``WorkForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``WorkForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``WorkForms`` are requested to the ``Work``  ``Id``\n    that is to be updated using ``getWorkFormForUpdate()``. Similarly,\n    the ``WorkForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``WorkForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Works``. To unmap a ``Work`` from the\n    current ``Office,`` the ``WorkOfficeAssignmentSession`` should be\n    used. These delete operations attempt to remove the ``Work`` itself\n    thus removing it from all known ``Office`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_create_works", 
            "can_create_work_with_record_types", 
            "get_work_form_for_create", 
            "create_work", 
            "can_update_works", 
            "get_work_form_for_update", 
            "update_work", 
            "can_delete_works", 
            "delete_work", 
            "can_manage_work_aliases", 
            "alias_work", 
            "can_move_work", 
            "move_work", 
            "can_manage_work_status", 
            "complete_work", 
            "reopen_work"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_works", 
               "doc": {
                  "headline": "Tests if this user can create ``Works``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Work``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_work_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Work`` using the desired record types.", 
                  "body": "        While ``WorkflowManager.getWorkRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Work``.\n        Providing an empty array tests if a ``Work`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    work_record_types (osid.type.Type[]): array of work\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Work`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``work_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param work_record_types: array of work record types\n        :type work_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Work`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "work_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_form_for_create", 
               "doc": {
                  "headline": "Gets the work form for creating new works.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    work_record_types (osid.type.Type[]): array of work\n                record types\n", 
               "return_doc": "        return: (osid.workflow.WorkForm) - the work form", 
               "error_doc": "        raise:  NullArgument - ``work_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param work_record_types: array of work record types\n        :type work_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the work form\n        :rtype: ``osid.workflow.WorkForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "work_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.workflow.WorkForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_work", 
               "doc": {
                  "headline": "Creates a new ``Work``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_form (osid.workflow.WorkForm): the form for this\n                ``Work``\n", 
               "return_doc": "        return: (osid.workflow.Work) - the new ``Work``", 
               "error_doc": "        raise:  IllegalState - ``work_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``work_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``work_form`` did not originate from\n                ``get_work_form_for_create()``", 
               "sphinx_param_doc": "        :param work_form: the form for this ``Work``\n        :type work_form: ``osid.workflow.WorkForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Work``\n        :rtype: ``osid.workflow.Work``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``work_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``work_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``work_form`` did not originate from ``get_work_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkForm", 
                     "var_name": "work_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkForm"
               ], 
               "return_type": "osid.workflow.Work", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_works", 
               "doc": {
                  "headline": "Tests if this user can update ``Works``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Work``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer update\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_work_form_for_update", 
               "doc": {
                  "headline": "Gets the work form for updating an existing work.", 
                  "body": "        A new work form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work``\n", 
               "return_doc": "        return: (osid.workflow.WorkForm) - the work form", 
               "error_doc": "        raise:  NotFound - ``work_id`` is not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the work form\n        :rtype: ``osid.workflow.WorkForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_work", 
               "doc": {
                  "headline": "Updates an existing work.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_form (osid.workflow.WorkForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``work_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``work_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``work_form`` did not originate from\n                ``get_work_form_for_update()``", 
               "sphinx_param_doc": "        :param work_form: the form containing the elements to be updated\n        :type work_form: ``osid.workflow.WorkForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``work_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``work_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``work_form`` did not originate from ``get_work_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkForm", 
                     "var_name": "work_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_works", 
               "doc": {
                  "headline": "Tests if this user can delete ``Works``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Work``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer delete\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_work", 
               "doc": {
                  "headline": "Deletes a ``Work``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``work_id`` not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work`` to remove\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_work_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Works``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_work", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Work`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Work`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another work, it is\n        reassigned to the given work ``Id``."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of a ``Work``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``work_id`` not found\n        raise:  NullArgument - ``work_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of a ``Work``\n        :type work_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``work_id`` not found\n        :raise: ``NullArgument`` -- ``work_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_move_work", 
               "doc": {
                  "headline": "Tests if this user can move ``Work`` among process.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Work``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer move operations\n        to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` moving is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` moving is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "move_work", 
               "doc": {
                  "headline": "Moves work to another process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n        arg:    process_id (osid.id.Id): the new process ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - work already part of process\n        raise:  NotFound - ``process_id`` or ``work_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param process_id: the new process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- work already part of process\n        :raise: ``NotFound`` -- ``process_id`` or ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_work_status", 
               "doc": {
                  "headline": "Tests if this user can change ``Work`` status.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Work``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer status\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Work`` status is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Work`` status is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "complete_work", 
               "doc": {
                  "headline": "Marks work as complete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``work_id`` is not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "reopen_work", 
               "doc": {
                  "headline": "Marks work as incomplete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``work_id`` is not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkNotificationSession", 
         "shortname": "WorkNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Work`` objects in this ``Office``.", 
            "body": "    This also includes existing works that may appear or disappear due\n    to changes in the ``Office`` hierarchy, This session is intended for\n    consumers needing to synchronize their state with this service\n    without the use of polling. Notifications are cancelled when this\n    session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``WorkLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_register_for_work_notifications", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "register_for_new_works", 
            "register_for_changed_works", 
            "register_for_changed_work", 
            "register_for_deleted_works", 
            "register_for_deleted_work"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_work_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Work`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include works in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_works", 
               "doc": {
                  "headline": "Register for notifications of new works.", 
                  "body": "        ``WorkReceiver.newWork()`` is invoked when a new ``Work``\n        appears in this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_works", 
               "doc": {
                  "headline": "Registers for notification of updated works.", 
                  "body": "        ``WorkReceiver.changedWork()`` is invoked when a work in this\n        office is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_work", 
               "doc": {
                  "headline": "Registers for notification of an updated work.", 
                  "body": "        ``WorkReceiver.changedWork()`` is invoked when the specified\n        work in this office is changed."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work`` to monitor\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_works", 
               "doc": {
                  "headline": "Registers for notification of deleted works.", 
                  "body": "        ``WorkReceiver.deletedWork()`` is invoked when a work is deleted\n        or removed from this office."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_work", 
               "doc": {
                  "headline": "Registers for notification of a deleted work.", 
                  "body": "        ``WorkReceiver.deletedWork()`` is invoked when the specified\n        work is deleted or removed from this office."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work`` to monitor\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkOfficeSession", 
         "shortname": "WorkOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Work`` to ``Office`` workflows.", 
            "body": "    A ``Work`` may appear in multiple ``Office`` objects. Each office\n    may have its own authorizations governing who is allowed to look at\n    it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_work_office_availabilities", 
            "use_comparative_work_office_view", 
            "use_plenary_work_office_view", 
            "get_work_ids_by_office", 
            "get_works_by_office", 
            "get_work_ids_by_offices", 
            "get_works_by_offices", 
            "get_office_ids_by_work", 
            "get_offices_by_work"
         ], 
         "methods": [
            {
               "name": "can_lookup_work_office_availabilities", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of work/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_work_office_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_work_office_view", 
               "doc": {
                  "headline": "A complete view of the ``Work`` and ``Office`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_work_ids_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Work Ids`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related work ``Ids``", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related work ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_office", 
               "doc": {
                  "headline": "Gets the list of ``Works`` associated with a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - list of related works", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related works\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_work_ids_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Work Ids`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of work ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of work ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_works_by_offices", 
               "doc": {
                  "headline": "Gets the list of ``Work`` corresponding to a list of ``Offices``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of office ``Ids``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - list of works", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: list of office ``Ids``\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of works\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_office_ids_by_work", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Ids`` mapped to a ``Work``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): ``Id`` of a ``Work``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``work_id`` is not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: ``Id`` of a ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_work", 
               "doc": {
                  "headline": "Gets the ``Offices`` mapped to a ``Work``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): ``Id`` of a ``Work``\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - list of offices", 
               "error_doc": "        raise:  NotFound - ``work_id`` is not found\n        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: ``Id`` of a ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of offices\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkOfficeAssignmentSession", 
         "shortname": "WorkOfficeAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Works`` to ``Office`` mappings.", 
            "body": "    A ``Work`` may appear in multiple ``Office`` objects and removing\n    the last reference to a ``Work`` is the equivalent of deleting it.\n    Each ``Office`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Work`` to another ``Office`` is not a copy\n    operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_works", 
            "can_assign_works_to_office", 
            "get_assignable_office_ids", 
            "get_assignable_office_ids_for_work", 
            "assign_work_to_office", 
            "unassign_work_from_office"
         ], 
         "methods": [
            {
               "name": "can_assign_works", 
               "doc": {
                  "headline": "Tests if this user can alter work/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_works_to_office", 
               "doc": {
                  "headline": "Tests if this user can alter work/office mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (boolean) - ``false`` if workflow is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if workflow is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_office_ids", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which any work can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_office_ids_for_work", 
               "doc": {
                  "headline": "Gets a list of offices including and under the given office node in which a specific work can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable office ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``office_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param work_id: the ``Id`` of the ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_work_to_office", 
               "doc": {
                  "headline": "Adds an existing ``Work`` to a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``work_id`` is already assigned to\n                ``office_id``\n        raise:  NotFound - ``work_id`` or ``office_id`` not found\n        raise:  NullArgument - ``work_id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work``\n        :type work_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``work_id`` is already assigned to ``office_id``\n        :raise: ``NotFound`` -- ``work_id`` or ``office_id`` not found\n        :raise: ``NullArgument`` -- ``work_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_work_from_office", 
               "doc": {
                  "headline": "Removes a ``Work`` from a ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work``\n        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``work_id`` or ``office_id`` not found or\n                ``work_id`` not assigned to ``office_id``\n        raise:  NullArgument - ``work_id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work``\n        :type work_id: ``osid.id.Id``\n        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``work_id`` or ``office_id`` not found or ``work_id`` not assigned to ``office_id``\n        :raise: ``NullArgument`` -- ``work_id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkSmartOfficeSession", 
         "shortname": "WorkSmartOfficeSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``WorkQuery`` can be retrieved from this session and mapped to\n    this ``Office`` to create a virtual collection of ``Works``. The\n    works may be sequenced using the ``WorkSearchOrder`` from this\n    session.\n\n    This ``Office`` has a default query that matches any work and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``WorkQueryInspector``. The query may be\n    modified by converting the inspector back to a ``WorkQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_manage_smart_offices", 
            "get_work_query", 
            "get_work_search_order", 
            "apply_work_query", 
            "inspect_work_query", 
            "apply_work_sequencing", 
            "get_work_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_offices", 
               "doc": {
                  "headline": "Tests if this user can manage smart offices.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart office management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart office management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_work_query", 
               "doc": {
                  "headline": "Gets a work query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {}
            }, 
            {
               "name": "get_work_search_order", 
               "doc": {
                  "headline": "Gets a work search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkSearchOrder) - the work search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work search order\n        :rtype: ``osid.workflow.WorkSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_work_query", 
               "doc": {
                  "headline": "Applies a work query to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_query (osid.workflow.WorkQuery): the work query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``work_query`` not of this service", 
               "sphinx_param_doc": "        :param work_query: the work query\n        :type work_query: ``osid.workflow.WorkQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``work_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkQuery", 
                     "var_name": "work_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_work_query", 
               "doc": {
                  "headline": "Gets a work query inspector for this office.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQueryInspector) - the work query\n                inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query inspector\n        :rtype: ``osid.workflow.WorkQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_work_sequencing", 
               "doc": {
                  "headline": "Applies a work search order to this office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_search_order (osid.workflow.WorkSearchOrder): the\n                work search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``work_search_order`` not of this service", 
               "sphinx_param_doc": "        :param work_search_order: the work search order\n        :type work_search_order: ``osid.workflow.WorkSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``work_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkSearchOrder", 
                     "var_name": "work_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_from_inspector", 
               "doc": {
                  "headline": "Gets a work query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_query_inspector (osid.workflow.WorkQueryInspector):\n                a work query inspector\n", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "        raise:  NullArgument - ``work_query_inspector`` is ``null``\n        raise:  Unsupported - ``work_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param work_query_inspector: a work query inspector\n        :type work_query_inspector: ``osid.workflow.WorkQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``work_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkQueryInspector", 
                     "var_name": "work_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkQueryInspector"
               ], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowSession", 
         "shortname": "WorkflowSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for looking at a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_access_workflow", 
            "can_access_workflow_for_process", 
            "get_processes_for_work", 
            "get_step_for_work", 
            "get_work_at_step", 
            "get_suspended_work", 
            "get_suspended_work_at_step", 
            "get_canceled_work", 
            "get_canceled_work_by_date", 
            "get_statuses_for_work", 
            "get_status_for_work", 
            "get_statuses_for_works"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_workflow", 
               "doc": {
                  "headline": "Tests if this user can access a workflow.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if workflow initiation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if workflow initiation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_access_workflow_for_process", 
               "doc": {
                  "headline": "Tests if this user can access a workflow in a process.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process Id\n", 
               "return_doc": "        return: (boolean) - ``false`` if workflow initiation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: a process Id\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if workflow initiation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_processes_for_work", 
               "doc": {
                  "headline": "Gets the processes a work is in.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the ``Processes``", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the ``Processes``\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_step_for_work", 
               "doc": {
                  "headline": "Gets the step corresponding to a work in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.Step) - the returned ``Step``", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found or ``work_id`` is\n                not active in the process\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step``\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found or ``work_id`` is not active in the process\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_work_at_step", 
               "doc": {
                  "headline": "Getsall the work at a step in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` List", 
               "error_doc": "        raise:  NotFound - ``step_id`` is not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` List\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` is not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_suspended_work", 
               "doc": {
                  "headline": "Gets all the suspended work in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` List", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` List\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_suspended_work_at_step", 
               "doc": {
                  "headline": "Gets the suspended work at a step in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` List", 
               "error_doc": "        raise:  NotFound - ``step_id`` is not found\n        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` List\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``step_id`` is not found\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_canceled_work", 
               "doc": {
                  "headline": "Gets the work canceled in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` List", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` List\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_canceled_work_by_date", 
               "doc": {
                  "headline": "Gets the work canceled in a process within the given date range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` List", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NotFound - ``process_id`` not found\n        raise:  NullArgument - ``process_id, start`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` List\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NotFound`` -- ``process_id`` not found\n        :raise: ``NullArgument`` -- ``process_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_statuses_for_work", 
               "doc": {
                  "headline": "Gets the statuses of the work across all processes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the current list of\n                statuses", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the current list of statuses\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_status_for_work", 
               "doc": {
                  "headline": "Gets the status of a work in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEvent) - the status", 
               "error_doc": "        raise:  NotFound - ``process_id`` not found or ``work_id`` is\n                not active in the process\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the status\n        :rtype: ``osid.workflow.WorkflowEvent``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` not found or ``work_id`` is not active in the process\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEvent", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_statuses_for_works", 
               "doc": {
                  "headline": "Gets the status of a works in a process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_ids (osid.id.IdList): a list of work ``Ids``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the current list of\n                statuses", 
               "error_doc": "        raise:  NullArgument - ``process_id`` or ``work_ids`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_ids: a list of work ``Ids``\n        :type work_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the current list of statuses\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` or ``work_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "work_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowInitiationSession", 
         "shortname": "WorkflowInitiationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for initiating a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_initiate_workflow", 
            "can_initiate_workflow_for_process", 
            "get_available_work", 
            "start_workflow"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_initiate_workflow", 
               "doc": {
                  "headline": "Tests if this user can initiate a workflow.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if workflow initiation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if workflow initiation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_initiate_workflow_for_process", 
               "doc": {
                  "headline": "Tests if this user can initiate a workflow in a process.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (boolean) - ``false`` if workflow initiation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if workflow initiation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_available_work", 
               "doc": {
                  "headline": "Gets the list of available work for this workflow.", 
                  "body": "        Available work is ``Work`` that is compatible with this\n        ``Process`` but not currently part of this ``Process``."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkList) - the returned ``Work`` list", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found\n        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Work`` list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "start_workflow", 
               "doc": {
                  "headline": "Starts a work in the workflow at the initial step of the process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` or ``work_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` or ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowManagementSession", 
         "shortname": "WorkflowManagementSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for managing a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_manage_workflow", 
            "can_manage_workflow_for_process", 
            "suspend_work", 
            "resume_work", 
            "cancel_work"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_workflow", 
               "doc": {
                  "headline": "Tests if this user can manage a workflow.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if workflow management methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if workflow management methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_manage_workflow_for_process", 
               "doc": {
                  "headline": "Tests if this user can manage a workflow for a process.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (boolean) - ``false`` if workflow management methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if workflow management methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "suspend_work", 
               "doc": {
                  "headline": "Suspends a work in this process leaving it at its current step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` or ``work_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` or ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "resume_work", 
               "doc": {
                  "headline": "Resumes a work in this process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` or ``work_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` or ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "cancel_work", 
               "doc": {
                  "headline": "Cancels a work in this process removing it from the workflow.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` or ``work_id`` is not found\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` or ``work_id`` is not found\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ManualWorkflowSession", 
         "shortname": "ManualWorkflowSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for manually moving work through a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.workflow.WorkflowManagementSession"
         ], 
         "inherit_shortnames": [
            "WorkflowManagementSession"
         ], 
         "inherit_pkg_names": [
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "workflow", 
               "name": "WorkflowManagementSession"
            }
         ], 
         "method_names": [
            "can_operate_workflow", 
            "can_operate_workflow_for_process", 
            "advance_work", 
            "get_valid_next_steps_for_work", 
            "get_all_valid_steps_for_work", 
            "assign_work_to_step"
         ], 
         "methods": [
            {
               "name": "can_operate_workflow", 
               "doc": {
                  "headline": "Tests if this user can operate a workflow.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if workflow operation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if workflow operation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_operate_workflow_for_process", 
               "doc": {
                  "headline": "Tests if this user can operate a workflow.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer workflow\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (boolean) - ``false`` if workflow operation methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if workflow operation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "advance_work", 
               "doc": {
                  "headline": "Advances work to a next step in the workflow based on the work and the input conditions of the next steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found or ``work_id`` is\n                in process\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found or ``work_id`` is in process\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_valid_next_steps_for_work", 
               "doc": {
                  "headline": "Gets the valid next steps in this process in which the given work can be manually advanced.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found or ``work_id`` is\n                in process\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found or ``work_id`` is in process\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_all_valid_steps_for_work", 
               "doc": {
                  "headline": "Gets the all valid steps in this process the given work can be manually assigned and includes the steps previous to the work's current step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.StepList) - the returned ``Step`` list", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found or ``work_id`` is\n                in process\n        raise:  NullArgument - ``process_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Step`` list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found or ``work_id`` is in process\n        :raise: ``NullArgument`` -- ``process_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "assign_work_to_step", 
               "doc": {
                  "headline": "Manually assigns a work to a step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n        arg:    step_id (osid.id.Id): a step ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``process_id`` is not found or ``work_id`` or\n                ``step_id`` is not found in this process\n        raise:  NullArgument - ``process_id, work_id,`` or ``step_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``process_id`` is not found or ``work_id`` or ``step_id`` is not found in this process\n        :raise: ``NullArgument`` -- ``process_id, work_id,`` or ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowEventLookupSession", 
         "shortname": "WorkflowEventLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``WorkflowEvents``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "can_lookup_workflow_events", 
            "use_comparative_workflow_event_view", 
            "use_plenary_workflow_event_view", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "get_workflow_event", 
            "get_workflow_events_by_ids", 
            "get_workflow_events_by_genus_type", 
            "get_workflow_events_by_parent_genus_type", 
            "get_workflow_events_by_record_type", 
            "get_workflow_events_by_date", 
            "get_workflow_events_for_process", 
            "get_workflow_events_by_date_for_process", 
            "get_workflow_events_for_step", 
            "get_workflow_events_by_date_for_step", 
            "get_workflow_events_for_work", 
            "get_workflow_events_by_date_for_work", 
            "get_workflow_events_for_work_and_process", 
            "get_workflow_events_by_date_for_work_and_process", 
            "get_workflow_events_for_step_and_work", 
            "get_workflow_events_by_date_for_step_and_work", 
            "get_workflow_events_for_worker", 
            "get_workflow_events_by_date_for_worker", 
            "get_workflow_events_for_worker_and_process", 
            "get_workflow_events_by_date_for_worker_and_process", 
            "get_workflow_events"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_workflow_events", 
               "doc": {
                  "headline": "Tests if this user can look up workflow events.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing a step\n        sequence in a ``PermissionDenied``. This is intended as a hint\n        to an application that may opt not to offer lookup operations to\n        an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if workflow event lookups is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if workflow event lookups is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_workflow_event_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_workflow_event_view", 
               "doc": {
                  "headline": "A complete view of the ``WorkflowEvent`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include workflow events in offices which\n        are children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_workflow_event", 
               "doc": {
                  "headline": "Gets the ``WorkflowEvent`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``WorkflowEvent`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``WorkflowEvent`` and\n        retained for compatibility."
               }, 
               "arg_doc": "        arg:    workflow_event_id (osid.id.Id): ``Id`` of the\n                ``WorkflowEvent``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEvent) - the workflow event", 
               "error_doc": "        raise:  NotFound - ``workflow_event_id`` not found\n        raise:  NullArgument - ``workflow_event_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param workflow_event_id: ``Id`` of the ``WorkflowEvent``\n        :type workflow_event_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow event\n        :rtype: ``osid.workflow.WorkflowEvent``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``workflow_event_id`` not found\n        :raise: ``NullArgument`` -- ``workflow_event_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "workflow_event_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEvent", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_ids", 
               "doc": {
                  "headline": "Gets a ``WorkflowEventList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the workflow\n        events specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``WorkflowEvents`` may be omitted from the list and\n        may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    workflow_event_ids (osid.id.IdList): the list of ``Ids``\n                to retrieve\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the returned\n                ``WorkflowEvent`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``workflow_event_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param workflow_event_ids: the list of ``Ids`` to retrieve\n        :type workflow_event_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``WorkflowEvent`` list\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``workflow_event_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "workflow_event_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``WorkflowEventList`` corresponding to the given workflow event genus ``Type`` which does not include workflow events of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    workflow_event_genus_type (osid.type.Type): a workflow\n                event genus type\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the returned\n                ``WorkflowEvent`` list", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param workflow_event_genus_type: a workflow event genus type\n        :type workflow_event_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``WorkflowEvent`` list\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "workflow_event_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``WorkflowEventList`` corresponding to the given workflow event genus ``Type`` and include any additional workflow events with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    workflow_event_genus_type (osid.type.Type): a workflow\n                event genus type\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the returned\n                ``WorkflowEvent`` list", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param workflow_event_genus_type: a workflow event genus type\n        :type workflow_event_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``WorkflowEvent`` list\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "workflow_event_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_record_type", 
               "doc": {
                  "headline": "Gets a ``WorkflowEventList`` containing the given workflow event record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    workflow_event_record_type (osid.type.Type): a workflow\n                event record type\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the returned\n                ``WorkflowEvent`` list", 
               "error_doc": "        raise:  NullArgument - ``workflow_event_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param workflow_event_record_type: a workflow event record type\n        :type workflow_event_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``WorkflowEvent`` list\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``workflow_event_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "workflow_event_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date", 
               "doc": {
                  "headline": "Gets the entire workflow log within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_process", 
               "doc": {
                  "headline": "Gets the entire workflow log for a process.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_process", 
               "doc": {
                  "headline": "Gets the entire workflow log for this process within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``process_id, start,`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``process_id, start,`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_step", 
               "doc": {
                  "headline": "Gets the workflow log for a step.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_step", 
               "doc": {
                  "headline": "Gets the workflow log for a step within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``step_id, start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``step_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_work", 
               "doc": {
                  "headline": "Gets the workflow log for a work.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_work", 
               "doc": {
                  "headline": "Gets the workflow log for a work within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): a work ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``work_id, start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``work_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_work_and_process", 
               "doc": {
                  "headline": "Gets the workflow log for a work in a process.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_work_and_process", 
               "doc": {
                  "headline": "Gets the workflow log for a work in a process within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``work_id, start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``work_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_step_and_work", 
               "doc": {
                  "headline": "Gets the workflow log for a work in this process.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``step_id`` or ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` or ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_step_and_work", 
               "doc": {
                  "headline": "Gets the workflow log for a work in this process within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): a step ``Id``\n        arg:    work_id (osid.id.Id): a work ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``step_id, work_id, start`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: a step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param work_id: a work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``step_id, work_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_worker", 
               "doc": {
                  "headline": "Gets the workflow log by an agent in this process.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_worker", 
               "doc": {
                  "headline": "Gets the workflow log by the resource in this process within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``resource_id, start`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``resource_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_for_worker_and_process", 
               "doc": {
                  "headline": "Gets the workflow log by an agent in this process.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    process_id (osid.id.Id): a process ``Id``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``process_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events_by_date_for_worker_and_process", 
               "doc": {
                  "headline": "Gets the workflow log by the resource in this process within the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    process_id (osid.id.Id): a process ``Id``\n        arg:    start (osid.calendaring.DateTime): start range\n        arg:    end (osid.calendaring.DateTime): end range\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``resource_id, process_id, start`` or\n                ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param process_id: a process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param start: start range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``resource_id, process_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_workflow_events", 
               "doc": {
                  "headline": "Gets the entire workflow log.", 
                  "body": "        In plenary mode, the returned list contains all known workflow\n        events or an error results. Otherwise, the returned list may\n        contain only those workflow events that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowEventList) - the workflow events", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the workflow events\n        :rtype: ``osid.workflow.WorkflowEventList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowEventList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowEventNotificationSession", 
         "shortname": "WorkflowEventNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``WorkflowEvent`` objects in this ``Process``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_id", 
            "get_office", 
            "use_federated_office_view", 
            "use_isolated_office_view", 
            "can_register_for_workflow_event_notifications", 
            "register_for_new_workflow_events", 
            "register_for_new_workflow_events_for_process", 
            "register_for_new_workflow_events_for_step", 
            "register_for_new_workflow_events_for_work", 
            "register_for_new_workflow_events_for_worker"
         ], 
         "methods": [
            {
               "name": "get_office_id", 
               "doc": {
                  "headline": "Gets the ``Office``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Office Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Office Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "use_federated_office_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include events in offices which are\n        children of this office in the office hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_office_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this office only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_register_for_workflow_event_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``WorkflowEvent`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_workflow_events", 
               "doc": {
                  "headline": "Register for notifications of new workflow events.", 
                  "body": "        ``WorkflowEventReceiver.newWorkflowEvent()`` is invoked when a\n        new ``WorkflowEvent`` appears in this process."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_workflow_events_for_process", 
               "doc": {
                  "headline": "Register for notifications of new workflow events for the given process.", 
                  "body": "        ``WorkflowEventReceiver.newWorkflowEvent()`` is invoked when a\n        new ``WorkflowEvent`` appears in this process."
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the ``Process``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the ``Process`` to monitor\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_workflow_events_for_step", 
               "doc": {
                  "headline": "Register for notifications of new workflow events for the given step.", 
                  "body": "        ``WorkflowEventReceiver.newWorkflowEvent()`` is invoked when a\n        new ``WorkflowEvent`` appears in this process."
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the ``Step`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the ``Step`` to monitor\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_workflow_events_for_work", 
               "doc": {
                  "headline": "Register for notifications of new workflow events for the given work.", 
                  "body": "        ``WorkflowEventReceiver.newWorkflowEvent()`` is invoked when a\n        new ``WorkflowEvent`` appears in this process."
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the ``Work`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the ``Work`` to monitor\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_workflow_events_for_worker", 
               "doc": {
                  "headline": "Register for notifications of new workflow events for the given resource.", 
                  "body": "        ``WorkflowEventReceiver.newWorkflowEvent()`` is invoked when a\n        new ``WorkflowEvent`` appears in this process."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeLookupSession", 
         "shortname": "OfficeLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Office`` objects.", 
            "body": "    The ``Office`` represents a collection of processes and steps.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Offices`` it can access, without breaking execution.\n    However, an assessment may only be useful if all ``Offices``\n    referenced by it are available, and a test-taking application may\n    sacrifice some interoperability for the sake of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_offices", 
            "use_comparative_office_view", 
            "use_plenary_office_view", 
            "get_office", 
            "get_offices_by_ids", 
            "get_offices_by_genus_type", 
            "get_offices_by_parent_genus_type", 
            "get_offices_by_record_type", 
            "get_offices_by_provider", 
            "get_offices"
         ], 
         "methods": [
            {
               "name": "can_lookup_offices", 
               "doc": {
                  "headline": "Tests if this user can perform ``Office`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_office_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_office_view", 
               "doc": {
                  "headline": "A complete view of the ``Office`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Office`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to an ``Office`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.Office) - the office", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the office\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_ids", 
               "doc": {
                  "headline": "Gets an ``OfficeList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the offices\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Offices`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``Office``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``office_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_ids: the list of ``Ids`` to retrieve\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Office`` list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``office_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``OfficeList`` corresponding to the given office genus ``Type`` which does not include offices of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known offices or\n        an error results. Otherwise, the returned list may contain only\n        those offices that are accessible through this session."
               }, 
               "arg_doc": "        arg:    office_genus_type (osid.type.Type): an office genus type\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``Office``\n                list", 
               "error_doc": "        raise:  NullArgument - ``office_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_genus_type: an office genus type\n        :type office_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Office`` list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``OfficeList`` corresponding to the given office genus ``Type`` and include any additional offices with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known offices or\n        an error results. Otherwise, the returned list may contain only\n        those offices that are accessible through this session."
               }, 
               "arg_doc": "        arg:    office_genus_type (osid.type.Type): an office genus type\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``Office``\n                list", 
               "error_doc": "        raise:  NullArgument - ``office_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_genus_type: an office genus type\n        :type office_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Office`` list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_record_type", 
               "doc": {
                  "headline": "Gets an ``OfficeList`` containing the given office record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known offices or\n        an error results. Otherwise, the returned list may contain only\n        those offices that are accessible through this session."
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): an office record\n                type\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``Office``\n                list", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_record_type: an office record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Office`` list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices_by_provider", 
               "doc": {
                  "headline": "Gets an ``OfficeList`` from the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known offices or\n        an error results. Otherwise, the returned list may contain only\n        those offices that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``Office``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Office`` list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_offices", 
               "doc": {
                  "headline": "Gets all ``Offices``.", 
                  "body": "        In plenary mode, the returned list contains all known offices or\n        an error results. Otherwise, the returned list may contain only\n        those offices that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeList) - a list of ``Offices``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Offices``\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeQuerySession", 
         "shortname": "OfficeQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Office`` objects.", 
            "body": "    The search query is constructed using the ``OfficeQuery``.\n\n    Offices may have a query record indicated by their respective record\n    types. The query record is accessed via the ``OfficeQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_offices", 
            "get_office_query", 
            "get_offices_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_offices", 
               "doc": {
                  "headline": "Tests if this user can perform ``Office`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_office_query", 
               "doc": {
                  "headline": "Gets an office query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {}
            }, 
            {
               "name": "get_offices_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Offices`` matching the given office query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_query (osid.workflow.OfficeQuery): the office\n                query\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the returned ``OfficeList``", 
               "error_doc": "        raise:  NullArgument - ``office_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``office_query`` is not of this service", 
               "sphinx_param_doc": "        :param office_query: the office query\n        :type office_query: ``osid.workflow.OfficeQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``OfficeList``\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``office_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeQuery", 
                     "var_name": "office_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeQuery"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeSearchSession", 
         "shortname": "OfficeSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Office`` objects.", 
            "body": "    The search query is constructed using the ``OfficeQuery``.\n\n    ``get_offices_by_query()`` is the basic search method and returns a\n    list of ``Offices``. A more advanced search may be performed with\n    ``getOfficesBySearch()``. It accepts an ``OfficeSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_offices_by_search()`` returns an ``OfficeSearchResults`` that\n    can be used to access the resulting ``OfficeList`` or be used to\n    perform a search within the result set through ``OfficeSearch``.\n    \n    Offices may have a query record indicated by their respective record\n    types. The query record is accessed via the ``OfficeQuery``."
         }, 
         "inherit_fullnames": [
            "osid.workflow.OfficeQuerySession"
         ], 
         "inherit_shortnames": [
            "OfficeQuerySession"
         ], 
         "inherit_pkg_names": [
            "workflow"
         ], 
         "inheritance": [
            {
               "pkg_name": "workflow", 
               "name": "OfficeQuerySession"
            }
         ], 
         "method_names": [
            "get_office_search", 
            "get_office_search_order", 
            "get_offices_by_search", 
            "get_office_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_office_search", 
               "doc": {
                  "headline": "Gets an office search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeSearch) - the office search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office search\n        :rtype: ``osid.workflow.OfficeSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeSearch", 
               "errors": {}
            }, 
            {
               "name": "get_office_search_order", 
               "doc": {
                  "headline": "Gets an office search order.", 
                  "body": "        The ``OfficeSearchOrder`` is supplied to an ``OfficeSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeSearchOrder) - the office search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office search order\n        :rtype: ``osid.workflow.OfficeSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_offices_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_query (osid.workflow.OfficeQuery): the office\n                query\n        arg:    office_search (osid.workflow.OfficeSearch): the office\n                search\n", 
               "return_doc": "        return: (osid.workflow.OfficeSearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``office_query`` or ``office_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``office_query`` or ``office_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param office_query: the office query\n        :type office_query: ``osid.workflow.OfficeQuery``\n        :param office_search: the office search\n        :type office_search: ``osid.workflow.OfficeSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.workflow.OfficeSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_query`` or ``office_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``office_query`` or ``office_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeQuery", 
                     "var_name": "office_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.workflow.OfficeSearch", 
                     "var_name": "office_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeQuery", 
                  "osid.workflow.OfficeSearch"
               ], 
               "return_type": "osid.workflow.OfficeSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_query_from_inspector", 
               "doc": {
                  "headline": "Gets an office query from an inspector.", 
                  "body": "        The inspector is available from an ``OfficeSearchResults``."
               }, 
               "arg_doc": "        arg:    office_query_inspector\n                (osid.workflow.OfficeQueryInspector): an office query\n                inspector\n", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  NullArgument - ``office_query_inspector`` is ``null``\n        raise:  Unsupported - ``office_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param office_query_inspector: an office query inspector\n        :type office_query_inspector: ``osid.workflow.OfficeQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``office_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeQueryInspector", 
                     "var_name": "office_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeQueryInspector"
               ], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeAdminSession", 
         "shortname": "OfficeAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Offices``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Office,`` an ``OfficeForm`` is requested using\n    ``get_office_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``OfficeForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``OfficeForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``OfficeForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``OfficeForms`` are requested to the ``Office``  ``Id``\n    that is to be updated using ``getOfficeFormForUpdate()``. Similarly,\n    the ``OfficeForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``OfficeForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Offices``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_offices", 
            "can_create_office_with_record_types", 
            "get_office_form_for_create", 
            "create_office", 
            "can_update_offices", 
            "get_office_form_for_update", 
            "update_office", 
            "can_delete_offices", 
            "delete_office", 
            "can_manage_office_aliases", 
            "alias_office"
         ], 
         "methods": [
            {
               "name": "can_create_offices", 
               "doc": {
                  "headline": "Tests if this user can create ``Offices``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Office``. will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Office`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Office`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_office_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Office`` using the desired record types.", 
                  "body": "        While ``WorkflowManager.getOfficeRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Office``.\n        Providing an empty array tests if an ``Office`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    office_record_types (osid.type.Type[]): array of office\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Office`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``office_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param office_record_types: array of office record types\n        :type office_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Office`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "office_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_form_for_create", 
               "doc": {
                  "headline": "Gets the office form for creating new offices.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    office_record_types (osid.type.Type[]): array of office\n                record types\n", 
               "return_doc": "        return: (osid.workflow.OfficeForm) - the office form", 
               "error_doc": "        raise:  NullArgument - ``office_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param office_record_types: array of office record types\n        :type office_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the office form\n        :rtype: ``osid.workflow.OfficeForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "office_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.workflow.OfficeForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_office", 
               "doc": {
                  "headline": "Creates a new ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_form (osid.workflow.OfficeForm): the form for\n                this ``Office``\n", 
               "return_doc": "        return: (osid.workflow.Office) - the new ``Office``", 
               "error_doc": "        raise:  IllegalState - ``office_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``office_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``office_form`` did not originate from\n                ``get_office_form_for_create()``", 
               "sphinx_param_doc": "        :param office_form: the form for this ``Office``\n        :type office_form: ``osid.workflow.OfficeForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Office``\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``office_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``office_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``office_form`` did not originate from ``get_office_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeForm", 
                     "var_name": "office_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeForm"
               ], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_offices", 
               "doc": {
                  "headline": "Tests if this user can update ``Offices``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Office`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Office`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Office`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_office_form_for_update", 
               "doc": {
                  "headline": "Gets the office form for updating an existing office.", 
                  "body": "        A new office form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n", 
               "return_doc": "        return: (osid.workflow.OfficeForm) - the office form", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the office form\n        :rtype: ``osid.workflow.OfficeForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_office", 
               "doc": {
                  "headline": "Updates an existing office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_form (osid.workflow.OfficeForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``office_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``office_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``office_form`` did not originate from\n                ``get_office_form_for_update()``", 
               "sphinx_param_doc": "        :param office_form: the form containing the elements to be updated\n        :type office_form: ``osid.workflow.OfficeForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``office_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``office_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``office_form`` did not originate from ``get_office_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeForm", 
                     "var_name": "office_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_offices", 
               "doc": {
                  "headline": "Tests if this user can delete ``Offices``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Office`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Office`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Office`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_office", 
               "doc": {
                  "headline": "Deletes an ``Office``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office`` to remove\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_office_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Offices``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Office`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Office`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_office", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Office`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Office`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an ``Office``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an ``Office``\n        :type office_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeNotificationSession", 
         "shortname": "OfficeNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Office`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_office_notifications", 
            "register_for_new_offices", 
            "register_for_new_office_ancestors", 
            "register_for_new_office_descendants", 
            "register_for_changed_offices", 
            "register_for_changed_office", 
            "register_for_deleted_offices", 
            "register_for_deleted_office", 
            "register_for_deleted_office_ancestors", 
            "register_for_deleted_office_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_office_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Office`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_offices", 
               "doc": {
                  "headline": "Register for notifications of new offices.", 
                  "body": "        ``OfficeReceiver.newOffice()`` is invoked when a new ``Office``\n        is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_office_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified office in the office hierarchy.", 
                  "body": "        ``OfficeReceiver.newOfficeAncestor()`` is invoked when the\n        specified office experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the office to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the office to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_office_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified office in the office hierarchy.", 
                  "body": "        ``OfficeReceiver.newOfficeDescendant()`` is invoked when the\n        specified office experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the office to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the office to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_offices", 
               "doc": {
                  "headline": "Registers for notification of updated offices.", 
                  "body": "        ``OfficeReceiver.changedOffice()`` is invoked when an office is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_office", 
               "doc": {
                  "headline": "Registers for notification of an updated office.", 
                  "body": "        ``OfficeReceiver.changedOffice()`` is invoked when the specified\n        office is changed."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the Id of the ``Office`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the Id of the ``Office`` to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_offices", 
               "doc": {
                  "headline": "Registers for notification of deleted offices.", 
                  "body": "        ``OfficeReceiver.deletedOffice()`` is invoked when an office is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_office", 
               "doc": {
                  "headline": "Registers for notification of a deleted office.", 
                  "body": "        ``OfficeReceiver.deletedOffice()`` is invoked when the specified\n        office is deleted."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office`` to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_office_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified office in the office hierarchy.", 
                  "body": "        ``OfficeReceiver.deletedOfficeAncestor()`` is invoked when the\n        specified office experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the office to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the office to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_office_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified office in the office hierarchy.", 
                  "body": "        ``OfficeReceiver.deletedOfficeDescednant()`` is invoked when the\n        specified office experiences a removal of one of its\n        descdendents."
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the office to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the office to monitor\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeHierarchySession", 
         "shortname": "OfficeHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Office`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Office``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_offices()`` and ``getChildOffices()``. To relate these\n    ``Ids`` to another OSID, ``get_office_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Office`` available in the Workflow OSID is known to this hierarchy\n    but does not appear in the hierarchy traversal until added as a root\n    availability or a child of another availability.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_offices()`` or ``get_child_offices()`` in\n    lieu of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized stepways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative office view: office elements may be silently omitted\n        or re-ordered\n      * plenary office view: provides a complete set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_hierarchy_id", 
            "get_office_hierarchy", 
            "can_access_office_hierarchy", 
            "use_comparative_office_view", 
            "use_plenary_office_view", 
            "get_root_office_ids", 
            "get_root_offices", 
            "has_parent_offices", 
            "is_parent_of_office", 
            "get_parent_office_ids", 
            "get_parent_offices", 
            "is_ancestor_of_office", 
            "has_child_offices", 
            "is_child_of_office", 
            "get_child_office_ids", 
            "get_child_offices", 
            "is_descendant_of_office", 
            "get_office_node_ids", 
            "get_office_nodes"
         ], 
         "methods": [
            {
               "name": "get_office_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_office_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_office_view", 
               "doc": {
                  "headline": "The returns from the office methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_office_view", 
               "doc": {
                  "headline": "A complete view of the ``Offices`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_office_ids", 
               "doc": {
                  "headline": "Gets the root office ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root office ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root office ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_offices", 
               "doc": {
                  "headline": "Gets the root office in the office hierarchy.", 
                  "body": "        A availability with no parents is an orphan. While all office\n        ``Ids`` are known to the hierarchy, an orphan does not appear in\n        the hierarchy unless explicitly added as a root availability or\n        child of another availability."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the root offices", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root offices\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_offices", 
               "doc": {
                  "headline": "Tests if the ``Office`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): an office ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the office has parents, f\n                ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: an office ``Id``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the office has parents, f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_office", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``office_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``office_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_office_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): an office ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the office", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: an office ``Id``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the office\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_offices", 
               "doc": {
                  "headline": "Gets the parents of the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the parents of the office", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` to query\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the office\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_office", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "        return: (boolean) - ``tru`` e if this ``id`` is an ancestor of\n                ``office_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``tru`` e if this ``id`` is an ancestor of ``office_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_offices", 
               "doc": {
                  "headline": "Tests if an office has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): an office ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``office_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: an office ``Id``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``office_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_office", 
               "doc": {
                  "headline": "Tests if an office is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``Id`` is a child of\n                ``office_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``Id`` is a child of ``office_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_office_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the office", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` to query\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the office\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_offices", 
               "doc": {
                  "headline": "Gets the children of the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the children of the office", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` to query\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the office\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_office", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``office_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``id`` or ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``office_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_office_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the availability.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the availability.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given availability, ``false`` to omit\n                the siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - an office node", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` to query\n        :type office_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the availability.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the availability.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given availability, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an office node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_office_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the availability.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the availability.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given availability, ``false`` to omit\n                the siblings\n", 
               "return_doc": "        return: (osid.workflow.OfficeNode) - an office node", 
               "error_doc": "        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` to query\n        :type office_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the availability.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the availability.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given availability, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an office node\n        :rtype: ``osid.workflow.OfficeNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.workflow.OfficeNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeHierarchyDesignSession", 
         "shortname": "OfficeHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Office`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Office``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_office_hierarchy_id", 
            "get_office_hierarchy", 
            "can_modify_office_hierarchy", 
            "add_root_office", 
            "remove_root_office", 
            "add_child_office", 
            "remove_child_office", 
            "remove_child_offices"
         ], 
         "methods": [
            {
               "name": "get_office_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_office_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_office_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_office", 
               "doc": {
                  "headline": "Adds a root office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``office_id`` is already in hierarchy\n        raise:  NotFound - ``office_id`` not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``office_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``office_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_office", 
               "doc": {
                  "headline": "Removes a root office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not a root\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not a root\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_office", 
               "doc": {
                  "headline": "Adds a child to an office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an office\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``office_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``office_id`` or ``child_id`` not found\n        raise:  NullArgument - ``office_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``office_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``office_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``office_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_office", 
               "doc": {
                  "headline": "Removes a child from an office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an office\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not parent of ``child_id``\n        raise:  NullArgument - ``office_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not parent of ``child_id``\n        :raise: ``NullArgument`` -- ``office_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_offices", 
               "doc": {
                  "headline": "Removes all children from an office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of an office\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``office_id`` is not found\n        raise:  NullArgument - ``office_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of an office\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``office_id`` is not found\n        :raise: ``NullArgument`` -- ``office_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.Process", 
         "shortname": "Process", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Process``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernator"
         ], 
         "inherit_shortnames": [
            "OsidGovernator"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernator"
            }
         ], 
         "method_names": [
            "is_enabled", 
            "get_initial_step_id", 
            "get_initial_step", 
            "get_initial_state_id", 
            "get_initial_state", 
            "get_process_record"
         ], 
         "methods": [
            {
               "name": "is_enabled", 
               "doc": {
                  "headline": "Tests if this process is enabled.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this process is enabled,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this process is enabled, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the initial step of this process.", 
                  "body": "        All work goes through an initial step."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the step ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step", 
               "doc": {
                  "headline": "Gets the initial step of this process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Step) - the step", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_initial_state_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the initial state of the work upon entering this process.", 
                  "body": "        The initial state is used to assign the work to an initial step\n        that has this state as an initial state."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the state ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_initial_state", 
               "doc": {
                  "headline": "Gets the initial state of the work upon entering this process.", 
                  "body": "        The initial state is used to assign the work to an initial step\n        that has this state as an initial state."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.State) - the state", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state\n        :rtype: ``osid.process.State``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.State", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_process_record", 
               "doc": {
                  "headline": "Gets the process record corresponding to the given ``Process`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``process_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(process_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): the type of\n                process record to retrieve\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessRecord) - the process\n                record", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(process_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param process_record_type: the type of process record to retrieve\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process record\n        :rtype: ``osid.workflow.records.ProcessRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessRecord", 
         "shortname": "ProcessRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Process``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessQuery", 
         "shortname": "ProcessQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching processes.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorQuery"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorQuery"
            }
         ], 
         "method_names": [
            "match_enabled", 
            "clear_enabled_terms", 
            "match_initial_step_id", 
            "clear_initial_step_id_terms", 
            "supports_initial_step_query", 
            "get_initial_step_query", 
            "clear_initial_step_terms", 
            "match_initial_state_id", 
            "clear_initial_state_id_terms", 
            "supports_initial_state_query", 
            "get_initial_state_query", 
            "clear_initial_state_terms", 
            "match_step_id", 
            "clear_step_id_terms", 
            "supports_step_query", 
            "get_step_query", 
            "match_any_step", 
            "clear_step_terms", 
            "match_work_id", 
            "clear_work_id_terms", 
            "supports_work_query", 
            "get_work_query", 
            "match_any_work", 
            "clear_work_terms", 
            "match_office_id", 
            "clear_office_id_terms", 
            "supports_office_query", 
            "get_office_query", 
            "clear_office_terms", 
            "get_process_query_record"
         ], 
         "methods": [
            {
               "name": "match_enabled", 
               "doc": {
                  "headline": "Matches enabled processes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_enabled_terms", 
               "doc": {
                  "headline": "Clears the enabled query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_initial_step_id", 
               "doc": {
                  "headline": "Sets the initial step ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the step ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``", 
               "sphinx_param_doc": "        :param step_id: the step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_step_id_terms", 
               "doc": {
                  "headline": "Clears the initial stap ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_initial_step_query", 
               "doc": {
                  "headline": "Tests if a ``StepQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step_query", 
               "doc": {
                  "headline": "Gets the query for a step.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  Unimplemented - ``supports_initial_step_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_initial_step_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_initial_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_step_terms", 
               "doc": {
                  "headline": "Clears the initial step terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_initial_state_id", 
               "doc": {
                  "headline": "Sets the initial state ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): the state ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_id: the state ``Id``\n        :type state_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_state_id_terms", 
               "doc": {
                  "headline": "Clears the initial state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_initial_state_query", 
               "doc": {
                  "headline": "Tests if a ``StateQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a state query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a state query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_initial_state_query", 
               "doc": {
                  "headline": "Gets the query for a state.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQuery) - the state query", 
               "error_doc": "        raise:  Unimplemented - ``supports_initial_state_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state query\n        :rtype: ``osid.process.StateQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_initial_state_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_initial_state_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_state_terms", 
               "doc": {
                  "headline": "Clears the state terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_step_id", 
               "doc": {
                  "headline": "Sets the step ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the step ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``", 
               "sphinx_param_doc": "        :param step_id: the step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_step_id_terms", 
               "doc": {
                  "headline": "Clears the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_step_query", 
               "doc": {
                  "headline": "Tests if a ``StepQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_query", 
               "doc": {
                  "headline": "Gets the query for a step Multiple retrievals produce a nested ``OR`` term.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  Unimplemented - ``supports_stepy_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_stepy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_step", 
               "doc": {
                  "headline": "Matches processes that have any step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match processes with any\n                step, ``false`` to match processes with no step\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match processes with any step, ``false`` to match processes with no step\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_step_terms", 
               "doc": {
                  "headline": "Clears the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_work_id", 
               "doc": {
                  "headline": "Sets the work ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_work_id_terms", 
               "doc": {
                  "headline": "Clears the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_work_query", 
               "doc": {
                  "headline": "Tests if a ``WorkQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a work query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a work query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_work_query", 
               "doc": {
                  "headline": "Gets the query for a work.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "        raise:  Unimplemented - ``supports_work_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_work_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_work", 
               "doc": {
                  "headline": "Matches processs that have any work.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match processes with any\n                work, ``false`` to match processes with no work\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match processes with any work, ``false`` to match processes with no work\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_work_terms", 
               "doc": {
                  "headline": "Clears the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_office_id", 
               "doc": {
                  "headline": "Sets the office ``Id`` for this query to match process assigned to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the office ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the office ``Id``\n        :type office_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_id_terms", 
               "doc": {
                  "headline": "Clears the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_office_query", 
               "doc": {
                  "headline": "Tests if a ``OfficeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_office_query", 
               "doc": {
                  "headline": "Gets the query for a office.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  Unimplemented - ``supports_office_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_terms", 
               "doc": {
                  "headline": "Clears the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_process_query_record", 
               "doc": {
                  "headline": "Gets the process query record corresponding to the given ``Process`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a process record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessQueryRecord) - the process\n                query record", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(process_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param process_record_type: a process record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process query record\n        :rtype: ``osid.workflow.records.ProcessQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessQueryRecord", 
         "shortname": "ProcessQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessQueryInspector", 
         "shortname": "ProcessQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining process queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorQueryInspector"
            }
         ], 
         "method_names": [
            "get_enabled_terms", 
            "get_initial_step_id_terms", 
            "get_initial_step_terms", 
            "get_initial_state_id_terms", 
            "get_initial_state_terms", 
            "get_step_id_terms", 
            "get_step_terms", 
            "get_work_id_terms", 
            "get_work_terms", 
            "get_office_id_terms", 
            "get_office_terms", 
            "get_process_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_enabled_terms", 
               "doc": {
                  "headline": "Gets the enabled query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step_id_terms", 
               "doc": {
                  "headline": "Gets the initial step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step_terms", 
               "doc": {
                  "headline": "Gets the initial step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_initial_state_id_terms", 
               "doc": {
                  "headline": "Gets the initial state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_initial_state_terms", 
               "doc": {
                  "headline": "Gets the initial state query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.process.StateQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_step_id_terms", 
               "doc": {
                  "headline": "Gets the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_step_terms", 
               "doc": {
                  "headline": "Gets the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_work_id_terms", 
               "doc": {
                  "headline": "Gets the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_work_terms", 
               "doc": {
                  "headline": "Gets the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.WorkQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_office_id_terms", 
               "doc": {
                  "headline": "Gets the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_office_terms", 
               "doc": {
                  "headline": "Gets the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_process_query_inspector_record", 
               "doc": {
                  "headline": "Gets the process query inspector record corresponding to the given ``Process`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a process record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessQueryInspectorRecord) -\n                the process query inspector record", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(process_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param process_record_type: a process record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process query inspector record\n        :rtype: ``osid.workflow.records.ProcessQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessQueryInspectorRecord", 
         "shortname": "ProcessQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessForm", 
         "shortname": "ProcessForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Processes``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ProcessAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorForm"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorForm"
            }
         ], 
         "method_names": [
            "get_enabled_metadata", 
            "set_enabled", 
            "clear_enabled", 
            "get_initial_step_metadata", 
            "set_initial_step", 
            "clear_initial_step", 
            "get_initial_state_metadata", 
            "set_initial_state", 
            "clear_initial_state", 
            "get_process_form_record"
         ], 
         "methods": [
            {
               "name": "get_enabled_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the enabled flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the enabled flag", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the enabled flag\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_enabled", 
               "doc": {
                  "headline": "Sets the enabled flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    enabled (boolean): the new enabled flag\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``enabled`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param enabled: the new enabled flag\n        :type enabled: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``enabled`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "enabled", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_enabled", 
               "doc": {
                  "headline": "Removes the enabled flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_initial_step_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the initial step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the initial step", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the initial step\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_initial_step", 
               "doc": {
                  "headline": "Sets the initial step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the new initial step\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``step_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``step_id`` is ``null``", 
               "sphinx_param_doc": "        :param step_id: the new initial step\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``step_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``step_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_step", 
               "doc": {
                  "headline": "Removes the initial step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_initial_state_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the initial state.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the initial state", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the initial state\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_initial_state", 
               "doc": {
                  "headline": "Sets the initial state.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): the new initial state\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``state_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_id: the new initial state\n        :type state_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``state_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_initial_state", 
               "doc": {
                  "headline": "Removes the initial state.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_form_record", 
               "doc": {
                  "headline": "Gets the ``ProcessFormRecord`` corresponding to the given process record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a process record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessFormRecord) - the process\n                form record", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(process_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param process_record_type: a process record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process form record\n        :rtype: ``osid.workflow.records.ProcessFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessFormRecord", 
         "shortname": "ProcessFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessSearchOrder", 
         "shortname": "ProcessSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_enabled", 
            "order_by_initial_step", 
            "supports_initial_step_search_order", 
            "get_initial_step_search_order", 
            "order_by_initial_state", 
            "supports_initial_state_search_order", 
            "get_initial_state_search_order", 
            "get_process_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_enabled", 
               "doc": {
                  "headline": "Orders the results by enabled.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_initial_step", 
               "doc": {
                  "headline": "Orders the results by initial step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_initial_step_search_order", 
               "doc": {
                  "headline": "Tests if an initial step search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_initial_step_search_order", 
               "doc": {
                  "headline": "Gets the initial step search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepSearchOrder) - the step search order", 
               "error_doc": "        raise:  IllegalState - ``supports_initial_step_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step search order\n        :rtype: ``osid.workflow.StepSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``supports_initial_step_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepSearchOrder", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_initial_state", 
               "doc": {
                  "headline": "Orders the results by initial state.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_initial_state_search_order", 
               "doc": {
                  "headline": "Tests if an initial state search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a state search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a state search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_initial_state_search_order", 
               "doc": {
                  "headline": "Gets the initial state search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateSearchOrder) - the state search order", 
               "error_doc": "        raise:  IllegalState - ``supports_initial_state_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state search order\n        :rtype: ``osid.process.StateSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``supports_initial_state_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateSearchOrder", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_order_record", 
               "doc": {
                  "headline": "Gets the process search order record corresponding to the given process record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    process_record_type (osid.type.Type): a process record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessSearchOrderRecord) - the\n                process search order record", 
               "error_doc": "        raise:  NullArgument - ``process_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(process_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param process_record_type: a process record type\n        :type process_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process search order record\n        :rtype: ``osid.workflow.records.ProcessSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessSearchOrderRecord", 
         "shortname": "ProcessSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessSearch", 
         "shortname": "ProcessSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing process searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_processes", 
            "order_process_results", 
            "get_process_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_processes", 
               "doc": {
                  "headline": "Execute this search among the given list of processes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_ids (osid.id.IdList): list of processes\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_ids`` is ``null``", 
               "sphinx_param_doc": "        :param process_ids: list of processes\n        :type process_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "process_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_process_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_search_order (osid.workflow.ProcessSearchOrder):\n                process search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_search_order`` is ``null``\n        raise:  Unsupported - ``process_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param process_search_order: process search order\n        :type process_search_order: ``osid.workflow.ProcessSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``process_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.ProcessSearchOrder", 
                     "var_name": "process_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.ProcessSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_search_record", 
               "doc": {
                  "headline": "Gets the process search record corresponding to the given process search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    process_search_record_type (osid.type.Type): a process\n                search record type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessSearchRecord) - the\n                process search record", 
               "error_doc": "        raise:  NullArgument - ``process_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(process_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param process_search_record_type: a process search record type\n        :type process_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process search record\n        :rtype: ``osid.workflow.records.ProcessSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessSearchRecord", 
         "shortname": "ProcessSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessSearchResults", 
         "shortname": "ProcessSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_processes", 
            "get_process_query_inspector", 
            "get_process_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_processes", 
               "doc": {
                  "headline": "Gets the process list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessList) - the process list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process list\n        :rtype: ``osid.workflow.ProcessList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_process_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQueryInspector) - the process\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query inspector\n        :rtype: ``osid.workflow.ProcessQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_process_search_results_record", 
               "doc": {
                  "headline": "Gets the process search results record corresponding to the given process search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    process_search_record_type (osid.type.Type): a process\n                search record type\n", 
               "return_doc": "        return: (osid.workflow.records.ProcessSearchResultsRecord) - the\n                process search results record", 
               "error_doc": "        raise:  NullArgument - ``process_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(process_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param process_search_record_type: a process search record type\n        :type process_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the process search results record\n        :rtype: ``osid.workflow.records.ProcessSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(process_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "process_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.ProcessSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.ProcessSearchResultsRecord", 
         "shortname": "ProcessSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProcessSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.ProcessReceiver", 
         "shortname": "ProcessReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The process receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Process`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_process", 
            "changed_process", 
            "deleted_process"
         ], 
         "methods": [
            {
               "name": "new_process", 
               "doc": {
                  "headline": "The callback for notifications of new process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the new\n                ``Process``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the new ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_process", 
               "doc": {
                  "headline": "The callback for notification of updated process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the updated\n                ``Process``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the updated ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_process", 
               "doc": {
                  "headline": "The callback for notification of deleted process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the ``Id`` of the deleted\n                ``Process``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param process_id: the ``Id`` of the deleted ``Process``\n        :type process_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.ProcessList", 
         "shortname": "ProcessList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ProcessList`` provides a means for accessing ``Process`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (pl.hasNext()) { Process process =\n    pl.getNextProcess(); }\n\n    or\n      while (pl.hasNext()) {\n           Process[] processes = pl.getNextProcesses(pl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_process", 
            "get_next_processes"
         ], 
         "methods": [
            {
               "name": "get_next_process", 
               "doc": {
                  "headline": "Gets the next ``Process`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Process) - the next ``Process`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Process`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Process`` in this list. The ``has_next()`` method should be used to test that a next ``Process`` is available before calling this method.\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_processes", 
               "doc": {
                  "headline": "Gets the next set of ``Process`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Process`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.workflow.Process) - an array of ``Process``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Process`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Process`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.Step", 
         "shortname": "Step", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Step`` is an element in a Process in which Work is processed.", 
            "body": "    The workers in this ``Step`` are represented by ``Resources`` or\n    ``Resource`` groups. The input ``States`` list the states of\n    ``Work`` that are valid to be accepted into this ``Step``.\n    Successful processing of the ``Work`` result in a single next\n    ``State`` that determines the valid next ``Steps`` in the\n    ``Process``."
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernator", 
            "osid.Subjugateable"
         ], 
         "inherit_shortnames": [
            "OsidGovernator", 
            "Subjugateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernator"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Subjugateable"
            }
         ], 
         "method_names": [
            "get_process_id", 
            "get_process", 
            "get_resource_ids", 
            "get_resources", 
            "get_input_state_ids", 
            "get_input_states", 
            "get_next_state_id", 
            "get_next_state", 
            "get_step_record"
         ], 
         "methods": [
            {
               "name": "get_process_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the process ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_process", 
               "doc": {
                  "headline": "Gets the process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Process) - the process", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_resource_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of the resources working in this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the resource ``Ids``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {}
            }, 
            {
               "name": "get_resources", 
               "doc": {
                  "headline": "Gets the resources working in this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceList) - the resources", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resources\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_input_state_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of the valid states entering this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the state ``Ids``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {}
            }, 
            {
               "name": "get_input_states", 
               "doc": {
                  "headline": "Gets the valid states to enter this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateList) - the states", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the states\n        :rtype: ``osid.process.StateList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateList", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_state_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the state of the work upon completing this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the state ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_next_state", 
               "doc": {
                  "headline": "Gets the state of the work upon completing this step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.State) - the state", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state\n        :rtype: ``osid.process.State``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.State", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_step_record", 
               "doc": {
                  "headline": "Gets the step record corresponding to the given ``Step`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``step_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(step_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): the type of step\n                record to retrieve\n", 
               "return_doc": "        return: (osid.workflow.records.StepRecord) - the step record", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(step_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_record_type: the type of step record to retrieve\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step record\n        :rtype: ``osid.workflow.records.StepRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepRecord", 
         "shortname": "StepRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Step``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepQuery", 
         "shortname": "StepQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching steps.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorQuery", 
            "osid.OsidSubjugateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorQuery", 
            "OsidSubjugateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQuery"
            }
         ], 
         "method_names": [
            "match_process_id", 
            "clear_process_id_terms", 
            "supports_process_query", 
            "get_process_query", 
            "clear_process_terms", 
            "match_resource_id", 
            "clear_resource_id_terms", 
            "supports_resource_query", 
            "get_resource_query", 
            "match_any_resource", 
            "clear_resource_terms", 
            "match_initial", 
            "clear_initial_terms", 
            "match_terminal", 
            "clear_terminal_terms", 
            "match_input_state_id", 
            "clear_input_state_id_terms", 
            "supports_input_state_query", 
            "get_input_state_query", 
            "match_any_input_state", 
            "clear_input_state_terms", 
            "match_next_state_id", 
            "clear_next_state_id_terms", 
            "supports_next_state_query", 
            "get_next_state_query", 
            "match_any_next_state", 
            "clear_next_state_terms", 
            "match_work_id", 
            "clear_work_id_terms", 
            "supports_work_query", 
            "get_work_query", 
            "match_any_work", 
            "clear_work_terms", 
            "match_office_id", 
            "clear_office_id_terms", 
            "supports_office_query", 
            "get_office_query", 
            "clear_office_terms", 
            "get_step_query_record"
         ], 
         "methods": [
            {
               "name": "match_process_id", 
               "doc": {
                  "headline": "Sets the process ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the process ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: the process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_process_id_terms", 
               "doc": {
                  "headline": "Clears the process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_process_query", 
               "doc": {
                  "headline": "Tests if a ``ProcessQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_query", 
               "doc": {
                  "headline": "Gets the query for a process.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "        raise:  Unimplemented - ``supports_process_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_process_terms", 
               "doc": {
                  "headline": "Clears the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_resource_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: the resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_resource", 
               "doc": {
                  "headline": "Matches steps that have any resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match steps with any\n                resources, ``false`` to match steps with no resources\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match steps with any resources, ``false`` to match steps with no resources\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_resource_terms", 
               "doc": {
                  "headline": "Clears the resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_initial", 
               "doc": {
                  "headline": "Matches initial steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match initial steps,\n                ``false`` otherwise\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match initial steps, ``false`` otherwise\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_initial_terms", 
               "doc": {
                  "headline": "Clears the initial step terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_terminal", 
               "doc": {
                  "headline": "Matches terminal steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match terminal steps,\n                ``false`` otherwise\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match terminal steps, ``false`` otherwise\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_terminal_terms", 
               "doc": {
                  "headline": "Clears the terminal step terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_input_state_id", 
               "doc": {
                  "headline": "Sets the input state ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): the state ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_id: the state ``Id``\n        :type state_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_state_id_terms", 
               "doc": {
                  "headline": "Clears the input state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_input_state_query", 
               "doc": {
                  "headline": "Tests if a ``StateQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a state query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a state query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_input_state_query", 
               "doc": {
                  "headline": "Gets the query for an input state.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQuery) - the state query", 
               "error_doc": "        raise:  Unimplemented - ``supports_input_state_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state query\n        :rtype: ``osid.process.StateQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_input_state_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_inputt_state_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_input_state", 
               "doc": {
                  "headline": "Matches steps that have any input states.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match steps with any input\n                states, ``false`` to match steps with no input states\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match steps with any input states, ``false`` to match steps with no input states\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_input_state_terms", 
               "doc": {
                  "headline": "Clears the input state terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_next_state_id", 
               "doc": {
                  "headline": "Sets the next state ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): the state ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_id: the state ``Id``\n        :type state_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_next_state_id_terms", 
               "doc": {
                  "headline": "Clears the next state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_next_state_query", 
               "doc": {
                  "headline": "Tests if a ``StateQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a state query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a state query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_next_state_query", 
               "doc": {
                  "headline": "Gets the query for a state.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQuery) - the state query", 
               "error_doc": "        raise:  Unimplemented - ``supports_next_state_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state query\n        :rtype: ``osid.process.StateQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_next_state_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_next_state_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_next_state", 
               "doc": {
                  "headline": "Matches steps that have any next state,.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match steps with any next\n                state, ``false`` to match steps with no next state\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match steps with any next state, ``false`` to match steps with no next state\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_next_state_terms", 
               "doc": {
                  "headline": "Clears the state terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_work_id", 
               "doc": {
                  "headline": "Sets the work ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_work_id_terms", 
               "doc": {
                  "headline": "Clears the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_work_query", 
               "doc": {
                  "headline": "Tests if a ``WorkQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a work query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a work query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_work_query", 
               "doc": {
                  "headline": "Gets the query for a work.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "        raise:  Unimplemented - ``supports_work_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_work_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_work", 
               "doc": {
                  "headline": "Matches steps that have any work.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match steps with any work,\n                ``false`` to match steps with no work\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match steps with any work, ``false`` to match steps with no work\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_work_terms", 
               "doc": {
                  "headline": "Clears the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_office_id", 
               "doc": {
                  "headline": "Sets the office ``Id`` for this query to match steps assigned to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the office ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the office ``Id``\n        :type office_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_id_terms", 
               "doc": {
                  "headline": "Clears the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_office_query", 
               "doc": {
                  "headline": "Tests if a ``OfficeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_office_query", 
               "doc": {
                  "headline": "Gets the query for a office.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  Unimplemented - ``supports_office_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_terms", 
               "doc": {
                  "headline": "Clears the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_step_query_record", 
               "doc": {
                  "headline": "Gets the step query record corresponding to the given ``Step`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a step record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepQueryRecord) - the step query\n                record", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(step_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_record_type: a step record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step query record\n        :rtype: ``osid.workflow.records.StepQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepQueryRecord", 
         "shortname": "StepQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepQueryInspector", 
         "shortname": "StepQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining step queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorQueryInspector", 
            "osid.OsidSubjugateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorQueryInspector", 
            "OsidSubjugateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_process_id_terms", 
            "get_process_terms", 
            "get_resource_id_terms", 
            "get_resource_terms", 
            "get_work_id_terms", 
            "get_work_terms", 
            "get_initial_terms", 
            "get_terminal_terms", 
            "get_input_state_id_terms", 
            "get_input_state_terms", 
            "get_next_state_id_terms", 
            "get_next_state_terms", 
            "get_office_id_terms", 
            "get_office_terms", 
            "get_step_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_process_id_terms", 
               "doc": {
                  "headline": "Gets the process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_process_terms", 
               "doc": {
                  "headline": "Gets the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.ProcessQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_terms", 
               "doc": {
                  "headline": "Gets the resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_work_id_terms", 
               "doc": {
                  "headline": "Gets the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_work_terms", 
               "doc": {
                  "headline": "Gets the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.WorkQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_initial_terms", 
               "doc": {
                  "headline": "Gets the initial step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_terminal_terms", 
               "doc": {
                  "headline": "Gets the terminal step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_input_state_id_terms", 
               "doc": {
                  "headline": "Gets the input state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_input_state_terms", 
               "doc": {
                  "headline": "Gets the input state query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.process.StateQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_next_state_id_terms", 
               "doc": {
                  "headline": "Gets the next state ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_next_state_terms", 
               "doc": {
                  "headline": "Gets the next state query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.process.StateQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_office_id_terms", 
               "doc": {
                  "headline": "Gets the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_office_terms", 
               "doc": {
                  "headline": "Gets the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_step_query_inspector_record", 
               "doc": {
                  "headline": "Gets the step query inspector record corresponding to the given ``Step`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a step record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepQueryInspectorRecord) - the\n                step query inspector record", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(step_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_record_type: a step record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step query inspector record\n        :rtype: ``osid.workflow.records.StepQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepQueryInspectorRecord", 
         "shortname": "StepQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepForm", 
         "shortname": "StepForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Steps``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``StepAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorForm", 
            "osid.OsidSubjugateableForm"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorForm", 
            "OsidSubjugateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableForm"
            }
         ], 
         "method_names": [
            "get_input_states_metadata", 
            "se_input_states", 
            "clear_input_states", 
            "get_next_state_metadata", 
            "set_next_state", 
            "clear_next_state", 
            "get_step_form_record"
         ], 
         "methods": [
            {
               "name": "get_input_states_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the input states.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the states", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the states\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "se_input_states", 
               "doc": {
                  "headline": "Sets the input states.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_ids (osid.id.IdList): the new input states\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``state_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_ids: the new input states\n        :type state_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``state_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "state_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_states", 
               "doc": {
                  "headline": "Removes the input states.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_next_state_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the next state.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the state", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the state\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_next_state", 
               "doc": {
                  "headline": "Sets the next state.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    state_id (osid.id.Id): the new next state\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``state_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``state_id`` is ``null``", 
               "sphinx_param_doc": "        :param state_id: the new next state\n        :type state_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``state_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``state_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "state_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_next_state", 
               "doc": {
                  "headline": "Removes the next state.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_form_record", 
               "doc": {
                  "headline": "Gets the ``StepFormRecord`` corresponding to the given step record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a step record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepFormRecord) - the step form\n                record", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(step_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_record_type: a step record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step form record\n        :rtype: ``osid.workflow.records.StepFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepFormRecord", 
         "shortname": "StepFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepSearchOrder", 
         "shortname": "StepSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidGovernatorSearchOrder", 
            "osid.OsidSubjugateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidGovernatorSearchOrder", 
            "OsidSubjugateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidGovernatorSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_process", 
            "supports_process_search_order", 
            "get_process_search_order", 
            "order_by_initial", 
            "order_by_terminal", 
            "order_by_next_state", 
            "supports_next_state_search_order", 
            "get_next_state_search_order", 
            "get_step_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_process", 
               "doc": {
                  "headline": "Orders the results by process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_process_search_order", 
               "doc": {
                  "headline": "Tests if a process search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_search_order", 
               "doc": {
                  "headline": "Gets the process search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessSearchOrder) - the process search\n                order", 
               "error_doc": "        raise:  IllegalState - ``supports_process_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process search order\n        :rtype: ``osid.workflow.ProcessSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``supports_process_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessSearchOrder", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_initial", 
               "doc": {
                  "headline": "Orders the results by initial steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_terminal", 
               "doc": {
                  "headline": "Orders the results by terminal steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_next_state", 
               "doc": {
                  "headline": "Orders the results by next state.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_next_state_search_order", 
               "doc": {
                  "headline": "Tests if a next state search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a state search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a state search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_next_state_search_order", 
               "doc": {
                  "headline": "Gets the next state search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.process.StateSearchOrder) - the state search order", 
               "error_doc": "        raise:  IllegalState - ``supports_next_state_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the state search order\n        :rtype: ``osid.process.StateSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``supports_next_state_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.process.StateSearchOrder", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_order_record", 
               "doc": {
                  "headline": "Gets the step search order record corresponding to the given step record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    step_record_type (osid.type.Type): a step record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepSearchOrderRecord) - the step\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``step_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(step_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_record_type: a step record type\n        :type step_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step search order record\n        :rtype: ``osid.workflow.records.StepSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepSearchOrderRecord", 
         "shortname": "StepSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepSearch", 
         "shortname": "StepSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing step searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_steps", 
            "order_step_results", 
            "get_step_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_steps", 
               "doc": {
                  "headline": "Execute this search among the given list of steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_ids (osid.id.IdList): list of steps\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_ids`` is ``null``", 
               "sphinx_param_doc": "        :param step_ids: list of steps\n        :type step_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "step_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_step_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_search_order (osid.workflow.StepSearchOrder): step\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_search_order`` is ``null``\n        raise:  Unsupported - ``step_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param step_search_order: step search order\n        :type step_search_order: ``osid.workflow.StepSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``step_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.StepSearchOrder", 
                     "var_name": "step_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.StepSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_search_record", 
               "doc": {
                  "headline": "Gets the step search record corresponding to the given step search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    step_search_record_type (osid.type.Type): a step search\n                record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepSearchRecord) - the step\n                search record", 
               "error_doc": "        raise:  NullArgument - ``step_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(step_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_search_record_type: a step search record type\n        :type step_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step search record\n        :rtype: ``osid.workflow.records.StepSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepSearchRecord", 
         "shortname": "StepSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepSearchResults", 
         "shortname": "StepSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_steps", 
            "get_step_query_inspector", 
            "get_step_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_steps", 
               "doc": {
                  "headline": "Gets the step list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepList) - the step list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step list\n        :rtype: ``osid.workflow.StepList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the step query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query inspector\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_step_search_results_record", 
               "doc": {
                  "headline": "Gets the step search results record corresponding to the given step search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    step_search_record_type (osid.type.Type): a step search\n                record type\n", 
               "return_doc": "        return: (osid.workflow.records.StepSearchResultsRecord) - the\n                step search results record", 
               "error_doc": "        raise:  NullArgument - ``step_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(step_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param step_search_record_type: a step search record type\n        :type step_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the step search results record\n        :rtype: ``osid.workflow.records.StepSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(step_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "step_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.StepSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.StepSearchResultsRecord", 
         "shortname": "StepSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``StepSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.StepReceiver", 
         "shortname": "StepReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The step receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Step`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_step", 
            "changed_step", 
            "deleted_step"
         ], 
         "methods": [
            {
               "name": "new_step", 
               "doc": {
                  "headline": "The callback for notifications of new steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the new ``Step``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the new ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_step", 
               "doc": {
                  "headline": "The callback for notification of updated steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the updated ``Step``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the updated ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_step", 
               "doc": {
                  "headline": "The callback for notification of deleted steps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the ``Id`` of the deleted ``Step``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param step_id: the ``Id`` of the deleted ``Step``\n        :type step_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.StepList", 
         "shortname": "StepList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``StepList`` provides a means for accessing ``Step`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (sl.hasNext()) { Step step = sl.getNextStep(); }\n\n    or\n      while (sl.hasNext()) {\n           Step[] steps = sl.getNextSteps(sl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_step", 
            "get_next_steps"
         ], 
         "methods": [
            {
               "name": "get_next_step", 
               "doc": {
                  "headline": "Gets the next ``Step`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Step) - the next ``Step`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Step`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Step`` in this list. The ``has_next()`` method should be used to test that a next ``Step`` is available before calling this method.\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_steps", 
               "doc": {
                  "headline": "Gets the next set of ``Step`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Step`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.workflow.Step) - an array of ``Step`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Step`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Step`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.Work", 
         "shortname": "Work", 
         "category": "objects", 
         "doc": {
            "headline": "``Work`` moves through ``Steps`` in a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_work_record"
         ], 
         "methods": [
            {
               "name": "get_work_record", 
               "doc": {
                  "headline": "Gets the work record corresponding to the given ``Work`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``work_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(work_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): the type of work\n                record to retrieve\n", 
               "return_doc": "        return: (osid.workflow.records.WorkRecord) - the work record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(work_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_record_type: the type of work record to retrieve\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work record\n        :rtype: ``osid.workflow.records.WorkRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkRecord", 
         "shortname": "WorkRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Work``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkQuery", 
         "shortname": "WorkQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching works.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_suspended", 
            "clear_suspended_terms", 
            "match_process_id", 
            "clear_process_id_terms", 
            "supports_process_query", 
            "get_process_query", 
            "clear_process_terms", 
            "match_step_id", 
            "clear_step_id_terms", 
            "supports_step_query", 
            "get_step_query", 
            "match_any_step", 
            "clear_step_terms", 
            "match_office_id", 
            "clear_office_id_terms", 
            "supports_office_query", 
            "get_office_query", 
            "clear_office_terms", 
            "get_work_query_record"
         ], 
         "methods": [
            {
               "name": "match_suspended", 
               "doc": {
                  "headline": "Matches suspended work.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match suspended work,\n                ``false`` otherwise\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match suspended work, ``false`` otherwise\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_suspended_terms", 
               "doc": {
                  "headline": "Clears the suspended query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_process_id", 
               "doc": {
                  "headline": "Sets the process ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the process ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: the process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_process_id_terms", 
               "doc": {
                  "headline": "Clears the process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_process_query", 
               "doc": {
                  "headline": "Tests if a ``ProcessQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_query", 
               "doc": {
                  "headline": "Gets the query for a process.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "        raise:  Unimplemented - ``supports_process_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_process_terms", 
               "doc": {
                  "headline": "Clears the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_step_id", 
               "doc": {
                  "headline": "Sets the step ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the step ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``", 
               "sphinx_param_doc": "        :param step_id: the step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_step_id_terms", 
               "doc": {
                  "headline": "Clears the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_step_query", 
               "doc": {
                  "headline": "Tests if a ``StepQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a step query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a step query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_query", 
               "doc": {
                  "headline": "Gets the query for a step Multiple retrievals produce a nested ``OR`` term.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  Unimplemented - ``supports_stepy_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_stepy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_step", 
               "doc": {
                  "headline": "Matches processes that have any step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match processes with any\n                step, ``false`` to match processes with no step\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match processes with any step, ``false`` to match processes with no step\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_step_terms", 
               "doc": {
                  "headline": "Clears the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_office_id", 
               "doc": {
                  "headline": "Sets the office ``Id`` for this query to match works assigned to offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the office ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: the office ``Id``\n        :type office_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_id_terms", 
               "doc": {
                  "headline": "Clears the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_office_query", 
               "doc": {
                  "headline": "Tests if a ``OfficeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_office_query", 
               "doc": {
                  "headline": "Gets the query for a office.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  Unimplemented - ``supports_office_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_office_terms", 
               "doc": {
                  "headline": "Clears the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_work_query_record", 
               "doc": {
                  "headline": "Gets the work query record corresponding to the given ``Work`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a work record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkQueryRecord) - the work query\n                record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(work_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_record_type: a work record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work query record\n        :rtype: ``osid.workflow.records.WorkQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkQueryRecord", 
         "shortname": "WorkQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkQueryInspector", 
         "shortname": "WorkQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining work queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_suspended_terms", 
            "get_process_id_terms", 
            "get_process_terms", 
            "get_step_id_terms", 
            "get_step_terms", 
            "get_office_id_terms", 
            "get_office_terms", 
            "get_work_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_suspended_terms", 
               "doc": {
                  "headline": "Gets the suspended query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_process_id_terms", 
               "doc": {
                  "headline": "Gets the process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_process_terms", 
               "doc": {
                  "headline": "Gets the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.ProcessQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_step_id_terms", 
               "doc": {
                  "headline": "Gets the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_step_terms", 
               "doc": {
                  "headline": "Gets the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_office_id_terms", 
               "doc": {
                  "headline": "Gets the office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_office_terms", 
               "doc": {
                  "headline": "Gets the office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_work_query_inspector_record", 
               "doc": {
                  "headline": "Gets the work query inspector record corresponding to the given ``Work`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a work record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkQueryInspectorRecord) - the\n                work query inspector record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(work_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_record_type: a work record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work query inspector record\n        :rtype: ``osid.workflow.records.WorkQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkQueryInspectorRecord", 
         "shortname": "WorkQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkForm", 
         "shortname": "WorkForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Works``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``WorkAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_work_form_record"
         ], 
         "methods": [
            {
               "name": "get_work_form_record", 
               "doc": {
                  "headline": "Gets the ``WorkFormRecord`` corresponding to the given work record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a work record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkFormRecord) - the work form\n                record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(work_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_record_type: a work record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work form record\n        :rtype: ``osid.workflow.records.WorkFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkFormRecord", 
         "shortname": "WorkFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkSearchOrder", 
         "shortname": "WorkSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "get_work_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_work_search_order_record", 
               "doc": {
                  "headline": "Gets the work search order record corresponding to the given work record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    work_record_type (osid.type.Type): a work record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkSearchOrderRecord) - the work\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(work_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_record_type: a work record type\n        :type work_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work search order record\n        :rtype: ``osid.workflow.records.WorkSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkSearchOrderRecord", 
         "shortname": "WorkSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkSearch", 
         "shortname": "WorkSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing work searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_works", 
            "order_work_results", 
            "get_work_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_works", 
               "doc": {
                  "headline": "Execute this search among the given list of works.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_ids (osid.id.IdList): list of works\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_ids`` is ``null``", 
               "sphinx_param_doc": "        :param work_ids: list of works\n        :type work_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "work_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_work_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_search_order (osid.workflow.WorkSearchOrder): work\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_search_order`` is ``null``\n        raise:  Unsupported - ``work_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param work_search_order: work search order\n        :type work_search_order: ``osid.workflow.WorkSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``work_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.WorkSearchOrder", 
                     "var_name": "work_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.WorkSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_search_record", 
               "doc": {
                  "headline": "Gets the work search record corresponding to the given work search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    work_search_record_type (osid.type.Type): a work search\n                record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkSearchRecord) - the work\n                search record", 
               "error_doc": "        raise:  NullArgument - ``work_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(work_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_search_record_type: a work search record type\n        :type work_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work search record\n        :rtype: ``osid.workflow.records.WorkSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkSearchRecord", 
         "shortname": "WorkSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkSearchResults", 
         "shortname": "WorkSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_works", 
            "get_work_query_inspector", 
            "get_work_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_works", 
               "doc": {
                  "headline": "Gets the work list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkList) - the work list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work list\n        :rtype: ``osid.workflow.WorkList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_work_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQueryInspector) - the work query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query inspector\n        :rtype: ``osid.workflow.WorkQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_work_search_results_record", 
               "doc": {
                  "headline": "Gets the work search results record corresponding to the given work search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    work_search_record_type (osid.type.Type): a work search\n                record type\n", 
               "return_doc": "        return: (osid.workflow.records.WorkSearchResultsRecord) - the\n                work search results record", 
               "error_doc": "        raise:  NullArgument - ``work_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(work_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_search_record_type: a work search record type\n        :type work_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the work search results record\n        :rtype: ``osid.workflow.records.WorkSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(work_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkSearchResultsRecord", 
         "shortname": "WorkSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkReceiver", 
         "shortname": "WorkReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The work receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Work`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_work", 
            "changed_work", 
            "deleted_work"
         ], 
         "methods": [
            {
               "name": "new_work", 
               "doc": {
                  "headline": "The callback for notifications of new works.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the new ``Work``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the new ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_work", 
               "doc": {
                  "headline": "The callback for notification of updated works.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the updated ``Work``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the updated ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_work", 
               "doc": {
                  "headline": "The callback for notification of deleted works.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the ``Id`` of the deleted ``Work``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param work_id: the ``Id`` of the deleted ``Work``\n        :type work_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkList", 
         "shortname": "WorkList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``WorkList`` provides a means for accessing ``Work`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (wl.hasNext()) { Work work = wl.getNextWork(); }\n\n    or\n      while (wl.hasNext()) {\n           Work[] works = wl.getNextWorks(wl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_work", 
            "get_next_works"
         ], 
         "methods": [
            {
               "name": "get_next_work", 
               "doc": {
                  "headline": "Gets the next ``Work`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Work) - the next ``Work`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Work`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Work`` in this list. The ``has_next()`` method should be used to test that a next ``Work`` is available before calling this method.\n        :rtype: ``osid.workflow.Work``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Work", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_works", 
               "doc": {
                  "headline": "Gets the next set of ``Work`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Work`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.workflow.Work) - an array of ``Work`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Work`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Work`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.Work``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.Work", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowEvent", 
         "shortname": "WorkflowEvent", 
         "category": "objects", 
         "doc": {
            "headline": "A ``WorkflowEvent`` is a change in a workflow.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_timestamp", 
            "get_process_id", 
            "get_process", 
            "get_worker_id", 
            "get_worker", 
            "get_working_agent_id", 
            "get_working_agent", 
            "get_work_id", 
            "get_work", 
            "did_cancel", 
            "get_step_id", 
            "get_step", 
            "get_workflow_event_record"
         ], 
         "methods": [
            {
               "name": "get_timestamp", 
               "doc": {
                  "headline": "Gets the timestamp of this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the timestamp", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the timestamp\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_process_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the process ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_process", 
               "doc": {
                  "headline": "Gets the process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Process) - the process", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process\n        :rtype: ``osid.workflow.Process``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Process", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_worker_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the resource that caused this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_worker", 
               "doc": {
                  "headline": "Gets the resource that caused this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_working_agent_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the agent that caused this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the agent ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_working_agent", 
               "doc": {
                  "headline": "Gets the agent that caused this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the agent", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_work_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the work.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the work ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_work", 
               "doc": {
                  "headline": "Gets the work.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Work) - the work", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work\n        :rtype: ``osid.workflow.Work``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Work", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "did_cancel", 
               "doc": {
                  "headline": "Tests if this work event indicates the work has been canceled the workflow and is not associated with a step at the time of this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the work canceled, ``false`` if\n                the work is associated with a step in this event", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the work canceled, ``false`` if the work is associated with a step in this event\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the step at which the work is in at the time of this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the step ``Id``", 
               "error_doc": "        raise:  IllegalState - ``did_complete()`` or ``did_cancel()`` is\n                ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``did_complete()`` or ``did_cancel()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_step", 
               "doc": {
                  "headline": "Gets the step at which the work is in at the time of this event.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Step) - the step", 
               "error_doc": "        raise:  IllegalState - ``did_complete()`` or ``did_cancel()`` is\n                ``true``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step\n        :rtype: ``osid.workflow.Step``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``did_complete()`` or ``did_cancel()`` is ``true``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Step", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_workflow_event_record", 
               "doc": {
                  "headline": "Gets the workflow event record corresponding to the given ``WorkflowEvent`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``workflow_event_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(workflow_event_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    work_flow_record_type (osid.type.Type): the type of\n                workflow event record to retrieve\n", 
               "return_doc": "        return: (osid.workflow.records.WorkflowEventRecord) - the\n                workflow event record", 
               "error_doc": "        raise:  NullArgument - ``work_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(workflow_event_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param work_flow_record_type: the type of workflow event record to retrieve\n        :type work_flow_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the workflow event record\n        :rtype: ``osid.workflow.records.WorkflowEventRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(workflow_event_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "work_flow_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.WorkflowEventRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.WorkflowEventRecord", 
         "shortname": "WorkflowEventRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``WorkflowEvent``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.WorkflowEventReceiver", 
         "shortname": "WorkflowEventReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The workflow event receiver is the consumer supplied interface for receiving notifications pertaining to new ``WorkflowEvents``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_workflow_event"
         ], 
         "methods": [
            {
               "name": "new_workflow_event", 
               "doc": {
                  "headline": "The callback for notifications of new workflow events.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    workflow_event_id (osid.id.Id): the ``Id`` of the new\n                ``WorkflowEvent``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param workflow_event_id: the ``Id`` of the new ``WorkflowEvent``\n        :type workflow_event_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "workflow_event_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.WorkflowEventList", 
         "shortname": "WorkflowEventList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``WorkflowEventList`` provides a means for accessing ``WorkflowEvent`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (wel.hasNext()) { WorkflowEvent event =\n    wel.getNextWorkflowEvent(); }\n\n    or\n      while (wel.hasNext()) {\n           WorkflowEvent[] events = wel.getNextWorkflowEvents(wel.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_workflow_event", 
            "get_next_workflow_events"
         ], 
         "methods": [
            {
               "name": "get_next_workflow_event", 
               "doc": {
                  "headline": "Gets the next ``WorkflowEvent`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkflowEvent) - the next\n                ``WorkflowEvent`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``WorkflowEvent`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``WorkflowEvent`` in this list. The ``has_next()`` method should be used to test that a next ``WorkflowEvent`` is available before calling this method.\n        :rtype: ``osid.workflow.WorkflowEvent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkflowEvent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_workflow_events", 
               "doc": {
                  "headline": "Gets the next set of ``WorkflowEvent`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``WorkflowEvent`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.workflow.WorkflowEvent) - an array of\n                ``WorkflowEvent`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``WorkflowEvent`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``WorkflowEvent`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.WorkflowEvent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.WorkflowEvent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.Office", 
         "shortname": "Office", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Office`` represents a collection of process.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_office_record"
         ], 
         "methods": [
            {
               "name": "get_office_record", 
               "doc": {
                  "headline": "Gets the office record corresponding to the given ``Office`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``office_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(office_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): the type of office\n                record to retrieve\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeRecord) - the office record", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(office_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_record_type: the type of office record to retrieve\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office record\n        :rtype: ``osid.workflow.records.OfficeRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeRecord", 
         "shortname": "OfficeRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeRecord``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeQuery", 
         "shortname": "OfficeQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching offices.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_process_id", 
            "clear_process_id_terms", 
            "supports_process_query", 
            "get_process_query", 
            "match_any_process", 
            "clear_process_terms", 
            "match_step_id", 
            "clear_step_id_terms", 
            "supports_step_query", 
            "get_step_query", 
            "match_any_step", 
            "clear_step_terms", 
            "match_work_id", 
            "clear_work_id_terms", 
            "supports_work_query", 
            "get_work_query", 
            "match_any_work", 
            "clear_work_terms", 
            "match_ancestor_office_id", 
            "clear_ancestor_office_id_terms", 
            "supports_ancestor_office_query", 
            "get_ancestor_office_query", 
            "match_any_ancestor_office", 
            "clear_ancestor_office_terms", 
            "match_descendant_office_id", 
            "clear_descendant_office_id_terms", 
            "supports_descendant_office_query", 
            "get_descendant_office_query", 
            "match_any_descendant_office", 
            "clear_descendant_office_terms", 
            "get_office_query_record"
         ], 
         "methods": [
            {
               "name": "match_process_id", 
               "doc": {
                  "headline": "Sets the step ``Id`` for this query to match offices containing process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    process_id (osid.id.Id): the process ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``process_id`` is ``null``", 
               "sphinx_param_doc": "        :param process_id: the process ``Id``\n        :type process_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``process_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "process_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_process_id_terms", 
               "doc": {
                  "headline": "Clears the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_process_query", 
               "doc": {
                  "headline": "Tests if a ``ProcessQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a process query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a process query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_process_query", 
               "doc": {
                  "headline": "Gets the query for a process.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQuery) - the process query", 
               "error_doc": "        raise:  Unimplemented - ``supports_process_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the process query\n        :rtype: ``osid.workflow.ProcessQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_process", 
               "doc": {
                  "headline": "Matches offices that have any process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offices with any\n                process, ``false`` to match offices with no process\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offices with any process, ``false`` to match offices with no process\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_process_terms", 
               "doc": {
                  "headline": "Clears the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_step_id", 
               "doc": {
                  "headline": "Sets the step ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    step_id (osid.id.Id): the step ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``step_id`` is ``null``", 
               "sphinx_param_doc": "        :param step_id: the step ``Id``\n        :type step_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``step_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "step_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_step_id_terms", 
               "doc": {
                  "headline": "Clears the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_step_query", 
               "doc": {
                  "headline": "Tests if an ``StepQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an step query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an step query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_step_query", 
               "doc": {
                  "headline": "Gets the query for an step.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQuery) - the step query", 
               "error_doc": "        raise:  Unimplemented - ``supports_step_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the step query\n        :rtype: ``osid.workflow.StepQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_step_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_step_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_step", 
               "doc": {
                  "headline": "Matches offices with any step.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offices with any\n                step, ``false`` to match offices with no step\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offices with any step, ``false`` to match offices with no step\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_step_terms", 
               "doc": {
                  "headline": "Clears the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_work_id", 
               "doc": {
                  "headline": "Sets the work ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    work_id (osid.id.Id): the work ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``work_id`` is ``null``", 
               "sphinx_param_doc": "        :param work_id: the work ``Id``\n        :type work_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``work_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "work_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_work_id_terms", 
               "doc": {
                  "headline": "Clears the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_work_query", 
               "doc": {
                  "headline": "Tests if a ``WorkQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a work query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a work query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_work_query", 
               "doc": {
                  "headline": "Gets the query for a work.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQuery) - the work query", 
               "error_doc": "        raise:  Unimplemented - ``supports_work_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the work query\n        :rtype: ``osid.workflow.WorkQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_work_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_work_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_work", 
               "doc": {
                  "headline": "Matches offices that have any work.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offices with any\n                work, ``false`` to match offices with no process\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offices with any work, ``false`` to match offices with no process\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_work_terms", 
               "doc": {
                  "headline": "Clears the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_office_id", 
               "doc": {
                  "headline": "Sets the office ``Id`` for this query to match offices that have the specified office as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): a office ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: a office ``Id``\n        :type office_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_office_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_office_query", 
               "doc": {
                  "headline": "Tests if a ``OfficeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_office_query", 
               "doc": {
                  "headline": "Gets the query for a office/ Multiple retrievals produce a nested ``OR`` term.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_office_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_office", 
               "doc": {
                  "headline": "Matches offices with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offices with any\n                ancestor, ``false`` to match root offices\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offices with any ancestor, ``false`` to match root offices\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_office_terms", 
               "doc": {
                  "headline": "Clears the ancestor office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_office_id", 
               "doc": {
                  "headline": "Sets the office ``Id`` for this query to match offices that have the specified office as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): a office ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_id`` is ``null``", 
               "sphinx_param_doc": "        :param office_id: a office ``Id``\n        :type office_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_office_id_terms", 
               "doc": {
                  "headline": "Clears the descendant office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_office_query", 
               "doc": {
                  "headline": "Tests if a ``OfficeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a office query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a office query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_office_query", 
               "doc": {
                  "headline": "Gets the query for a office/ Multiple retrievals produce a nested ``OR`` term.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQuery) - the office query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_office_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query\n        :rtype: ``osid.workflow.OfficeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_office_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_office_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_office", 
               "doc": {
                  "headline": "Matches offices with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offices with any\n                descendant, ``false`` to match leaf offices\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offices with any descendant, ``false`` to match leaf offices\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_office_terms", 
               "doc": {
                  "headline": "Clears the descendant office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_office_query_record", 
               "doc": {
                  "headline": "Gets the office query corresponding to the given ``Office`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): a office record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeQueryRecord) - the office\n                query record", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(office_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_record_type: a office record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office query record\n        :rtype: ``osid.workflow.records.OfficeQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeQueryRecord", 
         "shortname": "OfficeQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeQueryInspector", 
         "shortname": "OfficeQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining office queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_process_id_terms", 
            "get_process_terms", 
            "get_step_id_terms", 
            "get_step_terms", 
            "get_work_id_terms", 
            "get_work_terms", 
            "get_ancestor_office_id_terms", 
            "get_ancestor_office_terms", 
            "get_descendant_office_id_terms", 
            "get_descendant_office_terms", 
            "get_office_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_process_id_terms", 
               "doc": {
                  "headline": "Gets the process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_process_terms", 
               "doc": {
                  "headline": "Gets the process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.ProcessQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.ProcessQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.ProcessQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_step_id_terms", 
               "doc": {
                  "headline": "Gets the step ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_step_terms", 
               "doc": {
                  "headline": "Gets the step query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.StepQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.StepQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.StepQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_work_id_terms", 
               "doc": {
                  "headline": "Gets the work ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_work_terms", 
               "doc": {
                  "headline": "Gets the work query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.WorkQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.WorkQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.WorkQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_office_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_office_terms", 
               "doc": {
                  "headline": "Gets the ancestor office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_office_id_terms", 
               "doc": {
                  "headline": "Gets the descendant office ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_office_terms", 
               "doc": {
                  "headline": "Gets the descendant office query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_office_query_inspector_record", 
               "doc": {
                  "headline": "Gets the office query inspector record corresponding to the given ``Office`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): a office record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeQueryInspectorRecord) - the\n                office query inspector record", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(office_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_record_type: a office record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office query inspector record\n        :rtype: ``osid.workflow.records.OfficeQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeQueryInspectorRecord", 
         "shortname": "OfficeQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeForm", 
         "shortname": "OfficeForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating offices.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``OfficeAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_office_form_record"
         ], 
         "methods": [
            {
               "name": "get_office_form_record", 
               "doc": {
                  "headline": "Gets the ``OfficeFormRecord`` corresponding to the given office record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): a office record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeFormRecord) - the office\n                form record", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(office_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_record_type: a office record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office form record\n        :rtype: ``osid.workflow.records.OfficeFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeFormRecord", 
         "shortname": "OfficeFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeSearchOrder", 
         "shortname": "OfficeSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_office_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_office_search_order_record", 
               "doc": {
                  "headline": "Gets the office search order record corresponding to the given office ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    office_record_type (osid.type.Type): a office record\n                type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeSearchOrderRecord) - the\n                office search order record", 
               "error_doc": "        raise:  NullArgument - ``office_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(office_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_record_type: a office record type\n        :type office_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office search order record\n        :rtype: ``osid.workflow.records.OfficeSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeSearchOrderRecord", 
         "shortname": "OfficeSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeSearch", 
         "shortname": "OfficeSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing office searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_offices", 
            "order_office_results", 
            "get_office_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_offices", 
               "doc": {
                  "headline": "Execute this search among the given list of offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_ids (osid.id.IdList): list of offices\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_ids`` is ``null``", 
               "sphinx_param_doc": "        :param office_ids: list of offices\n        :type office_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "office_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_office_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_search_order (osid.workflow.OfficeSearchOrder):\n                office search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``office_search_order`` is ``null``\n        raise:  Unsupported - ``office_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param office_search_order: office search order\n        :type office_search_order: ``osid.workflow.OfficeSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``office_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.workflow.OfficeSearchOrder", 
                     "var_name": "office_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.workflow.OfficeSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_search_record", 
               "doc": {
                  "headline": "Gets the office search record corresponding to the given office search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    office_search_record_type (osid.type.Type): a office\n                search record type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeSearchRecord) - the office\n                search record", 
               "error_doc": "        raise:  NullArgument - ``office_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(office_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_search_record_type: a office search record type\n        :type office_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office search record\n        :rtype: ``osid.workflow.records.OfficeSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeSearchRecord", 
         "shortname": "OfficeSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeSearchResults", 
         "shortname": "OfficeSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_offices", 
            "get_office_query_inspector", 
            "get_office_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_offices", 
               "doc": {
                  "headline": "Gets the office list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeList) - the office list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office list\n        :rtype: ``osid.workflow.OfficeList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_office_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeQueryInspector) - the office query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office query inspector\n        :rtype: ``osid.workflow.OfficeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_office_search_results_record", 
               "doc": {
                  "headline": "Gets the office search results record corresponding to the given office search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    office_search_record_type (osid.type.Type): a office\n                search record type\n", 
               "return_doc": "        return: (osid.workflow.records.OfficeSearchResultsRecord) - the\n                office search results record", 
               "error_doc": "        raise:  NullArgument - ``office_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(office_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param office_search_record_type: a office search record type\n        :type office_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the office search results record\n        :rtype: ``osid.workflow.records.OfficeSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``office_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(office_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "office_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.workflow.records.OfficeSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.records.OfficeSearchResultsRecord", 
         "shortname": "OfficeSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``OfficeSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.workflow.OfficeReceiver", 
         "shortname": "OfficeReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The office receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Office`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_office", 
            "new_ancestor_office", 
            "new_descendant_office", 
            "changed_office", 
            "deleted_office", 
            "deleted_ancestor_office", 
            "deleted_descendant_office"
         ], 
         "methods": [
            {
               "name": "new_office", 
               "doc": {
                  "headline": "The callback for notifications of new offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the new ``Office``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the new ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_office", 
               "doc": {
                  "headline": "The callback for notifications of new office ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new\n                ``Office`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``Office`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_office", 
               "doc": {
                  "headline": "The callback for notifications of new office descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Office`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Office`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_office", 
               "doc": {
                  "headline": "The callback for notification of updated office.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the updated\n                ``Office``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the updated ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_office", 
               "doc": {
                  "headline": "The callback for notification of deleted offices.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the deleted\n                ``Office``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the deleted ``Office``\n        :type office_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_office", 
               "doc": {
                  "headline": "The callback for notifications of deleted office ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Office`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Office`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_office", 
               "doc": {
                  "headline": "The callback for notifications of deleted office descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    office_id (osid.id.Id): the ``Id`` of the ``Office``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Office`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param office_id: the ``Id`` of the ``Office``\n        :type office_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Office`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "office_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeList", 
         "shortname": "OfficeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``OfficeList`` provides a means for accessing ``Office`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ol.hasNext()) { Office office = ol.getNextOffice();\n    }\n\n    or\n      while (ol.hasNext()) {\n           Office[] offices = ol.getNextOffices(ol.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_office", 
            "get_next_offices"
         ], 
         "methods": [
            {
               "name": "get_next_office", 
               "doc": {
                  "headline": "Gets the next ``Office`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the next ``Office`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Office`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Office`` in this list. The ``has_next()`` method should be used to test that a next ``Office`` is available before calling this method.\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_offices", 
               "doc": {
                  "headline": "Gets the next set of ``Office`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Office`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.workflow.Office) - an array of ``Office``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Office`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Office`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.Office", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeNode", 
         "shortname": "OfficeNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``OfficeHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_office", 
            "get_parent_office_nodes", 
            "get_child_office_nodes"
         ], 
         "methods": [
            {
               "name": "get_office", 
               "doc": {
                  "headline": "Gets the ``Office`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.Office) - the office represented by this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the office represented by this node\n        :rtype: ``osid.workflow.Office``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.Office", 
               "errors": {}
            }, 
            {
               "name": "get_parent_office_nodes", 
               "doc": {
                  "headline": "Gets the parents of this office.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeNodeList) - the parents of this\n                office", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this office\n        :rtype: ``osid.workflow.OfficeNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_office_nodes", 
               "doc": {
                  "headline": "Gets the children of this office.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeNodeList) - the children of this\n                office", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this office\n        :rtype: ``osid.workflow.OfficeNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.workflow.OfficeNodeList", 
         "shortname": "OfficeNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``OfficeNodeList`` provides a means for accessing ``OfficeNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (onl.hasNext()) { OfficeNode node =\n    onl.getNextOfficeNode(); }\n\n    or\n      while (onl.hasNext()) {\n           OfficeNode[] nodes = onl.getNextOfficeNodes(onl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_office_node", 
            "get_next_office_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_office_node", 
               "doc": {
                  "headline": "Gets the next ``OfficeNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.workflow.OfficeNode) - the next ``OfficeNode`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``OfficeNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``OfficeNode`` in this list. The ``has_next()`` method should be used to test that a next ``OfficeNode`` is available before calling this method.\n        :rtype: ``osid.workflow.OfficeNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.workflow.OfficeNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_office_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``OfficeNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``OfficeNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.workflow.OfficeNode) - an array of ``OfficeNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``OfficeNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``OfficeNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.workflow.OfficeNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.workflow.OfficeNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.workflow"
}
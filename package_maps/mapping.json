{
   "name": "mapping", 
   "version": "3.0.0", 
   "title": "Mapping Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Mapping OSID provides a means for managing inventories of places and\nperforming a variety of mapping operations.\n\nLocations\n\nOne aspect of the Mapping OSID provides references to location places\nused in other OSIDs. A ``Location`` may include a spatial coordinate or\ndefined boundary described in a ``SpatialUnit``. Additional sessions\nprovide a means to easily look up locations by ``Coordinate`` or\narbitrary ``SpatialUnit`` as well as to traverse locations through\nlookups of adjacent ``Locations``.\n\n``Locations`` may be structured in hierarchies to convey hierarchical\nrelationships. A room may be located inside a building, within a city\nwithin a state.\n\nPrimitives\n\nThe data interfaces for ``Coordinates`` and ``SpatialUnits`` are defined\nthrough their respective ``Types`` to allow for any kind of coordinate\nor spatial system. A definition for distance resolution is also provided\nto capture an extremely wide array of unit values. ``Distance,``\n``Coordinate,``  ``Heading,`` and ``SpatialUnit`` appear to the OSID as\ncomplex primitive interfaces which are constructed by the consumer in\norder to fulfill the interface contracts. It is required that the\nconsumer and provider agree on the coordinate domain and spatial unit\ntypes through testing of the ``Type`` support.\n\nResource Tracking\n\n``Resources`` may be tracked spatially. Sessions are available to query\nand place ``Resources`` at specific ``Locations`` and ``Coordinates,``\nand receive notifications to changes in their locations.\n\nMap Cataloging\n\n``Locations`` may be organuzed in hierarchical ``Maps`` that offer a\nmeans of federation or layering of map data.\n\nSub Packages\n\nThe Mapping OSID includes a Mapping Route OSID for creating and\nnavigating Routes, a Mapping Path OSID for querying and designing\nphysical ``Paths`` and a Mapping Batch OSID for managing locations in\nbulk.", 
   "interfaces": [
      {
         "fullname": "osid.mapping.MappingProfile", 
         "shortname": "MappingProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The mapping profile describes the interoperability among mapping services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_location_lookup", 
            "supports_location_query", 
            "supports_location_search", 
            "supports_location_admin", 
            "supports_location_notification", 
            "supports_location_hierarchy", 
            "supports_location_hierarchy_design", 
            "supports_location_map", 
            "supports_location_map_assignment", 
            "supports_location_smart_map", 
            "supports_location_adjacency", 
            "supports_location_spatial", 
            "supports_resource_location", 
            "supports_resource_location_update", 
            "supports_resource_location_notification", 
            "supports_resource_position_notification", 
            "supports_my_location", 
            "supports_map_lookup", 
            "supports_map_query", 
            "supports_map_search", 
            "supports_map_admin", 
            "supports_map_notification", 
            "supports_map_hierarchy", 
            "supports_map_hierarchy_design", 
            "supports_mapping_batch", 
            "supports_mapping_path", 
            "supports_mapping_route", 
            "get_location_record_types", 
            "supports_location_record_type", 
            "get_location_search_record_types", 
            "supports_location_search_record_type", 
            "get_map_record_types", 
            "supports_map_record_type", 
            "get_map_search_record_types", 
            "supports_map_search_record_type", 
            "get_resource_location_record_types", 
            "supports_resource_location_record_type", 
            "get_coordinate_types", 
            "supports_coordinate_type", 
            "get_heading_types", 
            "supports_heading_type", 
            "get_spatial_unit_record_types", 
            "supports_spatial_unit_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any map federation is exposed.", 
                  "body": "        Federation is exposed when a specific map may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of maps appears as a single\n        map."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_lookup", 
               "doc": {
                  "headline": "Tests if looking up locations is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_query", 
               "doc": {
                  "headline": "Tests if querying locations is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_search", 
               "doc": {
                  "headline": "Tests if searching locations is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_admin", 
               "doc": {
                  "headline": "Tests if locationadministrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_notification", 
               "doc": {
                  "headline": "Tests if a locationnotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_hierarchy", 
               "doc": {
                  "headline": "Tests if a locationhierarchy service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location hierarchy is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location hierarchy is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_hierarchy_design", 
               "doc": {
                  "headline": "Tests if a location hierarchy design service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if location hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if location hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_map", 
               "doc": {
                  "headline": "Tests if a location map lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location map lookup service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location map lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_map_assignment", 
               "doc": {
                  "headline": "Tests if a location map assignment service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location to map assignment\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location to map assignment service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_smart_map", 
               "doc": {
                  "headline": "Tests if a location smart map service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location smart map service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location smart map service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_adjacency", 
               "doc": {
                  "headline": "Tests if a location adjacency service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location adjacency service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location adjacency service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_location_spatial", 
               "doc": {
                  "headline": "Tests if a location spatial service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location spatial service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location spatial service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_location", 
               "doc": {
                  "headline": "Tests if a resource location service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource location service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource location service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_location_update", 
               "doc": {
                  "headline": "Tests if a resource location update service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource location update\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource location update service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_location_notification", 
               "doc": {
                  "headline": "Tests if a resource location notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource location notification\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource location notification service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_position_notification", 
               "doc": {
                  "headline": "Tests if a resource position notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource position notification\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource position notification service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_my_location", 
               "doc": {
                  "headline": "Tests if a location service is supported for the current agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if my location is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if my location is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_lookup", 
               "doc": {
                  "headline": "Tests if looking up maps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_query", 
               "doc": {
                  "headline": "Tests if querying maps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a map query service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a map query service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_search", 
               "doc": {
                  "headline": "Tests if searching maps is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_admin", 
               "doc": {
                  "headline": "Tests if map administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map administration is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_notification", 
               "doc": {
                  "headline": "Tests if a mapnotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map notification is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a map hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_map_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a map hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if map hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if map hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_mapping_batch", 
               "doc": {
                  "headline": "Tests if the mapping batch service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if maping batch service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if maping batch service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_mapping_path", 
               "doc": {
                  "headline": "Tests if the mapping path service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if maping path service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if maping path service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_mapping_route", 
               "doc": {
                  "headline": "Tests if the mapping route service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if maping route service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if maping route service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_location_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Location`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Location`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Location`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_location_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Location`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a ``Type``\n                indicating a ``Location`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param location_record_type: a ``Type`` indicating a ``Location`` record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Location`` search types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Location`` search types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Location`` search types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_location_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Location`` search type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Location`` search type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``location_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param location_search_record_type: a ``Type`` indicating a ``Location`` search type\n        :type location_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Map`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Map`` types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Map`` types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_map_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Map`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Map`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param map_record_type: a ``Type`` indicating a ``Map`` record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Map`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Map`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Map`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_map_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Map`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Map`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``map_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param map_search_record_type: a ``Type`` indicating a ``Map`` search record type\n        :type map_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_record_types", 
               "doc": {
                  "headline": "Gets the supported ``ResourceLocation`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``ResourceLocation`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``ResourceLocation`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_location_record_type", 
               "doc": {
                  "headline": "Tests if the given ``ResourceLocationRecord`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_location_record_type (osid.type.Type): a\n                ``Type`` indicating a ``ResourceLocation`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_location_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param resource_location_record_type: a ``Type`` indicating a ``ResourceLocation`` type\n        :type resource_location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_location_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_types", 
               "doc": {
                  "headline": "Gets the supported ``Coordinate`` types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Coordinate`` types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Coordinate`` types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_coordinate_type", 
               "doc": {
                  "headline": "Tests if the given ``Coordinate`` type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate_type (osid.type.Type): a ``Type`` indicating\n                a ``Coordinate`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``coordinate_type`` is ``null``", 
               "sphinx_param_doc": "        :param coordinate_type: a ``Type`` indicating a ``Coordinate`` type\n        :type coordinate_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinate_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_heading_types", 
               "doc": {
                  "headline": "Gets the supported ``Heading`` types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Heading`` types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Heading`` types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_heading_type", 
               "doc": {
                  "headline": "Tests if the given ``Heading`` type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    heading_type (osid.type.Type): a ``Type`` indicating a\n                ``Heading`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``heading_type`` is ``null``", 
               "sphinx_param_doc": "        :param heading_type: a ``Type`` indicating a ``Heading`` type\n        :type heading_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``heading_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "heading_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_record_types", 
               "doc": {
                  "headline": "Gets the supported ``SpatialUnit`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``SpatialUnit`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``SpatialUnit`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_spatial_unit_record_type", 
               "doc": {
                  "headline": "Tests if the given ``SpatialUnit`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit_record_type (osid.type.Type): a ``Type``\n                indicating a ``SpatialUnit`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param spatial_unit_record_type: a ``Type`` indicating a ``SpatialUnit`` record type\n        :type spatial_unit_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "spatial_unit_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MappingManager", 
         "shortname": "MappingManager", 
         "category": "managers", 
         "doc": {
            "headline": "The mapping manager provides access to mapping sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``LocationLookupSession:`` a session to retrieve locations\n      * ``LocationQuerySession:`` a session to query for locations\n      * ``LocationSearchSession:`` a session to search for locations\n      * ``LocationAdminSession:`` a session to create and delete\n        locations\n      * ``LocationNotificationSession:`` a session to receive\n        notifications pertaining to location changes\n      * ``LocationHierarchySession:`` a session to examine locations in\n        a hierarchy\n      * ``LocationHierarchyAssignmentSession:`` a session to traverse\n        the location hierarchy\n      * ``LocationMapSession:`` a session to look up location to map\n        mappings\n      * ``LocationMapAssignmentSession:`` a session to manage location\n        to map mappings\n      * ``LocationSmartMapSession:`` a session to manage dynamic maps of\n        locations\n    \n      * ``LocationAdjacencySession:`` a session to query neighboring\n        locations\n      * ``LocationSpatialSession:`` a session to lookup locations\n        spatially\n      * ``ResourceLocationSession:`` a session query resources at\n        locations\n      * ``ResourceLocationUpdateSession:`` a session to assign resources\n        to locations\n      * ``ResourceLocationNotificationSession:`` a session to subscribe\n        to notifications when resources move among locations\n      * ``ResourcePositionNotificationSession:`` a session to subscribe\n        to notifications when resources change positions\n      * ``MyLocationSession:`` a session to query locations for the user\n        agent\n    \n      * ``MapLookupSession:`` a session to retrieve maps\n      * ``MapQuerySession:`` a session to search for maps\n      * ``MapSearchSession:`` a session to search for maps\n      * ``MapAdminSession:`` a session to create and delete maps\n      * ``MapNotificationSession:`` a session to receive notifications\n        pertaining to map changes\n      * ``MapHierarchySession:`` a session to traverse a hierarchy of\n        map\n      * ``MapHierarchyDesignSession:`` a session to manage a map\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.mapping.MappingProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "MappingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "mapping"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "mapping", 
               "name": "MappingProfile"
            }
         ], 
         "method_names": [
            "get_location_lookup_session", 
            "get_location_lookup_session_for_map", 
            "get_location_query_session", 
            "get_location_query_session_for_map", 
            "get_location_search_session", 
            "get_location_search_session_for_map", 
            "get_location_admin_session", 
            "get_location_admin_session_for_map", 
            "get_location_notification_session", 
            "get_location_notification_session_for_map", 
            "get_location_hierarchy_session", 
            "get_location_hierarchy_session_for_map", 
            "get_location_hierarchy_design_session", 
            "get_location_hierarchy_design_session_for_map", 
            "get_location_map_session", 
            "get_location_map_assignment_session", 
            "get_location_smart_map_session", 
            "get_location_adjacency_session", 
            "get_location_adjacency_session_for_map", 
            "get_location_spatial_session", 
            "get_location_spatial_session_for_map", 
            "get_resource_location_session", 
            "get_resource_location_session_for_map", 
            "get_resource_location_update_session", 
            "get_resource_location_update_session_for_map", 
            "get_resource_location_notification_session", 
            "get_resource_location_notification_session_for_map", 
            "get_resource_position_notification_session", 
            "get_resource_position_notification_session_for_map", 
            "get_my_location_session", 
            "get_my_location_session_for_map", 
            "get_map_lookup_session", 
            "get_map_query_session", 
            "get_map_search_session", 
            "get_map_admin_session", 
            "get_map_notification_session", 
            "get_map_hierarchy_session", 
            "get_map_hierarchy_design_session", 
            "get_mapping_batch_manager", 
            "get_mapping_path_manager", 
            "get_mapping_route_manager"
         ], 
         "methods": [
            {
               "name": "get_location_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationLookupSession) - a\n                ``LocationLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationLookupSession``\n        :rtype: ``osid.mapping.LocationLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_lookup_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location lookup service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map\n", 
               "return_doc": "        return: (osid.mapping.LocationLookupSession) - a\n                ``LocationLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Map`` found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationLookupSession``\n        :rtype: ``osid.mapping.LocationLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Map`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuerySession) - a\n                ``LocationQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationQuerySession``\n        :rtype: ``osid.mapping.LocationQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location query service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationQuerySession) - a\n                ``LocationQuerySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationQuerySession``\n        :rtype: ``osid.mapping.LocationQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationSearchSession) - a\n                ``LocationSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationSearchSession``\n        :rtype: ``osid.mapping.LocationSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location search service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationSearchSession) - a\n                ``LocationSearchSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSearchSession``\n        :rtype: ``osid.mapping.LocationSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationAdminSession) - a\n                ``LocationAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationAdminSession``\n        :rtype: ``osid.mapping.LocationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_admin_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location administration service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationAdminSession) - a\n                ``LocationAdminSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdminSession``\n        :rtype: ``osid.mapping.LocationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_receiver (osid.mapping.LocationReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.mapping.LocationNotificationSession) - a\n                ``LocationNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``location_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param location_receiver: the notification callback\n        :type location_receiver: ``osid.mapping.LocationReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``LocationNotificationSession``\n        :rtype: ``osid.mapping.LocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationReceiver", 
                     "var_name": "location_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationReceiver"
               ], 
               "return_type": "osid.mapping.LocationNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_receiver (osid.mapping.LocationReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationNotificationSession) - a\n                ``LocationNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``location_receiver`` or ``map_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param location_receiver: the notification callback\n        :type location_receiver: ``osid.mapping.LocationReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationNotificationSession``\n        :rtype: ``osid.mapping.LocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``location_receiver`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationReceiver", 
                     "var_name": "location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationHierarchySession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchySession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationHierarchyDesignSession) - a\n                ``LocationHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchyDesignSession``\n        :rtype: ``osid.mapping.LocationHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_design_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy design service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchyDesignSession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy_design()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_map_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup location/map mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationMapSession) - a\n                ``LocationMapSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_map()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationMapSession``\n        :rtype: ``osid.mapping.LocationMapSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_map()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_map()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationMapSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_map_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning locations to maps.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationMapAssignmentSession) - a\n                ``LocationMapAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_map_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationMapAssignmentSession``\n        :rtype: ``osid.mapping.LocationMapAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_map_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_map_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationMapAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_smart_map_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage locatin smart maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationSmartMapSession) - a\n                ``LocationSmartMapSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_smart_map()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSmartMapSession``\n        :rtype: ``osid.mapping.LocationSmartMapSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_smart_map()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_smart_map()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationSmartMapSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_adjacency_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location adjacency service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationAdjacencySession) - a\n                ``LocationAdjacencySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_adjacency()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationAdjacencySession``\n        :rtype: ``osid.mapping.LocationAdjacencySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_adjacency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_adjacency()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationAdjacencySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_adjacency_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location adjacency service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationAdjacencySession) - a\n                ``LocationAdjacencySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_adjacency()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdjacencySession``\n        :rtype: ``osid.mapping.LocationAdjacencySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_adjacency()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_adjacency()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationAdjacencySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_spatial_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location spatial service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationSpatialSession) - a\n                ``LocationSpatialSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_spatial()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LocationSpatialSession``\n        :rtype: ``osid.mapping.LocationSpatialSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_spatial()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_spatial()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationSpatialSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_spatial_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location spatial service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationSpatialSession) - a\n                ``LocationSpatialSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_spatial()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSpatialSession``\n        :rtype: ``osid.mapping.LocationSpatialSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_spatial()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_spatial()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationSpatialSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.ResourceLocationSession) - a\n                ``ResourceLocationSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationSession``\n        :rtype: ``osid.mapping.ResourceLocationSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.ResourceLocationSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationSession) - a\n                ``ResourceLocationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationSession``\n        :rtype: ``osid.mapping.ResourceLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourceLocationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_update_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location update service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.ResourceLocationUpdateSession) - a\n                ``ResourceLocationUpdateSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location_update()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationUpdateSession``\n        :rtype: ``osid.mapping.ResourceLocationUpdateSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_update()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_update()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.ResourceLocationUpdateSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_update_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location update service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationUpdateSession) - a\n                ``ResourceLocationUpdateSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location_update()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationUpdateSession``\n        :rtype: ``osid.mapping.ResourceLocationUpdateSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_update()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_update()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourceLocationUpdateSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_location_receiver\n                (osid.mapping.ResourceLocationReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationNotificationSession) - a\n                ``ResourceLocationNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_location_receiver`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_location_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_location_receiver: the notification callback\n        :type resource_location_receiver: ``osid.mapping.ResourceLocationReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationNotificationSession``\n        :rtype: ``osid.mapping.ResourceLocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_location_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourceLocationReceiver", 
                     "var_name": "resource_location_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourceLocationReceiver"
               ], 
               "return_type": "osid.mapping.ResourceLocationNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_location_receiver\n                (osid.mapping.ResourceLocationReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationNotificationSession) - a\n                ``ResourceLocationNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``resource_location_receiver`` or\n                ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_location_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_location_receiver: the notification callback\n        :type resource_location_receiver: ``osid.mapping.ResourceLocationReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationNotificationSession``\n        :rtype: ``osid.mapping.ResourceLocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_location_receiver`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourceLocationReceiver", 
                     "var_name": "resource_location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourceLocationReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourceLocationNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_position_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource position notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_position_receiver\n                (osid.mapping.ResourcePositionReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.mapping.ResourcePositionNotificationSession) - a\n                ``ResourcePositionNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_position_receiver`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_position_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_position_receiver: the notification callback\n        :type resource_position_receiver: ``osid.mapping.ResourcePositionReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ResourcePositionNotificationSession``\n        :rtype: ``osid.mapping.ResourcePositionNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_position_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_position_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_position_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourcePositionReceiver", 
                     "var_name": "resource_position_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourcePositionReceiver"
               ], 
               "return_type": "osid.mapping.ResourcePositionNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_position_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource position notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_position_receiver\n                (osid.mapping.ResourcePositionReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.ResourcePositionNotificationSession) - a\n                ``ResourcePositionNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``resource_position_receiver`` or\n                ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_position_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_position_receiver: the notification callback\n        :type resource_position_receiver: ``osid.mapping.ResourcePositionReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourcePositionNotificationSession``\n        :rtype: ``osid.mapping.ResourcePositionNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_position_receiver`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_position_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_position_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourcePositionReceiver", 
                     "var_name": "resource_position_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourcePositionReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourcePositionNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_location_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my location service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MyLocationSession) - a\n                ``MyLocationLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_location_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MyLocationLookupSession``\n        :rtype: ``osid.mapping.MyLocationSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_location_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_location_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MyLocationSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_location_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my location service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map\n", 
               "return_doc": "        return: (osid.mapping.MyLocationSession) - a\n                ``MyLocationLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Map`` found by the given ``Id``\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_location_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``MyLocationLookupSession``\n        :rtype: ``osid.mapping.MyLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Map`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_location_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_location_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MyLocationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapLookupSession) - a ``MapLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MapLookupSession``\n        :rtype: ``osid.mapping.MapLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQuerySession) - a ``MapQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MapQuerySession``\n        :rtype: ``osid.mapping.MapQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapSearchSession) - a ``MapSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MapSearchSession``\n        :rtype: ``osid.mapping.MapSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapAdminSession) - a ``MapAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MapAdminSession``\n        :rtype: ``osid.mapping.MapAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_receiver (osid.mapping.MapReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.mapping.MapNotificationSession) - a\n                ``MapNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``map_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_receiver: the notification callback\n        :type map_receiver: ``osid.mapping.MapReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``MapNotificationSession``\n        :rtype: ``osid.mapping.MapNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapReceiver", 
                     "var_name": "map_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapReceiver"
               ], 
               "return_type": "osid.mapping.MapNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapHierarchySession) - a\n                ``MapHierarchySession`` for maps", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MapHierarchySession`` for maps\n        :rtype: ``osid.mapping.MapHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for maps", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for maps\n        :rtype: ``osid.mapping.MapHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_batch_manager", 
               "doc": {
                  "headline": "Gets the mapping batch manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.batch.MappingBatchManager) - a\n                ``MappingBatchManager`` for paths", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingBatchManager`` for paths\n        :rtype: ``osid.mapping.batch.MappingBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.batch.MappingBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_path_manager", 
               "doc": {
                  "headline": "Gets the mapping path manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.MappingPathManager) - a\n                ``MappingPathManager`` for paths", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_path()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingPathManager`` for paths\n        :rtype: ``osid.mapping.path.MappingPathManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.MappingPathManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_route_manager", 
               "doc": {
                  "headline": "Gets the mapping route manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.MappingRouteManager) - a\n                ``MappingRouteManager`` for routes", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_route()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingRouteManager`` for routes\n        :rtype: ``osid.mapping.route.MappingRouteManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_route()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_route()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.MappingRouteManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MappingProxyManager", 
         "shortname": "MappingProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The mapping proxy manager provides access to mapping sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager pass a ``Proxy`` for passing information\n    from server environments. The sessions included in this manager are:\n\n      * ``LocationLookupSession:`` a session to retrieve locations\n      * ``LocationQuerySession:`` a session to query for locations\n      * ``LocationSearchSession:`` a session to search for locations\n      * ``LocationAdminSession:`` a session to create and delete\n        locations\n      * ``LocationNotificationSession:`` a session to receive\n        notifications pertaining to location changes\n      * ``LocationHierarchySession:`` a session to examine locations in\n        a hierarchy\n      * ``LocationHierarchyAssignmentSession:`` a session to traverse\n        the location hierarchy\n      * ``LocationMapSession:`` a session to lookup location to map\n        mappings\n      * ``LocationMapAssignmentSession:`` a session to manage location\n        to map mappings\n      * ``LocationSmartMapSession:`` a session to manage dynamic maps of\n        locations\n    \n      * ``LocationAdjacencySession:`` a session to query neighboring\n        locations\n      * ``LocationSpatialSession:`` a session to lookup locations\n        spatially\n      * ``ResourceLocationSession:`` a session query resources at\n        locations\n      * ``ResourceLocationUpdateSession:`` a session to assign resources\n        to locations\n      * ``ResourceLocationNotificationSession:`` a session to subscribe\n        to notifications when resources move among locations\n      * ``ResourcePositionNotificationSession:`` a session to subscribe\n        to notifications when resources change positions\n      * ``MyLocationSession:`` a session to query locations for the user\n        agent\n    \n      * ``MapLookupSession:`` a session to retrieve maps\n      * ``MapQuerySession:`` a session to search for maps\n      * ``MapSearchSession:`` a session to search for maps\n      * ``MapAdminSession:`` a session to create and delete maps\n      * ``MapNotificationSession:`` a session to receive notifications\n        pertaining to map changes\n      * ``MapHierarchySession:`` a session to traverse a hierarchy of\n        map\n      * ``MapHierarchyDesignSession:`` a session to manage a map\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.mapping.MappingProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "MappingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "mapping"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "mapping", 
               "name": "MappingProfile"
            }
         ], 
         "method_names": [
            "get_location_lookup_session", 
            "get_location_lookup_session_for_map", 
            "get_location_query_session", 
            "get_location_query_session_for_map", 
            "get_location_search_session", 
            "get_location_search_session_for_map", 
            "get_location_admin_session", 
            "get_location_admin_session_for_map", 
            "get_location_notification_session", 
            "get_location_notification_session_for_map", 
            "get_location_hierarchy_session", 
            "get_location_hierarchy_session_for_map", 
            "get_location_hierarchy_design_session", 
            "get_location_hierarchy_design_session_for_map", 
            "get_location_map_session", 
            "get_location_map_assignment_session", 
            "get_location_smart_map_session", 
            "get_location_adjacency_session", 
            "get_location_adjacency_session_for_map", 
            "get_location_spatial_session", 
            "get_location_spatial_session_for_map", 
            "get_resource_location_session", 
            "get_resource_location_session_for_map", 
            "get_resource_location_update_session", 
            "get_resource_location_update_session_for_map", 
            "get_resource_location_notification_session", 
            "get_resource_location_notification_session_for_map", 
            "get_resource_position_notification_session", 
            "get_resource_position_notification_session_for_map", 
            "get_my_location_session", 
            "get_my_location_session_for_map", 
            "get_map_lookup_session", 
            "get_map_query_session", 
            "get_map_search_session", 
            "get_map_admin_session", 
            "get_map_notification_session", 
            "get_map_hierarchy_session", 
            "get_map_hierarchy_design_session", 
            "get_mapping_batch_proxy_manager", 
            "get_mapping_path_proxy_manager", 
            "get_mapping_route_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_location_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationLookupSession) - a\n                ``LocationLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationLookupSession``\n        :rtype: ``osid.mapping.LocationLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_lookup_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location lookup service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationLookupSession) - a\n                ``LocationLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Map`` found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationLookupSession``\n        :rtype: ``osid.mapping.LocationLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Map`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationQuerySession) - a\n                ``LocationQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationQuerySession``\n        :rtype: ``osid.mapping.LocationQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location query service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationQuerySession) - a\n                ``LocationQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Map`` found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationQuerySession``\n        :rtype: ``osid.mapping.LocationQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Map`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationSearchSession) - a\n                ``LocationSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSearchSession``\n        :rtype: ``osid.mapping.LocationSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location search service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationSearchSession) - a\n                ``LocationSearchSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSearchSession``\n        :rtype: ``osid.mapping.LocationSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationAdminSession) - a\n                ``LocationAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdminSession``\n        :rtype: ``osid.mapping.LocationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_admin_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location administration service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationAdminSession) - a\n                ``LocationAdminSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdminSession``\n        :rtype: ``osid.mapping.LocationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_receiver (osid.mapping.LocationReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationNotificationSession) - a\n                ``LocationNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``location_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param location_receiver: the notification callback\n        :type location_receiver: ``osid.mapping.LocationReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationNotificationSession``\n        :rtype: ``osid.mapping.LocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationReceiver", 
                     "var_name": "location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_receiver (osid.mapping.LocationReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationNotificationSession) - a\n                ``LocationNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``location_receiver, map_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param location_receiver: the notification callback\n        :type location_receiver: ``osid.mapping.LocationReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationNotificationSession``\n        :rtype: ``osid.mapping.LocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``location_receiver, map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationReceiver", 
                     "var_name": "location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchySession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchySession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchyDesignSession) - a\n                ``LocationHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchyDesignSession``\n        :rtype: ``osid.mapping.LocationHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_hierarchy_design_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location hierarchy design service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationHierarchyDesignSession) - a\n                ``LocationHierarchySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_hierarchy_design()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationHierarchySession``\n        :rtype: ``osid.mapping.LocationHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_map_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup location/map mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationMapSession) - a\n                ``LocationMapSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_map()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationMapSession``\n        :rtype: ``osid.mapping.LocationMapSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_map()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_map()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationMapSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_map_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning locations to maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationMapAssignmentSession) - a\n                ``LocationMapAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_map_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationMapAssignmentSession``\n        :rtype: ``osid.mapping.LocationMapAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_map_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_map_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationMapAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_smart_map_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage location smart maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationSmartMapSession) - a\n                ``LocationSmartMapSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_smart_map()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSmartMapSession``\n        :rtype: ``osid.mapping.LocationSmartMapSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_smart_map()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_smart_map()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationSmartMapSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_adjacency_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location adjacency service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationAdjacencySession) - a\n                ``LocationAdjacencySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_adjacency()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdjacencySession``\n        :rtype: ``osid.mapping.LocationAdjacencySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_adjacency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_adjacency()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationAdjacencySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_adjacency_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location adjacency service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationAdjacencySession) - a\n                ``LocationAdjacencySession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_adjacency()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationAdjacencySession``\n        :rtype: ``osid.mapping.LocationAdjacencySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_adjacency()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_adjacency()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationAdjacencySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_spatial_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location spatial service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationSpatialSession) - a\n                ``LocationSpatialSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_spatial()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSpatialSession``\n        :rtype: ``osid.mapping.LocationSpatialSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_spatial()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_spatial()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationSpatialSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_spatial_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the location spatial service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.LocationSpatialSession) - a\n                ``LocationSpatialSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_location_spatial()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LocationSpatialSession``\n        :rtype: ``osid.mapping.LocationSpatialSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_location_spatial()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_spatial()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.LocationSpatialSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationSession) - a\n                ``ResourceLocationSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationSession``\n        :rtype: ``osid.mapping.ResourceLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationSession) - a\n                ``ResourceLocationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationSession``\n        :rtype: ``osid.mapping.ResourceLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_update_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location update service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationUpdateSession) - a\n                ``ResourceLocationUpdateSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location_update()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationUpdateSession``\n        :rtype: ``osid.mapping.ResourceLocationUpdateSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_update()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_update()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationUpdateSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_update_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location update service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationUpdateSession) - a\n                ``ResourceLocationUpdateSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_location_update()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationUpdateSession``\n        :rtype: ``osid.mapping.ResourceLocationUpdateSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_update()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_update()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationUpdateSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_location_receiver\n                (osid.mapping.ResourceLocationReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationNotificationSession) - a\n                ``ResourceLocationNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_location_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_location_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_location_receiver: the notification callback\n        :type resource_location_receiver: ``osid.mapping.ResourceLocationReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationNotificationSession``\n        :rtype: ``osid.mapping.ResourceLocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_location_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourceLocationReceiver", 
                     "var_name": "resource_location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourceLocationReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource location notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_location_receiver\n                (osid.mapping.ResourceLocationReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationNotificationSession) - a\n                ``ResourceLocationNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``resource_location_receiver, map_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_location_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_location_receiver: the notification callback\n        :type resource_location_receiver: ``osid.mapping.ResourceLocationReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceLocationNotificationSession``\n        :rtype: ``osid.mapping.ResourceLocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_location_receiver, map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_location_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_location_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourceLocationReceiver", 
                     "var_name": "resource_location_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourceLocationReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_position_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource position notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_position_receiver\n                (osid.mapping.ResourcePositionReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationNotificationSession) - a\n                ``ResourcePositionNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_position_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_position_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_position_receiver: the notification callback\n        :type resource_position_receiver: ``osid.mapping.ResourcePositionReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourcePositionNotificationSession``\n        :rtype: ``osid.mapping.ResourceLocationNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_position_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_position_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_position_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourcePositionReceiver", 
                     "var_name": "resource_position_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourcePositionReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourceLocationNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_position_notification_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource position notification service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_position_receiver\n                (osid.mapping.ResourcePositionReceiver): the\n                notification callback\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.ResourcePositionNotificationSession) - a\n                ``ResourcePositionNotificationSession``", 
               "error_doc": "        raise:  NotFound - no map found by the given ``Id``\n        raise:  NullArgument - ``resource_position_receiver, map_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_position_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_position_receiver: the notification callback\n        :type resource_position_receiver: ``osid.mapping.ResourcePositionReceiver``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourcePositionNotificationSession``\n        :rtype: ``osid.mapping.ResourcePositionNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no map found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_position_receiver, map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_position_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_position_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.ResourcePositionReceiver", 
                     "var_name": "resource_position_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.ResourcePositionReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.ResourcePositionNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_location_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my location service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MyLocationSession) - a\n                ``MyLocationLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_location_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyLocationLookupSession``\n        :rtype: ``osid.mapping.MyLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_location_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_location_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MyLocationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_location_session_for_map", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my location service for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MyLocationSession) - a\n                ``MyLocationLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Map`` found by the given ``Id``\n        raise:  NullArgument - ``map_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_location_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map\n        :type map_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyLocationLookupSession``\n        :rtype: ``osid.mapping.MyLocationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Map`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_location_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_location_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MyLocationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapLookupSession) - a ``MapLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapLookupSession``\n        :rtype: ``osid.mapping.MapLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapQuerySession) - a ``MapQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapQuerySession``\n        :rtype: ``osid.mapping.MapQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapSearchSession) - a ``MapSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapSearchSession``\n        :rtype: ``osid.mapping.MapSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapAdminSession) - a ``MapAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapAdminSession``\n        :rtype: ``osid.mapping.MapAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_receiver (osid.mapping.MapReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapNotificationSession) - a\n                ``MapNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``map_receiver`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_receiver: the notification callback\n        :type map_receiver: ``osid.mapping.MapReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapNotificationSession``\n        :rtype: ``osid.mapping.MapNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapReceiver", 
                     "var_name": "map_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapHierarchySession) - a\n                ``MapHierarchySession`` for maps", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MapHierarchySession`` for maps\n        :rtype: ``osid.mapping.MapHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the map hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.mapping.MapHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for maps", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_map_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for maps\n        :rtype: ``osid.mapping.MapHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_map_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.mapping.MapHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets the mapping batch manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.batch.MappingBatchProxyManager) - a\n                ``MappingBatchProxyManager`` for paths", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingBatchProxyManager`` for paths\n        :rtype: ``osid.mapping.batch.MappingBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.batch.MappingBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_path_proxy_manager", 
               "doc": {
                  "headline": "Gets the mapping path manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.MappingPathProxyManager) - a\n                ``MappingPathProxyManager`` for paths", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_path()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingPathProxyManager`` for paths\n        :rtype: ``osid.mapping.path.MappingPathProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.MappingPathProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_mapping_route_proxy_manager", 
               "doc": {
                  "headline": "Gets the mapping route manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.MappingRouteProxyManager) - a\n                ``MappingRouteProxyManager`` for routes", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_mapping_route()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MappingRouteProxyManager`` for routes\n        :rtype: ``osid.mapping.route.MappingRouteProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_mapping_route()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_mapping_route()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.MappingRouteProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationLookupSession", 
         "shortname": "LocationLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving locations.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_lookup_locations", 
            "use_comparative_location_view", 
            "use_plenary_location_view", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "get_location", 
            "get_locations_by_ids", 
            "get_locations_by_genus_type", 
            "get_locations_by_parent_genus_type", 
            "get_locations_by_record_type", 
            "get_locations"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_locations", 
               "doc": {
                  "headline": "Tests if this user can perform ``Location`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_location_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_location_view", 
               "doc": {
                  "headline": "A complete view of the ``Location`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include locations in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_location", 
               "doc": {
                  "headline": "Gets the ``Location`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Location`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Location`` and retained for\n        compatibility."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to retrieve\n", 
               "return_doc": "        return: (osid.mapping.Location) - the returned ``Location``", 
               "error_doc": "        raise:  NotFound - no ``Location`` found with the given ``Id``\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to retrieve\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location``\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Location`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_ids", 
               "doc": {
                  "headline": "Gets a ``LocationList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the locations\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Locations`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    location_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Location``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``location_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_ids: the list of ``Ids`` to retrieve\n        :type location_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location`` list\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``location_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "location_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``LocationList`` corresponding to the given location genus ``Type`` which does not include locations of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known locations\n        or an error results. Otherwise, the returned list may contain\n        only those locations that are accessible through this session."
               }, 
               "arg_doc": "        arg:    location_genus_type (osid.type.Type): a location genus\n                type\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Location``\n                list", 
               "error_doc": "        raise:  NullArgument - ``location_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_genus_type: a location genus type\n        :type location_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location`` list\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``LocationList`` corresponding to the given location genus ``Type`` and include any additional locations with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known locations\n        or an error results. Otherwise, the returned list may contain\n        only those locations that are accessible through this session."
               }, 
               "arg_doc": "        arg:    location_genus_type (osid.type.Type): a location genus\n                type\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Location``\n                list", 
               "error_doc": "        raise:  NullArgument - ``location_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_genus_type: a location genus type\n        :type location_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location`` list\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_record_type", 
               "doc": {
                  "headline": "Gets a ``LocationList`` containing the given location record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known locations\n        or an error results. Otherwise, the returned list may contain\n        only those locations that are accessible through this session."
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a location record\n                type\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Location``\n                list", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_record_type: a location record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location`` list\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations", 
               "doc": {
                  "headline": "Gets all ``Locations``.", 
                  "body": "        In plenary mode, the returned list contains all known locations\n        or an error results. Otherwise, the returned list may contain\n        only those locations that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationList) - a list of ``Locations``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Locations``\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationQuerySession", 
         "shortname": "LocationQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Location`` objects.", 
            "body": "    The search query is constructed using the ``LocationQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated map view: searches include locations in maps of which\n        this map is an ancestor in the map hierarchy\n      * isolated map view: searches are restricted to locations in this\n        map\n\n    \n    Locations may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``LocationQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_search_locations", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "get_location_query", 
            "get_locations_by_query"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_locations", 
               "doc": {
                  "headline": "Tests if this user can perform ``Location`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include locations in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_location_query", 
               "doc": {
                  "headline": "Gets a location query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {}
            }, 
            {
               "name": "get_locations_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Locations`` matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_query (osid.mapping.LocationQuery): the\n                location query\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned\n                ``LocationList``", 
               "error_doc": "        raise:  NullArgument - ``location_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``location_query`` is not of this service", 
               "sphinx_param_doc": "        :param location_query: the location query\n        :type location_query: ``osid.mapping.LocationQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``LocationList``\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``location_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationQuery", 
                     "var_name": "location_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationQuery"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationSearchSession", 
         "shortname": "LocationSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Location`` objects.", 
            "body": "    The search query is constructed using the ``LocationQuery``.\n\n    ``get_locations_by_query()`` is the basic search method and returns\n    a list of ``Locations``. A more advanced search may be performed\n    with ``getLocationsBySearch()``. It accepts a ``LocationSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_locations_by_search()`` returns a ``LocationSearchResults``\n    that can be used to access the resulting ``LocationList`` or be used\n    to perform a search within the result set through\n    ``LocationSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated map view: searches include locations in maps of which\n        this map is an ancestor in the map hierarchy\n      * isolated map view: searches are restricted to locations in this\n        map\n\n    \n    Locations may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``LocationQuery``."
         }, 
         "inherit_fullnames": [
            "osid.mapping.LocationQuerySession"
         ], 
         "inherit_shortnames": [
            "LocationQuerySession"
         ], 
         "inherit_pkg_names": [
            "mapping"
         ], 
         "inheritance": [
            {
               "pkg_name": "mapping", 
               "name": "LocationQuerySession"
            }
         ], 
         "method_names": [
            "get_location_search", 
            "get_location_search_order", 
            "get_locations_by_search", 
            "get_location_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_location_search", 
               "doc": {
                  "headline": "Gets a location search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationSearch) - the location search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location search\n        :rtype: ``osid.mapping.LocationSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationSearch", 
               "errors": {}
            }, 
            {
               "name": "get_location_search_order", 
               "doc": {
                  "headline": "Gets a location search order.", 
                  "body": "        The ``LocationSearchOrder`` is supplied to a ``LocationSearch``\n        to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationSearchOrder) - the location search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location search order\n        :rtype: ``osid.mapping.LocationSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_locations_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_query (osid.mapping.LocationQuery): the\n                location query\n        arg:    location_search (osid.mapping.LocationSearch): the\n                location search\n", 
               "return_doc": "        return: (osid.mapping.LocationSearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``location_query`` or ``location_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``location_query`` or ``location_search``\n                is not of this service", 
               "sphinx_param_doc": "        :param location_query: the location query\n        :type location_query: ``osid.mapping.LocationQuery``\n        :param location_search: the location search\n        :type location_search: ``osid.mapping.LocationSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.mapping.LocationSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_query`` or ``location_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``location_query`` or ``location_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationQuery", 
                     "var_name": "location_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.LocationSearch", 
                     "var_name": "location_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationQuery", 
                  "osid.mapping.LocationSearch"
               ], 
               "return_type": "osid.mapping.LocationSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_from_inspector", 
               "doc": {
                  "headline": "Gets a location query from an inspector.", 
                  "body": "        The inspector is available from a ``LocationSearchResults``."
               }, 
               "arg_doc": "        arg:    location_query_inspector\n                (osid.mapping.LocationQueryInspector): a location query\n                inspector\n", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "        raise:  NullArgument - ``location_query_inspector`` is ``null``\n        raise:  Unsupported - ``location_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param location_query_inspector: a location query inspector\n        :type location_query_inspector: ``osid.mapping.LocationQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``location_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationQueryInspector", 
                     "var_name": "location_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationQueryInspector"
               ], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationAdminSession", 
         "shortname": "LocationAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Locations``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Location,`` a ``LocationForm`` is requested using\n    ``get_location_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``LocationForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``LocationForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``LocationForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``LocationForms`` are requested to the ``Location``\n    ``Id`` that is to be updated using ``getLocationFormForUpdate()``.\n    Similarly, the ``LocationForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``LocationForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Locations``. To unmap a ``Location``\n    from the current ``Map,`` the ``LocationMapAssignmentSession``\n    should be used. These delete operations attempt to remove the\n    ``Location`` itself thus removing it from all known ``Map``\n    catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_create_locations", 
            "can_create_location_with_record_types", 
            "get_location_form_for_create", 
            "create_location", 
            "can_update_locations", 
            "get_location_form_for_update", 
            "update_location", 
            "can_delete_locations", 
            "delete_location", 
            "can_manage_location_aliases", 
            "alias_location"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_locations", 
               "doc": {
                  "headline": "Tests if this user can create ``Locations``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Location`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Location`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Location`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_location_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Location`` using the desired record types.", 
                  "body": "        While ``MappingManager.getLocationRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Location``.\n        Providing an empty array tests if a ``Location`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    location_record_types (osid.type.Type[]): array of\n                location record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Location`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``location_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param location_record_types: array of location record types\n        :type location_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Location`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "location_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_form_for_create", 
               "doc": {
                  "headline": "Gets the location form for creating new locations.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    location_record_types (osid.type.Type[]): array of\n                location record types\n", 
               "return_doc": "        return: (osid.mapping.LocationForm) - the location form", 
               "error_doc": "        raise:  NullArgument - ``location_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get a form with given record\n                types", 
               "sphinx_param_doc": "        :param location_record_types: array of location record types\n        :type location_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the location form\n        :rtype: ``osid.mapping.LocationForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get a form with given record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "location_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.mapping.LocationForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_location", 
               "doc": {
                  "headline": "Creates a new ``Location``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_form (osid.mapping.LocationForm): the form for\n                this ``Location``\n", 
               "return_doc": "        return: (osid.mapping.Location) - the new ``Location``", 
               "error_doc": "        raise:  IllegalState - ``location_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``location_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``location_form`` did not originate from\n                ``get_location_form_for_create()``", 
               "sphinx_param_doc": "        :param location_form: the form for this ``Location``\n        :type location_form: ``osid.mapping.LocationForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Location``\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``location_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``location_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``location_form`` did not originate from ``get_location_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationForm", 
                     "var_name": "location_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationForm"
               ], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_locations", 
               "doc": {
                  "headline": "Tests if this user can update ``Locations``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Location`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Location`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Location`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_location_form_for_update", 
               "doc": {
                  "headline": "Gets the location form for updating an existing location.", 
                  "body": "        A new location form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n", 
               "return_doc": "        return: (osid.mapping.LocationForm) - the location form", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the location form\n        :rtype: ``osid.mapping.LocationForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_location", 
               "doc": {
                  "headline": "Updates an existing location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_form (osid.mapping.LocationForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``location_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``location_id`` or ``location_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``location_form`` did not originate from\n                ``get_location_form_for_update()``", 
               "sphinx_param_doc": "        :param location_form: the form containing the elements to be updated\n        :type location_form: ``osid.mapping.LocationForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``location_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``location_id`` or ``location_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``location_form`` did not originate from ``get_location_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationForm", 
                     "var_name": "location_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_locations", 
               "doc": {
                  "headline": "Tests if this user can delete ``Locations``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Location`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Location`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Location`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_location", 
               "doc": {
                  "headline": "Deletes a ``Location``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to remove\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_location_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Locations``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Location`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Location`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_location", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Location`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Location`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id`` . If the alias is a pointer to another location, it is\n        reassigned to the given location ``Id``."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of a ``Location``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of a ``Location``\n        :type location_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationNotificationSession", 
         "shortname": "LocationNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Location`` objects in this ``Map``.", 
            "body": "    This also includes existing locations that may appear or disappear\n    due to changes in the ``Location`` hierarchy, This session is\n    intended for consumers needing to synchronize their state with this\n    service without the use of polling. Notifications are cancelled when\n    this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``LocationLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_register_for_location_notifications", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "register_for_new_locations", 
            "register_for_new_location_ancestors", 
            "register_for_new_location_descendants", 
            "register_for_changed_locations", 
            "register_for_changed_location", 
            "register_for_deleted_locations", 
            "register_for_deleted_location", 
            "register_for_deleted_location_ancestors", 
            "register_for_deleted_location_descendants"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_location_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Location`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include locations in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_locations", 
               "doc": {
                  "headline": "Register for notifications of new locations.", 
                  "body": "        ``LocationReceiver.newLocation()`` is invoked when a new\n        ``Location`` appears in this map."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_location_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified location in the location hierarchy.", 
                  "body": "        ``LocationReceiver.newLocationAncestor()`` is invoked when the\n        specified location experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the location to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the location to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_location_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified location in the location hierarchy.", 
                  "body": "        ``LocationReceiver.newLocationDescendant()`` is invoked when the\n        specified location experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the location to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the location to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_locations", 
               "doc": {
                  "headline": "Registers for notification of updated locations.", 
                  "body": "        ``LocationReceiver.changedLocation()`` is invoked when a\n        location in this map is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_location", 
               "doc": {
                  "headline": "Registers for notification of an updated location.", 
                  "body": "        ``LocationReceiver.changedLocation()`` is invoked when the\n        specified location in this map is changed."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_locations", 
               "doc": {
                  "headline": "Registers for notification of deleted locations.", 
                  "body": "        ``LocationReceiver.deletedLocation()`` is invoked when a\n        location is deleted or removed from this map."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_location", 
               "doc": {
                  "headline": "Registers for notification of a deleted location.", 
                  "body": "        ``LocationReceiver.deletedLocation()`` is invoked when the\n        specified location is deleted or removed from this map."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_location_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified location in the location hierarchy.", 
                  "body": "        ``LocationReceiver.deletedLocationAncestor()`` is invoked when\n        the specified location experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the location to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the location to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_location_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified location in the location hierarchy.", 
                  "body": "        ``LocationReceiver.deletedLocationDescednant()`` is invoked when\n        the specified location experiences a removal of one of its\n        descdendents."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the location to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the location to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationHierarchySession", 
         "shortname": "LocationHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Location`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Location``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``get_parent_locations()`` and ``getChildLocations()``. To relate\n    these ``Ids`` to another OSID, ``get_location_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Location`` available in the Mapping OSID is known to this\n    hierarchy but does not appear in the hierarchy traversal until added\n    as a root location or a child of another location.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_m_locations()`` or ``get_child_locations()``\n    in lieu of a ``PermissionDenied`` error that may disrupt the\n    traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative location view: location elements may be silently\n        omitted or re-ordered\n      * plenary location view: provides a complete set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_location_hierarchy_id", 
            "get_location_hierarchy", 
            "can_access_location_hierarchy", 
            "use_comparative_location_view", 
            "use_plenary_location_view", 
            "get_root_location_ids", 
            "get_root_locations", 
            "has_parent_locations", 
            "is_parent_of_location", 
            "get_parent_location_ids", 
            "get_parent_locations", 
            "is_ancestor_of_location", 
            "has_child_locations", 
            "is_child_of_location", 
            "get_child_location_ids", 
            "get_child_locations", 
            "is_descendant_of_location", 
            "get_location_node_ids", 
            "get_location_nodes"
         ], 
         "methods": [
            {
               "name": "get_location_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_location_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_location_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_location_view", 
               "doc": {
                  "headline": "The returns from the location methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_location_view", 
               "doc": {
                  "headline": "A complete view of the ``Locations`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_location_ids", 
               "doc": {
                  "headline": "Gets the root location ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root location ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root location ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_locations", 
               "doc": {
                  "headline": "Gets the root location in the location hierarchy.", 
                  "body": "        A location with no parents is an orphan. While all location\n        ``Ids`` are known to the hierarchy, an orphan does not appear in\n        the hierarchy unless explicitly added as a root location or\n        child of another location."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationList) - the root locations", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_locations", 
               "doc": {
                  "headline": "Tests if the ``Location`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the location has parents, f\n                ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the location has parents, f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_location", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    location_id (osid.id.Id): the ``Id`` of a location\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``location_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``id`` or ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param location_id: the ``Id`` of a location\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``location_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_location_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the location", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the location\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_locations", 
               "doc": {
                  "headline": "Gets the parents of the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the parents of the\n                location", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the location\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_location", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    location_id (osid.id.Id): the ``Id`` of a location\n", 
               "return_doc": "        return: (boolean) - ``tru`` e if this ``id`` is an ancestor of\n                ``location_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``id`` or ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param location_id: the ``Id`` of a location\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``tru`` e if this ``id`` is an ancestor of ``location_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_locations", 
               "doc": {
                  "headline": "Tests if a location has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``location_id`` has\n                children, ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``location_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_location", 
               "doc": {
                  "headline": "Tests if a location is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``location_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``id`` or ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``location_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_location_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the location", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the location\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_locations", 
               "doc": {
                  "headline": "Gets the children of the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the children of the\n                location", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the location\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_location", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    location_id (osid.id.Id): the ``Id`` of a location\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``location_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``id`` or ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param location_id: the ``Id`` of a location\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``location_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_location_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the location.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the location.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given location, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a location node", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` to query\n        :type location_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the location.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the location.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given location, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a location node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_location_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the location.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the location.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given location, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.mapping.LocationNode) - a location node", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` to query\n        :type location_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the location.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the location.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given location, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a location node\n        :rtype: ``osid.mapping.LocationNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.mapping.LocationNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationHierarchyDesignSession", 
         "shortname": "LocationHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Location`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Location``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_location_hierarchy_id", 
            "get_location_hierarchy", 
            "can_modify_location_hierarchy", 
            "add_root_location", 
            "add_child_location"
         ], 
         "methods": [
            {
               "name": "get_location_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_location_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_location_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_location", 
               "doc": {
                  "headline": "Adds a root location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of a location\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``location_id`` is already in hierarchy\n        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of a location\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``location_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_location", 
               "doc": {
                  "headline": "Adds a child to a location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of a location\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``map_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of a location\n        :type location_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``map_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationMapSession", 
         "shortname": "LocationMapSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Location`` to ``Map`` locations.", 
            "body": "    A ``Location`` may appear in multiple ``Map`` objects. Each map may\n    have its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_location_map_locations", 
            "use_comparative_location_map_view", 
            "use_plenary_location_map_view", 
            "get_location_ids_by_map", 
            "get_locations_by_map", 
            "get_location_ids_by_maps", 
            "get_locations_by_maps", 
            "get_map_ids_by_location", 
            "get_maps_by_location"
         ], 
         "methods": [
            {
               "name": "can_lookup_location_map_locations", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of location/map locations.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up locations is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up locations is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_location_map_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_location_map_view", 
               "doc": {
                  "headline": "A complete view of the ``Location`` and ``Map`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_location_ids_by_map", 
               "doc": {
                  "headline": "Gets the list of ``Location Ids`` associated with a ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related location ``Ids``", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related location ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_map", 
               "doc": {
                  "headline": "Gets the list of ``Locations`` associated with a ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - list of related locations", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_location_ids_by_maps", 
               "doc": {
                  "headline": "Gets the list of ``Location Ids`` corresponding to a list of ``Maps``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_ids (osid.id.IdList): list of map ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of location ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``map_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_ids: list of map ``Ids``\n        :type map_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of location ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "map_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_locations_by_maps", 
               "doc": {
                  "headline": "Gets the list of ``Locations`` corresponding to a list of ``Maps``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_ids (osid.id.IdList): list of map ``Ids``\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - list of locations", 
               "error_doc": "        raise:  NullArgument - ``map_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_ids: list of map ``Ids``\n        :type map_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "map_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_map_ids_by_location", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Ids`` mapped to a ``Location``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): ``Id`` of a ``Location``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of maps", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: ``Id`` of a ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of maps\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_location", 
               "doc": {
                  "headline": "Gets the ``Maps`` mapped to a ``Location``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): ``Id`` of a ``Location``\n", 
               "return_doc": "        return: (osid.mapping.MapList) - list of maps", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: ``Id`` of a ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of maps\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationMapAssignmentSession", 
         "shortname": "LocationMapAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Locations`` to ``Map`` objects A ``Location`` may appear in multiple ``Map`` objects and removing the last reference to a ``Location`` is the equivalent of deleting it.", 
            "body": "    Each ``Map`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Location`` to another ``Map`` is not a\n    copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_locations", 
            "can_assign_locations_to_map", 
            "get_assignable_map_ids", 
            "get_assignable_map_ids_for_location", 
            "assign_location_to_map", 
            "unassign_location_from_map"
         ], 
         "methods": [
            {
               "name": "can_assign_locations", 
               "doc": {
                  "headline": "Tests if this user can alter location/map mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known location methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if location is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if location is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_locations_to_map", 
               "doc": {
                  "headline": "Tests if this user can alter location/map mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known location methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``map_id`` is ``null``", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_map_ids", 
               "doc": {
                  "headline": "Gets a list of maps including and under the given map node in which any location can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable map ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable map ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_map_ids_for_location", 
               "doc": {
                  "headline": "Gets a list of maps including and under the given map node in which a specific location can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable map ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``map_id`` or ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable map ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_location_to_map", 
               "doc": {
                  "headline": "Adds an existing ``Location`` to a ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``location_id`` is already assigned to\n                ``map_id``\n        raise:  NotFound - ``location_id`` or ``map_id`` not found\n        raise:  NullArgument - ``location_id`` or ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``location_id`` is already assigned to ``map_id``\n        :raise: ``NotFound`` -- ``location_id`` or ``map_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_location_from_map", 
               "doc": {
                  "headline": "Removes a ``Location`` from a ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``location_id`` or ``map_id`` not found or\n                ``location_id`` not assigned to ``map_id``\n        raise:  NullArgument - ``location_id`` or ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` or ``map_id`` not found or ``location_id`` not assigned to ``map_id``\n        :raise: ``NullArgument`` -- ``location_id`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationSmartMapSession", 
         "shortname": "LocationSmartMapSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``LocationQuery`` can be retrieved from this session and mapped to\n    this ``Map`` to create a virtual collection of ``Locations``. The\n    locations may be sequenced using the ``LocationSearchOrder`` from\n    this session.\n\n    This ``Map`` has a default query that matches any location and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``LocationQueryInspector``. The query may be\n    modified by converting the inspector back to a ``LocationQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_manage_smart_maps", 
            "get_location_query", 
            "get_location_search_order", 
            "apply_location_query", 
            "inspec_location_query", 
            "apply_location_sequencing", 
            "get_location_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_maps", 
               "doc": {
                  "headline": "Tests if this user can manage smart maps.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart map management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart map management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_location_query", 
               "doc": {
                  "headline": "Gets a location query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {}
            }, 
            {
               "name": "get_location_search_order", 
               "doc": {
                  "headline": "Gets a location search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationSearchOrder) - the location search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location search order\n        :rtype: ``osid.mapping.LocationSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_location_query", 
               "doc": {
                  "headline": "Applies a location query to this map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_query (osid.mapping.LocationQuery): the\n                location query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``location_query`` not of this service", 
               "sphinx_param_doc": "        :param location_query: the location query\n        :type location_query: ``osid.mapping.LocationQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``location_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationQuery", 
                     "var_name": "location_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspec_location_query", 
               "doc": {
                  "headline": "Gets a location query inspector for this map.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQueryInspector) - the location\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query inspector\n        :rtype: ``osid.mapping.LocationQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_location_sequencing", 
               "doc": {
                  "headline": "Applies a location search order to this map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_search_order\n                (osid.mapping.LocationSearchOrder): the location search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``location_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param location_search_order: the location search order\n        :type location_search_order: ``osid.mapping.LocationSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``location_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationSearchOrder", 
                     "var_name": "location_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_from_inspector", 
               "doc": {
                  "headline": "Gets a location query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_query_inspector\n                (osid.mapping.LocationQueryInspector): a location query\n                inspector\n", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "        raise:  NullArgument - ``location_query_inspector`` is ``null``\n        raise:  Unsupported - ``location_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param location_query_inspector: a location query inspector\n        :type location_query_inspector: ``osid.mapping.LocationQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``location_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationQueryInspector", 
                     "var_name": "location_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationQueryInspector"
               ], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationAdjacencySession", 
         "shortname": "LocationAdjacencySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to traverse through a map.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_lookup_location_adjacencies", 
            "use_comparative_location_view", 
            "use_plenary_location_view", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "get_adjacent_locations", 
            "is_adjacent"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_location_adjacencies", 
               "doc": {
                  "headline": "Tests if this user can query adjacenies of locations A return of true does not guarantee successful authorization.", 
                  "body": "        A return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if location adjacency methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if location adjacency methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_location_view", 
               "doc": {
                  "headline": "The returns from the traversal methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_location_view", 
               "doc": {
                  "headline": "A complete view of the method returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include paths in maps which are children\n        of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_adjacent_locations", 
               "doc": {
                  "headline": "Gets a list of adjacent locations for the given location.", 
                  "body": "        The adjacent locations reflect the locations at the same level\n        of the location hierarchy."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the given location ``Id``\n        arg:    hops (cardinal): the number of hops to include. 0\n                returns an empty list. 1 returns the immediate adjacent\n                locations.\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - a list of locations", 
               "error_doc": "        raise:  NotFound - ``location_id`` is not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the given location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param hops: the number of hops to include. 0 returns an empty list. 1 returns the immediate adjacent locations.\n        :type hops: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: a list of locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "hops", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_adjacent", 
               "doc": {
                  "headline": "Tests if two locations of the same type are adjacent.", 
                  "body": "        A location is not adjacent if contained within another location."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the given location ``Id``\n        arg:    another_location_id (osid.id.Id): the given location\n                ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` of the locations are adjacent,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``location_id`` or ``another_location_id`` is\n                not found\n        raise:  NullArgument - ``location_id`` or\n                ``another_location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the given location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param another_location_id: the given location ``Id``\n        :type another_location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` of the locations are adjacent, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` or ``another_location_id`` is not found\n        :raise: ``NullArgument`` -- ``location_id`` or ``another_location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "another_location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationSpatialSession", 
         "shortname": "LocationSpatialSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving locations through spatial queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_lookup_locations", 
            "use_comparative_location_view", 
            "use_plenary_location_view", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "get_location_by_coordinate", 
            "get_locations_by_coordinates", 
            "get_locations_in_spatial_unit", 
            "get_locations_overlapping_spatial_unit"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_locations", 
               "doc": {
                  "headline": "Tests if this user can perform ``Location`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_location_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_location_view", 
               "doc": {
                  "headline": "A complete view of the ``Location`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include locations in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_location_by_coordinate", 
               "doc": {
                  "headline": "Gets the closest bounding location of the given coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate (osid.mapping.Coordinate): a coordinate\n", 
               "return_doc": "        return: (osid.mapping.Location) - the returned ``Location``", 
               "error_doc": "        raise:  NullArgument - ``coordinate`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - coordinate not supported", 
               "sphinx_param_doc": "        :param coordinate: a coordinate\n        :type coordinate: ``osid.mapping.Coordinate``\n", 
               "sphinx_return_doc": "        :return: the returned ``Location``\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinate`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- coordinate not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.Coordinate"
               ], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_locations_by_coordinates", 
               "doc": {
                  "headline": "Gets the closest bounding locations in the given coordinate list.", 
                  "body": "        In plenary mode, all locations are returned for each supplied\n        coodrinate or an error results. In comparative mode, the\n        returned list may omit inaccessible locations or reorder them."
               }, 
               "arg_doc": "        arg:    coordinates (osid.mapping.CoordinateList): a coordinate\n                list\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Locations``", 
               "error_doc": "        raise:  NullArgument - ``coordinates`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - a coordinate is not supported", 
               "sphinx_param_doc": "        :param coordinates: a coordinate list\n        :type coordinates: ``osid.mapping.CoordinateList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Locations``\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinates`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- a coordinate is not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.CoordinateList", 
                     "var_name": "coordinates", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.CoordinateList"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_locations_in_spatial_unit", 
               "doc": {
                  "headline": "Gets the locations that are included inside the given spatial unit.", 
                  "body": "        In plenary mode, all locations are returned or an error results."
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Locations``", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "        :return: the returned ``Locations``\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_locations_overlapping_spatial_unit", 
               "doc": {
                  "headline": "Gets the locations that are included inside or touch the given spatial unit.", 
                  "body": "        In plenary mode, all locations are returned or an error results."
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the returned ``Locations``", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "        :return: the returned ``Locations``\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourceLocationSession", 
         "shortname": "ResourceLocationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to look up resources on a map.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_access_resource_locations", 
            "use_comparative_resource_location_view", 
            "use_plenary_resource_location_view", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "get_resource_location", 
            "get_resource_locations", 
            "get_resources_at_location", 
            "get_resources_at_location_by_genus_type", 
            "get_resources_at_spatial_unit", 
            "get_resources_at_spatial_unit_by_genus_type"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_resource_locations", 
               "doc": {
                  "headline": "Tests if this user can access the locations of resources.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer location\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if location methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if location methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_resource_location_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_resource_location_view", 
               "doc": {
                  "headline": "A complete view of the ``Location`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include paths in maps which are children\n        of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_location", 
               "doc": {
                  "headline": "Gets the current closest bounding location of the given resource.", 
                  "body": "        The returned ResourceLocation may not indicate a known location\n        if no location is known."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocation) - the current location", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not on map\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the current location\n        :rtype: ``osid.mapping.ResourceLocation``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not on map\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourceLocation", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_locations", 
               "doc": {
                  "headline": "Gets the current closest bounding locations of the given resources.", 
                  "body": "        In plenary mode, the returned list contains all of the locations\n        of the supplied resources or an error results. In comparative\n        mode, inaccessible resources may be omitted or duplicates\n        suppressed or reordered."
               }, 
               "arg_doc": "        arg:    resource_ids (osid.id.IdList): a resource list\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationList) - the current\n                locations", 
               "error_doc": "        raise:  NotFound - a resource ``Id`` is not on map\n        raise:  NullArgument - ``resource_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_ids: a resource list\n        :type resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the current locations\n        :rtype: ``osid.mapping.ResourceLocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a resource ``Id`` is not on map\n        :raise: ``NullArgument`` -- ``resource_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.mapping.ResourceLocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_at_location", 
               "doc": {
                  "headline": "Gets the current resources at or within the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationList) - the resources at\n                the location", 
               "error_doc": "        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the resources at the location\n        :rtype: ``osid.mapping.ResourceLocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.ResourceLocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_at_location_by_genus_type", 
               "doc": {
                  "headline": "Gets the current resources at or within the given location for a resource genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n        arg:    resource_genus_type (osid.type.Type): a resource genus\n                type\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationList) - the resources at\n                the location", 
               "error_doc": "        raise:  NotFound - ``location_id`` not found\n        raise:  NullArgument - ``location_id`` or\n                ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param resource_genus_type: a resource genus type\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resources at the location\n        :rtype: ``osid.mapping.ResourceLocationList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``location_id`` not found\n        :raise: ``NullArgument`` -- ``location_id`` or ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.ResourceLocationList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_at_spatial_unit", 
               "doc": {
                  "headline": "Gets the current resource within the given spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationList) - the resources at\n                the location", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "        :return: the resources at the location\n        :rtype: ``osid.mapping.ResourceLocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "osid.mapping.ResourceLocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_at_spatial_unit_by_genus_type", 
               "doc": {
                  "headline": "Gets the current resource within the given spatial unit for a given resource genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n        arg:    resource_genus_type (osid.type.Type): a resource genus\n                type\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocationList) - the resources at\n                the location", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` or\n                ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n        :param resource_genus_type: a resource genus type\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resources at the location\n        :rtype: ``osid.mapping.ResourceLocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` or ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.ResourceLocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourceLocationUpdateSession", 
         "shortname": "ResourceLocationUpdateSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines update positions of resources.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_update_resource_locations", 
            "update_resource_location", 
            "update_resource_coordinate"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_update_resource_locations", 
               "doc": {
                  "headline": "Tests if this user can set the locations of resources.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer location\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if location methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if location methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "update_resource_location", 
               "doc": {
                  "headline": "Updates the location of the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    location_id (osid.id.Id): a location ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_id`` or ``location_id`` is not\n                found\n        raise:  NullArgument - ``resource_id`` or ``location_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` or ``location_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` or ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_resource_coordinate", 
               "doc": {
                  "headline": "Updates the coordinate of the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    coordinate (osid.mapping.Coordinate): a coordinate\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` or ``coordinate`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - coordinate not supported", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param coordinate: a coordinate\n        :type coordinate: ``osid.mapping.Coordinate``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` or ``coordinate`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- coordinate not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.Coordinate"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourceLocationNotificationSession", 
         "shortname": "ResourceLocationNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to resources locations in this ``Map``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_register_for_resource_location_notifications", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "register_for_entered_locations", 
            "register_for_entered_location", 
            "register_for_entered_locations_for_resource", 
            "register_for_entered_locations_for_resources_by_genus_type", 
            "register_for_exited_locations", 
            "register_for_exited_location", 
            "register_for_exited_locations_for_resource", 
            "register_for_exited_locations_for_resources_by_genus_type"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_resource_location_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may wish not to offer\n        notification operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include locations in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_entered_locations", 
               "doc": {
                  "headline": "Register for notifications of entered locations for a resource.", 
                  "body": "        ``ResourceLocationReceiver.enteredLocation()`` is invoked when a\n        resource appears in a new location."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_entered_location", 
               "doc": {
                  "headline": "Register for notifications of an entered location.", 
                  "body": "        ``ResourceLocationReceiver.enteredLocation()`` is invoked when a\n        resource appears in the specified location."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_entered_locations_for_resource", 
               "doc": {
                  "headline": "Register for notifications of entered locations.", 
                  "body": "        ``ResourceLocationReceiver.enteredLocation()`` is invoked when\n        the specified resource appears in a new location."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_entered_locations_for_resources_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of entered locations for the given resource genus type.", 
                  "body": "        ``ResourceLocationReceiver.enteredLocation()`` is invoked when a\n        resource appears in a new location."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): the genus type of\n                the ``Resource`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_genus_type: the genus type of the ``Resource`` to monitor\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_exited_locations", 
               "doc": {
                  "headline": "Register for notifications of exited locations for a resource.", 
                  "body": "        ``ResourceLocationReceiver.exitedLocation()`` is invoked when a\n        resource exits a location."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_exited_location", 
               "doc": {
                  "headline": "Register for notifications of an exited location.", 
                  "body": "        ``ResourceLocationReceiver.exitedLocation()`` is invoked when a\n        resource exits the specified location."
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location`` to monitor\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_exited_locations_for_resource", 
               "doc": {
                  "headline": "Register for notifications of exited locations.", 
                  "body": "        ``ResourceLocationReceiver.exitedLocation()`` is invoked when\n        the specified resource exits a location."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_exited_locations_for_resources_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of exited locations for the given resource genus type.", 
                  "body": "        ``ResourceLocationReceiver.exitedLocation()`` is invoked when a\n        resource exits a location."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): the genus type of\n                the ``Resource`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_genus_type: the genus type of the ``Resource`` to monitor\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourcePositionNotificationSession", 
         "shortname": "ResourcePositionNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to resource positions in this ``Map``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_register_for_resource_path_notifications", 
            "use_federated_map_view", 
            "use_isolated_map_view", 
            "register_for_moved_resources", 
            "register_for_moved_resource", 
            "register_for_moved_resources_by_genus_type", 
            "register_for_entered_spatial_unit", 
            "register_for_entered_spatial_unit_for_resource", 
            "register_for_entered_spatial_unit_for_resource_by_genus_type", 
            "register_for_exited_spatial_unit", 
            "register_for_exited_spatial_unit_for_resource", 
            "register_for_exited_spatial_unit_for_resources_by_genus_type"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_resource_path_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may wish not to offer\n        notification operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_map_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include positions in maps which are\n        children of this map in the map hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_map_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this map only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_moved_resources", 
               "doc": {
                  "headline": "Registers for notification of moved resources.", 
                  "body": "        ``ResourcePositionReceiver.movedResource()`` is invoked when a\n        resource changes coordinates."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_moved_resource", 
               "doc": {
                  "headline": "Registers for notification of moved resources.", 
                  "body": "        ``ResourcePositionReceiver.movedResource()`` is invoked when the\n        specified resource changes coordinates."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_moved_resources_by_genus_type", 
               "doc": {
                  "headline": "Registers for notification of moved resources for the given resource genus type.", 
                  "body": "        ``ResourcePositionReceiver.movedResource()`` is invoked when a\n        resource changes coordinates."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): the genus type of\n                the ``Resource`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_genus_type: the genus type of the ``Resource`` to monitor\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_entered_spatial_unit", 
               "doc": {
                  "headline": "Register for notifications of an entered spatial unit.", 
                  "body": "        ``ResourcePositionReceiver.enteredSpatialUnit()`` is invoked\n        when a resource appears in the specified spatial unit."
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "register_for_entered_spatial_unit_for_resource", 
               "doc": {
                  "headline": "Register for notifications of an entered spatial unit.", 
                  "body": "        ``ResourcePositionReceiver.enteredSpatialUnit()`` is invoked\n        when the specified resource appears in the specified spatial\n        unit."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``spatial_unit`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "register_for_entered_spatial_unit_for_resource_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of an entered spatial unit for resources of the given resource genus type.", 
                  "body": "        ``ResourcePositionReceiver.enteredSpatialUnit()`` is invoked\n        when the specified resource appears in the specified spatial\n        unit."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.id.Id): the genus type of the\n                ``Resource`` to monitor\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` or\n                ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param resource_genus_type: the genus type of the ``Resource`` to monitor\n        :type resource_genus_type: ``osid.id.Id``\n        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` or ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "register_for_exited_spatial_unit", 
               "doc": {
                  "headline": "Register for notifications of an exited spatial unit.", 
                  "body": "        ``ResourcePositionReceiver.exitedSpatialUnit()`` is invoked when\n        a resource exits the specified spatial unit."
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "register_for_exited_spatial_unit_for_resource", 
               "doc": {
                  "headline": "Register for notifications of an exited spatial unit.", 
                  "body": "        ``ResourcePositionReceiver.exitedSpatialUnit()`` is invoked when\n        the specified resource exits the specified spatial unit."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``spatial_unit`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "register_for_exited_spatial_unit_for_resources_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of an exited spatial unit for the given resource genus type.", 
                  "body": "        ``ResourcePositionReceiver.exitedSpatialUnit()`` is invoked when\n        a resource exits the specified spatial unit."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): the genus type of\n                the ``Resource`` to monitor\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the\n                ``SpatialUnit`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_t_ype`` or\n                ``spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - spatial unit not supported", 
               "sphinx_param_doc": "        :param resource_genus_type: the genus type of the ``Resource`` to monitor\n        :type resource_genus_type: ``osid.type.Type``\n        :param spatial_unit: the ``SpatialUnit`` to monitor\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_t_ype`` or ``spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- spatial unit not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MyLocationSession", 
         "shortname": "MyLocationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to route between locations.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_id", 
            "get_map", 
            "can_access_my_location", 
            "at_designated_location", 
            "get_my_location", 
            "get_my_coordinate", 
            "get_nearest_locations_to_me", 
            "get_nearest_location_to_me_by_genus_type"
         ], 
         "methods": [
            {
               "name": "get_map_id", 
               "doc": {
                  "headline": "Gets the ``Map``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Map Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Map Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_my_location", 
               "doc": {
                  "headline": "Tests if this user can query own location.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer location\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if location methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if location methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "at_designated_location", 
               "doc": {
                  "headline": "Tests if this agent is at a designated location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the agent is at a designated\n                location, ``false`` otherrwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the agent is at a designated location, ``false`` otherrwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_my_location", 
               "doc": {
                  "headline": "Gets the current location of this agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Location) - the current location", 
               "error_doc": "        raise:  IllegalState - ``at_designated_location()`` is ``false``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the current location\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``at_designated_location()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_my_coordinate", 
               "doc": {
                  "headline": "Gets the current coordinate of this agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the current coordinate", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the current coordinate\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_nearest_locations_to_me", 
               "doc": {
                  "headline": "Gets the current nearest locations to this agent ordered by distance.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationList) - the nearest locations", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the nearest locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_nearest_location_to_me_by_genus_type", 
               "doc": {
                  "headline": "Gets the current nearest location of this agent of the specified location genus type ordered by distance.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_genus_type (osid.type.Type): a location genus\n                type\n", 
               "return_doc": "        return: (osid.mapping.LocationList) - the nearest locations", 
               "error_doc": "        raise:  NullArgument - ``location_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param location_genus_type: a location genus type\n        :type location_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the nearest locations\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapLookupSession", 
         "shortname": "MapLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Map`` objects.", 
            "body": "    The ``Map`` represents a collection of locations.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Maps`` it can access, without breaking execution.\n    However, an assessment may only be useful if all ``Maps`` referenced\n    by it are available, and a test-taking application may sacrifice\n    some interoperability for the sake of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_maps", 
            "use_comparative_map_view", 
            "use_plenary_map_view", 
            "get_map", 
            "get_maps_by_ids", 
            "get_maps_by_genus_type", 
            "get_maps_by_parent_genus_type", 
            "get_maps_by_record_type", 
            "get_maps_by_provider", 
            "get_maps"
         ], 
         "methods": [
            {
               "name": "can_lookup_maps", 
               "doc": {
                  "headline": "Tests if this user can perform ``Map`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_map_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_map_view", 
               "doc": {
                  "headline": "A complete view of the ``Map`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Map`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Map`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.Map) - the map", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the map\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_ids", 
               "doc": {
                  "headline": "Gets a ``MapList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the maps\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Maps`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    map_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``Map`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``map_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_ids: the list of ``Ids`` to retrieve\n        :type map_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Map`` list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``map_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "map_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``MapList`` corresponding to the given map genus ``Type`` which does not include maps of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known maps or an\n        error results. Otherwise, the returned list may contain only\n        those maps that are accessible through this session."
               }, 
               "arg_doc": "        arg:    map_genus_type (osid.type.Type): a map genus type\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``Map`` list", 
               "error_doc": "        raise:  NullArgument - ``map_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_genus_type: a map genus type\n        :type map_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Map`` list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``MapList`` corresponding to the given map genus ``Type`` and include any additional maps with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known maps or an\n        error results. Otherwise, the returned list may contain only\n        those maps that are accessible through this session."
               }, 
               "arg_doc": "        arg:    map_genus_type (osid.type.Type): a map genus type\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``Map`` list", 
               "error_doc": "        raise:  NullArgument - ``map_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_genus_type: a map genus type\n        :type map_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Map`` list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_record_type", 
               "doc": {
                  "headline": "Gets a ``MapList`` containing the given map record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known maps or an\n        error results. Otherwise, the returned list may contain only\n        those maps that are accessible through this session."
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a map record type\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``Map`` list", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_record_type: a map record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Map`` list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps_by_provider", 
               "doc": {
                  "headline": "Gets a ``MapList`` for the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known maps or an\n        error results. Otherwise, the returned list may contain only\n        those maps that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``Map`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Map`` list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_maps", 
               "doc": {
                  "headline": "Gets all ``Maps``.", 
                  "body": "        In plenary mode, the returned list contains all known maps or an\n        error results. Otherwise, the returned list may contain only\n        those maps that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapList) - a list of ``Maps``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Maps``\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapQuerySession", 
         "shortname": "MapQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Map`` objects.", 
            "body": "    The search query is constructed using the ``MapQuery``.\n\n    Maps may have a query record indicated by their respective record\n    types. The query record is accessed via the ``MapQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_maps", 
            "get_map_query", 
            "get_maps_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_maps", 
               "doc": {
                  "headline": "Tests if this user can perform ``Map`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_map_query", 
               "doc": {
                  "headline": "Gets a map query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQuery) - the map query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map query\n        :rtype: ``osid.mapping.MapQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQuery", 
               "errors": {}
            }, 
            {
               "name": "get_maps_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Maps`` matching the given map query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_query (osid.mapping.MapQuery): the map query\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the returned ``MapList``", 
               "error_doc": "        raise:  NullArgument - ``map_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``map_query`` is not of this service", 
               "sphinx_param_doc": "        :param map_query: the map query\n        :type map_query: ``osid.mapping.MapQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``MapList``\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``map_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapQuery", 
                     "var_name": "map_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapQuery"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapSearchSession", 
         "shortname": "MapSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Map`` objects.", 
            "body": "    The search query is constructed using the ``MapQuery``.\n\n    ``get_maps_by_query()`` is the basic search method and returns a\n    list of ``Maps``. A more advanced search may be performed with\n    ``getMapsBySearch()``. It accepts a ``MapSearch`` in addition to the\n    query for the purpose of specifying additional options affecting the\n    entire search, such as ordering. ``get_maps_by_search()`` returns a\n    ``MapSearchResults`` that can be used to access the resulting\n    ``MapList`` or be used to perform a search within the result set\n    through ``MapSearch``.\n    \n    Maps may have a query record indicated by their respective record\n    types. The query record is accessed via the ``MapQuery``."
         }, 
         "inherit_fullnames": [
            "osid.mapping.MapQuerySession"
         ], 
         "inherit_shortnames": [
            "MapQuerySession"
         ], 
         "inherit_pkg_names": [
            "mapping"
         ], 
         "inheritance": [
            {
               "pkg_name": "mapping", 
               "name": "MapQuerySession"
            }
         ], 
         "method_names": [
            "get_map_search", 
            "get_map_search_order", 
            "get_maps_by_search", 
            "get_map_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_map_search", 
               "doc": {
                  "headline": "Gets a map search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapSearch) - the map search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map search\n        :rtype: ``osid.mapping.MapSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapSearch", 
               "errors": {}
            }, 
            {
               "name": "get_map_search_order", 
               "doc": {
                  "headline": "Gets a map search order.", 
                  "body": "        The ``MapSearchOrder`` is supplied to a ``MapSearch`` to specify\n        the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapSearchOrder) - the map search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map search order\n        :rtype: ``osid.mapping.MapSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_maps_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_query (osid.mapping.MapQuery): the map query\n        arg:    map_search (osid.mapping.MapSearch): the map search\n", 
               "return_doc": "        return: (osid.mapping.MapSearchResults) - the returned search\n                results", 
               "error_doc": "        raise:  NullArgument - ``map_query`` or ``map_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``map_query`` or ``map_search`` is not of\n                this service", 
               "sphinx_param_doc": "        :param map_query: the map query\n        :type map_query: ``osid.mapping.MapQuery``\n        :param map_search: the map search\n        :type map_search: ``osid.mapping.MapSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.mapping.MapSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_query`` or ``map_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``map_query`` or ``map_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapQuery", 
                     "var_name": "map_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.MapSearch", 
                     "var_name": "map_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapQuery", 
                  "osid.mapping.MapSearch"
               ], 
               "return_type": "osid.mapping.MapSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_query_from_inspector", 
               "doc": {
                  "headline": "Gets a map query from an inspector.", 
                  "body": "        The inspector is available from a ``MapSearchResults``."
               }, 
               "arg_doc": "        arg:    map_query_inspector (osid.mapping.MapQueryInspector): a\n                map query inspector\n", 
               "return_doc": "        return: (osid.mapping.MapQuery) - the map query", 
               "error_doc": "        raise:  NullArgument - ``map_query_inspector`` is ``null``\n        raise:  Unsupported - ``map_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param map_query_inspector: a map query inspector\n        :type map_query_inspector: ``osid.mapping.MapQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the map query\n        :rtype: ``osid.mapping.MapQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``map_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapQueryInspector", 
                     "var_name": "map_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapQueryInspector"
               ], 
               "return_type": "osid.mapping.MapQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapAdminSession", 
         "shortname": "MapAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Maps``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Map,`` a ``MapForm`` is requested using\n    ``get_map_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``MapForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``MapForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``MapForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``MapForms`` are requested to the ``Map``  ``Id`` that\n    is to be updated using ``getMapFormForUpdate()``. Similarly, the\n    ``MapForm`` has metadata about the data that can be updated and it\n    can perform validation before submitting the update. The ``MapForm``\n    can only be used once for a successful update and cannot be reused.\n    \n    The delete operations delete ``Maps``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_maps", 
            "can_create_map_with_record_types", 
            "get_map_form_for_create", 
            "create_map", 
            "can_update_maps", 
            "get_map_form_for_update", 
            "update_map", 
            "can_delete_maps", 
            "delete_map", 
            "can_manage_map_aliases", 
            "alias_map"
         ], 
         "methods": [
            {
               "name": "can_create_maps", 
               "doc": {
                  "headline": "Tests if this user can create ``Maps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Map``.\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Map`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Map`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_map_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Map`` using the desired record types.", 
                  "body": "        While ``MappingManager.getMapRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Map``.\n        Providing an empty array tests if a ``Map`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    map_record_types (osid.type.Type[]): array of map record\n                types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Map`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``map_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param map_record_types: array of map record types\n        :type map_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Map`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "map_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_form_for_create", 
               "doc": {
                  "headline": "Gets the map form for creating new maps.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    map_record_types (osid.type.Type[]): array of map record\n                types\n", 
               "return_doc": "        return: (osid.mapping.MapForm) - the map form", 
               "error_doc": "        raise:  NullArgument - ``map_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get a form with given record\n                types", 
               "sphinx_param_doc": "        :param map_record_types: array of map record types\n        :type map_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the map form\n        :rtype: ``osid.mapping.MapForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get a form with given record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "map_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.mapping.MapForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_map", 
               "doc": {
                  "headline": "Creates a new ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_form (osid.mapping.MapForm): the form for this\n                ``Map``\n", 
               "return_doc": "        return: (osid.mapping.Map) - the new ``Map``", 
               "error_doc": "        raise:  IllegalState - ``map_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``map_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``map_form`` did not originate from\n                ``get_map_form_for_create()``", 
               "sphinx_param_doc": "        :param map_form: the form for this ``Map``\n        :type map_form: ``osid.mapping.MapForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Map``\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``map_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``map_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``map_form`` did not originate from ``get_map_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapForm", 
                     "var_name": "map_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapForm"
               ], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_maps", 
               "doc": {
                  "headline": "Tests if this user can update ``Maps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Map``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Map`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Map`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_map_form_for_update", 
               "doc": {
                  "headline": "Gets the map form for updating an existing map.", 
                  "body": "        A new map form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n", 
               "return_doc": "        return: (osid.mapping.MapForm) - the map form", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the map form\n        :rtype: ``osid.mapping.MapForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MapForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_map", 
               "doc": {
                  "headline": "Updates an existing map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_form (osid.mapping.MapForm): the form containing the\n                elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``map_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``map_id`` or ``map_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``map_form`` did not originate from\n                ``get_map_form_for_update()``", 
               "sphinx_param_doc": "        :param map_form: the form containing the elements to be updated\n        :type map_form: ``osid.mapping.MapForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``map_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``map_id`` or ``map_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``map_form`` did not originate from ``get_map_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapForm", 
                     "var_name": "map_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_maps", 
               "doc": {
                  "headline": "Tests if this user can delete ``Maps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Map``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Map`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Map`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_map", 
               "doc": {
                  "headline": "Deletes a ``Map``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map`` to remove\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_map_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Maps``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Map`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Map`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_map", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Map`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Map`` is determined by the provider.\n        The new ``Id`` performs as an alias to the primary ``Id``. If\n        the alias is a pointer to another map, it is reassigned to the\n        given map ``Id``."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a ``Map``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a ``Map``\n        :type map_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapNotificationSession", 
         "shortname": "MapNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Map`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_map_notifications", 
            "register_for_new_maps", 
            "register_for_new_map_ancestors", 
            "register_for_new_map_descendants", 
            "register_for_changed_maps", 
            "register_for_changed_map", 
            "register_for_deleted_maps", 
            "register_for_deleted_map", 
            "register_for_deleted_map_ancestors", 
            "register_for_deleted_map_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_map_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Map`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_maps", 
               "doc": {
                  "headline": "Register for notifications of new maps.", 
                  "body": "        ``MapReceiver.newMap()`` is invoked when a new ``Map`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_map_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified map in the map hierarchy.", 
                  "body": "        ``MapReceiver.newMapAncestor()`` is invoked when the specified\n        map experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_map_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified map in the map hierarchy.", 
                  "body": "        ``MapReceiver.newMapDescendant()`` is invoked when the specified\n        map experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_maps", 
               "doc": {
                  "headline": "Registers for notification of updated maps.", 
                  "body": "        ``MapReceiver.changedMap()`` is invoked when a map is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_map", 
               "doc": {
                  "headline": "Registers for notification of an updated map.", 
                  "body": "        ``MapReceiver.changedMap()`` is invoked when the specified map\n        is changed."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the Id of the ``Map`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``E``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the Id of the ``Map`` to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``E``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_maps", 
               "doc": {
                  "headline": "Registers for notification of deleted maps.", 
                  "body": "        ``MapReceiver.deletedMap()`` is invoked when a map is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_map", 
               "doc": {
                  "headline": "Registers for notification of a deleted map.", 
                  "body": "        ``MapReceiver.deletedMap()`` is invoked when the specified map\n        is deleted."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map`` to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_map_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified map in the map hierarchy.", 
                  "body": "        ``MapReceiver.deletedMapAncestor()`` is invoked when the\n        specified map experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_map_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified map in the map hierarchy.", 
                  "body": "        ``MapReceiver.deletedMapDescednant()`` is invoked when the\n        specified map experiences a removal of one of its descdendents."
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the map to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the map to monitor\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapHierarchySession", 
         "shortname": "MapHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Map`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Map``. The hierarchy may be\n    traversed recursively to establish the tree structure through\n    ``get_parent_maps()`` and ``getChildMaps()``. To relate these\n    ``Ids`` to another OSID, ``get_map_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Map`` available in the Mapping OSID is known to this hierarchy but\n    does not appear in the hierarchy traversal until added as a root\n    location or a child of another location.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_maps()`` or ``get_child_maps()`` in lieu of\n    a ``PermissionDenied`` error that may disrupt the traversal through\n    authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative map view: map elements may be silently omitted or\n        re-ordered\n      * plenary map view: provides a complete set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_hierarchy_id", 
            "get_map_hierarchy", 
            "can_access_map_hierarchy", 
            "use_comparative_map_view", 
            "use_plenary_map_view", 
            "get_root_map_ids", 
            "get_root_maps", 
            "has_parent_maps", 
            "is_parent_of_map", 
            "get_parent_map_ids", 
            "get_parent_maps", 
            "is_ancestor_of_map", 
            "has_child_maps", 
            "is_child_of_map", 
            "get_child_map_ids", 
            "get_child_maps", 
            "is_descendant_of_map", 
            "get_map_node_ids", 
            "get_map_nodes"
         ], 
         "methods": [
            {
               "name": "get_map_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_map_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_map_view", 
               "doc": {
                  "headline": "The returns from the map methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_map_view", 
               "doc": {
                  "headline": "A complete view of the ``Maps`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_map_ids", 
               "doc": {
                  "headline": "Gets the root map ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root map ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root map ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_maps", 
               "doc": {
                  "headline": "Gets the root map in the map hierarchy.", 
                  "body": "        A location with no parents is an orphan. While all map ``Ids``\n        are known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root location or child of\n        another location."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapList) - the root maps", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root maps\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_maps", 
               "doc": {
                  "headline": "Tests if the ``Map`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): a map ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the map has parents, f ``alse``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: a map ``Id``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the map has parents, f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_map", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``map_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``id`` or ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``map_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_map_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): a map ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the map", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: a map ``Id``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the map\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_maps", 
               "doc": {
                  "headline": "Gets the parents of the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the parents of the map", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` to query\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the map\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_map", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "        return: (boolean) - ``tru`` e if this ``id`` is an ancestor of\n                ``map_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``tru`` e if this ``id`` is an ancestor of ``map_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_maps", 
               "doc": {
                  "headline": "Tests if a map has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): a map ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``map_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: a map ``Id``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``map_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_map", 
               "doc": {
                  "headline": "Tests if a map is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``map_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``id`` or ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``map_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_map_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the map", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` to query\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the map\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_maps", 
               "doc": {
                  "headline": "Gets the children of the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.mapping.MapList) - the children of the map", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` to query\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the map\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_map", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``map_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``id`` or ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``map_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_map_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the location.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the location.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given location, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a map node", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` to query\n        :type map_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the location.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the location.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given location, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a map node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_map_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the location.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the location.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given location, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.mapping.MapNode) - a map node", 
               "error_doc": "        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` to query\n        :type map_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the location.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the location.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given location, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a map node\n        :rtype: ``osid.mapping.MapNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.mapping.MapNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapHierarchyDesignSession", 
         "shortname": "MapHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Map`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Map``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_map_hierarchy_id", 
            "get_map_hierarchy", 
            "can_modify_map_hierarchy", 
            "add_root_map", 
            "remove_root_map", 
            "add_child_map", 
            "remove_child_map", 
            "remove_child_maps"
         ], 
         "methods": [
            {
               "name": "get_map_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_map_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_map_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_map", 
               "doc": {
                  "headline": "Adds a root map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``map_id`` is already in hierarchy\n        raise:  NotFound - ``map_id`` not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``map_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``map_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_map", 
               "doc": {
                  "headline": "Removes a root map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not a root\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not a root\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_map", 
               "doc": {
                  "headline": "Adds a child to a map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a map\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``map_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``map_id`` or ``child_id`` not found\n        raise:  NullArgument - ``map_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``map_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``map_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``map_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_map", 
               "doc": {
                  "headline": "Removes a child from a map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a map\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not parent of ``child_id``\n        raise:  NullArgument - ``map_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not parent of ``child_id``\n        :raise: ``NullArgument`` -- ``map_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_maps", 
               "doc": {
                  "headline": "Removes all children from a map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of a map\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``map_id`` is not found\n        raise:  NullArgument - ``map_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of a map\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``map_id`` is not found\n        :raise: ``NullArgument`` -- ``map_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Location", 
         "shortname": "Location", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Location`` represents a location in a ``Map``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Federateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Federateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Federateable"
            }
         ], 
         "method_names": [
            "has_spatial_unit", 
            "get_spatial_unit", 
            "get_location_record"
         ], 
         "methods": [
            {
               "name": "has_spatial_unit", 
               "doc": {
                  "headline": "Tests if a spatial unit is available for this location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a spatial unit is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a spatial unit is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_spatial_unit", 
               "doc": {
                  "headline": "Gets the spatial unit corresponding to this location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.SpatialUnit) - the spatial unit for this\n                location", 
               "error_doc": "        raise:  IllegalState - ``has_spatial_unit()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the spatial unit for this location\n        :rtype: ``osid.mapping.SpatialUnit``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_spatial_unit()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.SpatialUnit", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_record", 
               "doc": {
                  "headline": "Gets the location record corresponding to the given ``Location`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``location_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(location_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): the type of\n                location record to retrieve\n", 
               "return_doc": "        return: (osid.mapping.records.LocationRecord) - the location\n                record", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(location_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param location_record_type: the type of location record to retrieve\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location record\n        :rtype: ``osid.mapping.records.LocationRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationRecord", 
         "shortname": "LocationRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Location``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationQuery", 
         "shortname": "LocationQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching locations.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidFederateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidFederateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQuery"
            }
         ], 
         "method_names": [
            "match_coordinate", 
            "match_any_coordinate", 
            "clear_coordinate_terms", 
            "match_contained_spatial_unit", 
            "clear_contained_spatial_unit_terms", 
            "match_overlapping_spatial_unit", 
            "clear_overlapping_spatial_unit_terms", 
            "match_any_spatial_unit", 
            "clear_spatial_unit_terms", 
            "match_route_id", 
            "clear_route_id_terms", 
            "supports_route_query", 
            "get_route_query", 
            "match_any_route", 
            "clear_route_terms", 
            "match_path_id", 
            "clear_path_id_terms", 
            "supports_path_query", 
            "get_path_query", 
            "match_any_path", 
            "clear_path_terms", 
            "match_containing_location_id", 
            "clear_containing_location_id_terms", 
            "supports_containing_location_query", 
            "get_containing_location_query", 
            "match_any_containing_location", 
            "clear_containing_location_terms", 
            "match_contained_location_id", 
            "clear_contained_location_id_terms", 
            "supports_contained_location_query", 
            "get_contained_location_query", 
            "match_any_contained_location", 
            "clear_contained_location_terms", 
            "match_map_id", 
            "clear_map_id_terms", 
            "supports_map_query", 
            "get_map_query", 
            "clear_map_terms", 
            "get_location_query_record"
         ], 
         "methods": [
            {
               "name": "match_coordinate", 
               "doc": {
                  "headline": "Matches locations at the specified ``Coordinate``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate (osid.mapping.Coordinate): a coordinate\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``coordinate`` is ``null``", 
               "sphinx_param_doc": "        :param coordinate: a coordinate\n        :type coordinate: ``osid.mapping.Coordinate``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinate`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.Coordinate", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_coordinate", 
               "doc": {
                  "headline": "Matches locations that have any coordinate assignment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations with any\n                coordinate, ``false`` to match locations with no\n                coordinates\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations with any coordinate, ``false`` to match locations with no coordinates\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_coordinate_terms", 
               "doc": {
                  "headline": "Clears the coordinate query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_contained_spatial_unit", 
               "doc": {
                  "headline": "Matches locations containing the specified ``SpatialUnit``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_contained_spatial_unit_terms", 
               "doc": {
                  "headline": "Clears the spatial unit terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_overlapping_spatial_unit", 
               "doc": {
                  "headline": "Matches locations overlapping with the specified ``SpatialUnit``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): a spatial unit\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit`` is ``null``", 
               "sphinx_param_doc": "        :param spatial_unit: a spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_overlapping_spatial_unit_terms", 
               "doc": {
                  "headline": "Clears the overlapping spatial unit terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_any_spatial_unit", 
               "doc": {
                  "headline": "Matches locations that have any spatial unit assignment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations with any\n                boundary, ``false`` to match locations with no\n                boundaries\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations with any boundary, ``false`` to match locations with no boundaries\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_spatial_unit_terms", 
               "doc": {
                  "headline": "Clears the spatial unit query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_route_id", 
               "doc": {
                  "headline": "Sets the route ``Id`` for this query to match locations along the given route.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    route_id (osid.id.Id): the route ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``route_id`` is ``null``", 
               "sphinx_param_doc": "        :param route_id: the route ``Id``\n        :type route_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``route_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "route_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_route_id_terms", 
               "doc": {
                  "headline": "Clears the route ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_route_query", 
               "doc": {
                  "headline": "Tests if a ``RouteQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a route query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a route query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_route_query", 
               "doc": {
                  "headline": "Gets the query for a route.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.RouteQuery) - the route query", 
               "error_doc": "        raise:  Unimplemented - ``supports_route_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the route query\n        :rtype: ``osid.mapping.route.RouteQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_route_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_route_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.RouteQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_route", 
               "doc": {
                  "headline": "Matches locations that are used on any route.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations on any\n                route, ``false`` to match locations on no routes\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations on any route, ``false`` to match locations on no routes\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_route_terms", 
               "doc": {
                  "headline": "Clears the route query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_path_id", 
               "doc": {
                  "headline": "Sets the path ``Id`` for this query to match locations along the given path.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    path_id (osid.id.Id): the path ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``path_id`` is ``null``", 
               "sphinx_param_doc": "        :param path_id: the path ``Id``\n        :type path_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``path_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "path_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_path_id_terms", 
               "doc": {
                  "headline": "Clears the path ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_path_query", 
               "doc": {
                  "headline": "Tests if a ``PathQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a path query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a path query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_path_query", 
               "doc": {
                  "headline": "Gets the query for a path.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.PathQuery) - the path query", 
               "error_doc": "        raise:  Unimplemented - ``supports_path_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the path query\n        :rtype: ``osid.mapping.path.PathQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_path_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_path_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.PathQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_path", 
               "doc": {
                  "headline": "Matches locations that exist along any path.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations on any\n                path, ``false`` to match locations on no path\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations on any path, ``false`` to match locations on no path\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_path_terms", 
               "doc": {
                  "headline": "Clears the path query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_containing_location_id", 
               "doc": {
                  "headline": "Sets the location ``Id`` for this query to match locations contained within the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_containing_location_id_terms", 
               "doc": {
                  "headline": "Clears the pcontaining location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_containing_location_query", 
               "doc": {
                  "headline": "Tests if a ``LocationQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_containing_location_query", 
               "doc": {
                  "headline": "Gets the query for a parent location.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "        raise:  Unimplemented - ``supports_containing_location_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_containing_location_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_containing_location_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_containing_location", 
               "doc": {
                  "headline": "Matches locations that have any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations with any\n                parent location, ``false`` to match root locations\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations with any parent location, ``false`` to match root locations\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_containing_location_terms", 
               "doc": {
                  "headline": "Clears the containing location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_contained_location_id", 
               "doc": {
                  "headline": "Sets the location ``Id`` for this query to match locations containing the given location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_contained_location_id_terms", 
               "doc": {
                  "headline": "Clears the contained location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_contained_location_query", 
               "doc": {
                  "headline": "Tests if a ``LocationQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_contained_location_query", 
               "doc": {
                  "headline": "Gets the query for a contained location.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "        raise:  Unimplemented - ``supports_contained_location_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_contained_location_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_contained_location_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_contained_location", 
               "doc": {
                  "headline": "Matches locations that have any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match locations containing\n                any other location, ``false`` to match empty locations\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match locations containing any other location, ``false`` to match empty locations\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_contained_location_terms", 
               "doc": {
                  "headline": "Clears the contained location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_map_id", 
               "doc": {
                  "headline": "Sets the map ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the map ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id`` is ``null``", 
               "sphinx_param_doc": "        :param map_id: the map ``Id``\n        :type map_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_map_id_terms", 
               "doc": {
                  "headline": "Clears the map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_map_query", 
               "doc": {
                  "headline": "Tests if a ``MapQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a map query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a map query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_map_query", 
               "doc": {
                  "headline": "Gets the query for a map.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQuery) - the map query", 
               "error_doc": "        raise:  Unimplemented - ``supports_map_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map query\n        :rtype: ``osid.mapping.MapQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_map_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_map_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_map_terms", 
               "doc": {
                  "headline": "Clears the map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_location_query_record", 
               "doc": {
                  "headline": "Gets the location query record corresponding to the given ``Location`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a location record\n                type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationQueryRecord) - the\n                location query record", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(location_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param location_record_type: a location record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location query record\n        :rtype: ``osid.mapping.records.LocationQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationQueryRecord", 
         "shortname": "LocationQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationQueryInspector", 
         "shortname": "LocationQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for searching locations.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidFederateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidFederateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_coordinate_terms", 
            "get_contained_spatial_unit_terms", 
            "get_overlapping_spatial_unit_terms", 
            "get_spatial_unit_terms", 
            "get_route_id_terms", 
            "get_route_terms", 
            "get_path_id_terms", 
            "get_path_terms", 
            "get_containing_location_id_terms", 
            "get_containing_location_terms", 
            "get_contained_location_id_terms", 
            "get_contained_location_terms", 
            "get_map_id_terms", 
            "get_map_terms", 
            "get_location_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_coordinate_terms", 
               "doc": {
                  "headline": "Gets the coordinate query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.CoordinateTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.CoordinateTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.CoordinateTerm", 
               "errors": {}
            }, 
            {
               "name": "get_contained_spatial_unit_terms", 
               "doc": {
                  "headline": "Gets the contained spatial unit query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.SpatialUnitTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.SpatialUnitTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.SpatialUnitTerm", 
               "errors": {}
            }, 
            {
               "name": "get_overlapping_spatial_unit_terms", 
               "doc": {
                  "headline": "Gets the overlapping spatial unit query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.SpatialUnitTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.SpatialUnitTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.SpatialUnitTerm", 
               "errors": {}
            }, 
            {
               "name": "get_spatial_unit_terms", 
               "doc": {
                  "headline": "Gets the spatial unit query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.SpatialUnitTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.SpatialUnitTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.SpatialUnitTerm", 
               "errors": {}
            }, 
            {
               "name": "get_route_id_terms", 
               "doc": {
                  "headline": "Gets the route ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_route_terms", 
               "doc": {
                  "headline": "Gets the route query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.RouteQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.route.RouteQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.RouteQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_path_id_terms", 
               "doc": {
                  "headline": "Gets the path ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_path_terms", 
               "doc": {
                  "headline": "Gets the path query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.PathQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.path.PathQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.PathQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_containing_location_id_terms", 
               "doc": {
                  "headline": "Gets the containing location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_containing_location_terms", 
               "doc": {
                  "headline": "Gets the containing location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.LocationQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_contained_location_id_terms", 
               "doc": {
                  "headline": "Gets the contained location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_contained_location_terms", 
               "doc": {
                  "headline": "Gets the contained location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.LocationQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_map_id_terms", 
               "doc": {
                  "headline": "Gets the map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_map_terms", 
               "doc": {
                  "headline": "Gets the map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.MapQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_location_query_inspector_record", 
               "doc": {
                  "headline": "Gets the location query inspector record corresponding to the given ``Location`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a location record\n                type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationQueryInspectorRecord) -\n                the location query inspector record", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(location_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param location_record_type: a location record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location query inspector record\n        :rtype: ``osid.mapping.records.LocationQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationQueryInspectorRecord", 
         "shortname": "LocationQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationInspectorQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationForm", 
         "shortname": "LocationForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Locations``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``LocationAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidFederateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidFederateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableForm"
            }
         ], 
         "method_names": [
            "get_spatial_unit_metadata", 
            "set_spatial_unit", 
            "clear_spatial_unit", 
            "get_location_form_record"
         ], 
         "methods": [
            {
               "name": "get_spatial_unit_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the spatial unit", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the spatial unit\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_spatial_unit", 
               "doc": {
                  "headline": "Sets the spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    spatial_unit (osid.mapping.SpatialUnit): the new spatial\n                unit\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``spatial_unit`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``spatial_unit`` is ``null``\n        raise:  Unsupported - ``spatial_unit`` type is not supported", 
               "sphinx_param_doc": "        :param spatial_unit: the new spatial unit\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``spatial_unit`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``spatial_unit`` is ``null``\n        :raise: ``Unsupported`` -- ``spatial_unit`` type is not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_spatial_unit", 
               "doc": {
                  "headline": "Removes the spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_form_record", 
               "doc": {
                  "headline": "Gets the ``LocationFormRecord`` corresponding to the given location record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a location record\n                type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationFormRecord) - the location\n                form record", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(location_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param location_record_type: a location record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location form record\n        :rtype: ``osid.mapping.records.LocationFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationFormRecord", 
         "shortname": "LocationFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationSearchOrder", 
         "shortname": "LocationSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidFederateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidFederateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_distance", 
            "get_location_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_distance", 
               "doc": {
                  "headline": "Orders the results by distance.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_order_record", 
               "doc": {
                  "headline": "Gets the location search order record corresponding to the given location record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    location_record_type (osid.type.Type): a location record\n                type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationSearchOrderRecord) - the\n                location search order record", 
               "error_doc": "        raise:  NullArgument - ``location_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(location_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param location_record_type: a location record type\n        :type location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location search order record\n        :rtype: ``osid.mapping.records.LocationSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationSearchOrderRecord", 
         "shortname": "LocationSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationSearch", 
         "shortname": "LocationSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing location searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_locations", 
            "order_location_results", 
            "get_location_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_locations", 
               "doc": {
                  "headline": "Execute this search among the given list of locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_ids (osid.id.IdList): list of locations\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_ids`` is ``null``", 
               "sphinx_param_doc": "        :param location_ids: list of locations\n        :type location_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "location_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_location_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_search_order\n                (osid.mapping.LocationSearchOrder): location search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_search_order`` is ``null``\n        raise:  Unsupported - ``location_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param location_search_order: location search order\n        :type location_search_order: ``osid.mapping.LocationSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``location_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.LocationSearchOrder", 
                     "var_name": "location_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.LocationSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_search_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given location search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    location_search_record_type (osid.type.Type): a location\n                search record type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationSearchRecord) - the\n                location search record", 
               "error_doc": "        raise:  NullArgument - ``location_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(location_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param location_search_record_type: a location search record type\n        :type location_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location search record\n        :rtype: ``osid.mapping.records.LocationSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationSearchRecord", 
         "shortname": "LocationSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationSearchResults", 
         "shortname": "LocationSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_locations", 
            "get_location_query_inspector", 
            "get_location_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_locations", 
               "doc": {
                  "headline": "Gets the location list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationList) - the location list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location list\n        :rtype: ``osid.mapping.LocationList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQueryInspector) - the location\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query inspector\n        :rtype: ``osid.mapping.LocationQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_location_search_results_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given location search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    location_search_record_type (osid.type.Type): a location\n                search record type\n", 
               "return_doc": "        return: (osid.mapping.records.LocationSearchResultsRecord) - the\n                location search results record", 
               "error_doc": "        raise:  NullArgument - ``location_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(location_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param location_search_record_type: a location search record type\n        :type location_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the location search results record\n        :rtype: ``osid.mapping.records.LocationSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(location_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "location_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.LocationSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.LocationSearchResultsRecord", 
         "shortname": "LocationSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LocationSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.LocationReceiver", 
         "shortname": "LocationReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The location receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted locations.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_location", 
            "new_ancestor_location", 
            "new_descendant_location", 
            "changed_location", 
            "deleted_location", 
            "deleted_ancestor_location", 
            "deleted_descendant_location"
         ], 
         "methods": [
            {
               "name": "new_location", 
               "doc": {
                  "headline": "The callback for notifications of new locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the new\n                ``Location``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the new ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_location", 
               "doc": {
                  "headline": "The callback for notifications of new location ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new\n                ``Location`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``Location`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_location", 
               "doc": {
                  "headline": "The callback for notifications of new location descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Location`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Location`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_location", 
               "doc": {
                  "headline": "The callback for notification of updated locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the updated\n                ``Location``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the updated ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_location", 
               "doc": {
                  "headline": "The callback for notification of deleted locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the deleted\n                ``Location``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the deleted ``Location``\n        :type location_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_location", 
               "doc": {
                  "headline": "The callback for notifications of deleted location ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Location`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Location`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_location", 
               "doc": {
                  "headline": "The callback for notifications of deleted location descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Location`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Location`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationList", 
         "shortname": "LocationList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LocationList`` provides a means for accessing ``Location`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ll.hasNext()) { Location location =\n    ll.getNextLocation(); }\n\n    or\n      while (ll.hasNext()) {\n           Location[] locations = ll.getNextLocations(ll.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_location", 
            "get_next_locations"
         ], 
         "methods": [
            {
               "name": "get_next_location", 
               "doc": {
                  "headline": "Gets the next ``Location`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Location) - the next ``Location`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Location`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Location`` in this list. The ``has_next()`` method should be used to test that a next ``Location`` is available before calling this method.\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_locations", 
               "doc": {
                  "headline": "Gets the next set of ``Location`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Location`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.Location) - an array of ``Location``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Location`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Location`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationNode", 
         "shortname": "LocationNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``LocationHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_location", 
            "get_parent_location_nodes", 
            "get_child_location_nodes"
         ], 
         "methods": [
            {
               "name": "get_location", 
               "doc": {
                  "headline": "Gets the ``Location`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Location) - the location represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location represented by this node\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Location", 
               "errors": {}
            }, 
            {
               "name": "get_parent_location_nodes", 
               "doc": {
                  "headline": "Gets the parents of this location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.mapping.LocationNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_location_nodes", 
               "doc": {
                  "headline": "Gets the children of this location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationNodeList) - the children of this\n                location", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this location\n        :rtype: ``osid.mapping.LocationNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.LocationNodeList", 
         "shortname": "LocationNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LocationNodeList`` provides a means for accessing ``LocationNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (lnl.hasNext()) { LocationNode locationNode =\n    lnl.getNextLocationNode(); }\n\n    or\n      while (lnl.hasNext()) {\n           LocationNode[] locationNodes = lnl.getNextLocationNodes(lnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_location_node", 
            "get_next_location_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_location_node", 
               "doc": {
                  "headline": "Gets the next ``LocationNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationNode) - the next ``LocationNode``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``LocationNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``LocationNode`` in this list. The ``has_next()`` method should be used to test that a next ``LocationNode`` is available before calling this method.\n        :rtype: ``osid.mapping.LocationNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_location_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``LocationNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``LocationNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.LocationNode) - an array of\n                ``LocationNode`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``LocationNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``LocationNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.LocationNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.LocationNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Map", 
         "shortname": "Map", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Map`` represents a collection of locations and paths.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_map_record"
         ], 
         "methods": [
            {
               "name": "get_map_record", 
               "doc": {
                  "headline": "Gets the map record corresponding to the given ``Map`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``map_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(map_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): the type of map record\n                to retrieve\n", 
               "return_doc": "        return: (osid.mapping.records.MapRecord) - the map record", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(map_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_record_type: the type of map record to retrieve\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map record\n        :rtype: ``osid.mapping.records.MapRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapRecord", 
         "shortname": "MapRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapRecord``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapQuery", 
         "shortname": "MapQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching maps.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_location_id", 
            "clear_location_id_terms", 
            "supports_location_query", 
            "get_location_query", 
            "match_any_location", 
            "clear_location_terms", 
            "match_path_id", 
            "clear_path_id_terms", 
            "supports_path_query", 
            "get_path_query", 
            "match_any_path", 
            "clear_path_terms", 
            "match_route_id", 
            "clear_route_id_terms", 
            "supports_route_query", 
            "get_route_query", 
            "match_any_route", 
            "clear_route_terms", 
            "match_ancestor_map_id", 
            "clear_ancestor_map_id_terms", 
            "supports_ancestor_map_query", 
            "get_ancestor_map_query", 
            "match_any_ancestor_map", 
            "clear_ancestor_map_terms", 
            "match_descendant_map_id", 
            "clear_descendant_map_id_terms", 
            "supports_descendant_map_query", 
            "get_descendant_map_query", 
            "match_any_descendant_map", 
            "clear_descendant_map_terms", 
            "get_map_query_record"
         ], 
         "methods": [
            {
               "name": "match_location_id", 
               "doc": {
                  "headline": "Sets the location ``Id`` for this query to match maps that have a related location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): a location ``Id``\n        arg:    match (boolean): ``true`` if a positive match, ``false``\n                for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``location_id`` is ``null``", 
               "sphinx_param_doc": "        :param location_id: a location ``Id``\n        :type location_id: ``osid.id.Id``\n        :param match: ``true`` if a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``location_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_location_id_terms", 
               "doc": {
                  "headline": "Clears the location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_location_query", 
               "doc": {
                  "headline": "Tests if a ``LocationQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_location_query", 
               "doc": {
                  "headline": "Gets the query for a location.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQuery) - the location query", 
               "error_doc": "        raise:  Unimplemented - ``supports_location_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location query\n        :rtype: ``osid.mapping.LocationQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_location_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_location_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_location", 
               "doc": {
                  "headline": "Matches maps that have any location.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match maps with any\n                location, ``false`` to match maps with no location\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match maps with any location, ``false`` to match maps with no location\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_location_terms", 
               "doc": {
                  "headline": "Clears the location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_path_id", 
               "doc": {
                  "headline": "Sets the path ``Id`` for this query to match maps containing paths.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    path_id (osid.id.Id): the path ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``path_id`` is ``null``", 
               "sphinx_param_doc": "        :param path_id: the path ``Id``\n        :type path_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``path_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "path_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_path_id_terms", 
               "doc": {
                  "headline": "Clears the path ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_path_query", 
               "doc": {
                  "headline": "Tests if a ``PathQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a path query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a path query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_path_query", 
               "doc": {
                  "headline": "Gets the query for a path.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.PathQuery) - the path query", 
               "error_doc": "        raise:  Unimplemented - ``supports_path_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the path query\n        :rtype: ``osid.mapping.path.PathQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_path_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_path_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.PathQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_path", 
               "doc": {
                  "headline": "Matches maps that have any path.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match maps with any path,\n                ``false`` to match maps with no path\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match maps with any path, ``false`` to match maps with no path\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_path_terms", 
               "doc": {
                  "headline": "Clears the path query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_route_id", 
               "doc": {
                  "headline": "Sets the path ``Id`` for this query to match maps containing paths.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    path_id (osid.id.Id): the path ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``path_id`` is ``null``", 
               "sphinx_param_doc": "        :param path_id: the path ``Id``\n        :type path_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``path_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "path_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_route_id_terms", 
               "doc": {
                  "headline": "Clears the route ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_route_query", 
               "doc": {
                  "headline": "Tests if a ``RouteQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a route query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a route query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_route_query", 
               "doc": {
                  "headline": "Gets the query for a route.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.RouteQuery) - the route query", 
               "error_doc": "        raise:  Unimplemented - ``supports_route_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the route query\n        :rtype: ``osid.mapping.route.RouteQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_route_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_route_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.RouteQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_route", 
               "doc": {
                  "headline": "Matches maps that have any route.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match maps with any route,\n                ``false`` to match maps with no route\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match maps with any route, ``false`` to match maps with no route\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_route_terms", 
               "doc": {
                  "headline": "Clears the route query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_map_id", 
               "doc": {
                  "headline": "Sets the map ``Id`` for this query to match maps that have the specified map as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): a map ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id`` is ``null``", 
               "sphinx_param_doc": "        :param map_id: a map ``Id``\n        :type map_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_map_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_map_query", 
               "doc": {
                  "headline": "Tests if a ``MapQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a map query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a map query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_map_query", 
               "doc": {
                  "headline": "Gets the query for a map.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQuery) - the map query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_map_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map query\n        :rtype: ``osid.mapping.MapQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_map_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_map_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_map", 
               "doc": {
                  "headline": "Matches maps with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match maps with any\n                ancestor, ``false`` to match root maps\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match maps with any ancestor, ``false`` to match root maps\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_map_terms", 
               "doc": {
                  "headline": "Clears the ancestor map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_map_id", 
               "doc": {
                  "headline": "Sets the map ``Id`` for this query to match maps that have the specified map as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): a map ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_id`` is ``null``", 
               "sphinx_param_doc": "        :param map_id: a map ``Id``\n        :type map_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_map_id_terms", 
               "doc": {
                  "headline": "Clears the descendant map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_map_query", 
               "doc": {
                  "headline": "Tests if a ``MapQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a map query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a map query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_map_query", 
               "doc": {
                  "headline": "Gets the query for a map.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQuery) - the map query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_map_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map query\n        :rtype: ``osid.mapping.MapQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_map_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_map_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_map", 
               "doc": {
                  "headline": "Matches maps with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match maps with any\n                descendant, ``false`` to match leaf maps\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match maps with any descendant, ``false`` to match leaf maps\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_map_terms", 
               "doc": {
                  "headline": "Clears the descendant map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_map_query_record", 
               "doc": {
                  "headline": "Gets the map query record corresponding to the given ``Map`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a map record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapQueryRecord) - the map query\n                record", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(map_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_record_type: a map record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map query record\n        :rtype: ``osid.mapping.records.MapQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapQueryRecord", 
         "shortname": "MapQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapQueryInspector", 
         "shortname": "MapQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for searching maps.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_location_id_terms", 
            "get_location_terms", 
            "get_path_id_terms", 
            "get_path_terms", 
            "get_route_id_terms", 
            "get_route_terms", 
            "get_ancestor_map_id_terms", 
            "get_ancestor_map_terms", 
            "get_descendant_map_id_terms", 
            "get_descendant_map_terms", 
            "get_map_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_location_id_terms", 
               "doc": {
                  "headline": "Gets the location ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_location_terms", 
               "doc": {
                  "headline": "Gets the location query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.LocationQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.LocationQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.LocationQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_path_id_terms", 
               "doc": {
                  "headline": "Gets the path ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_path_terms", 
               "doc": {
                  "headline": "Gets the path query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.path.PathQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.path.PathQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.path.PathQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_route_id_terms", 
               "doc": {
                  "headline": "Gets the route ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_route_terms", 
               "doc": {
                  "headline": "Gets the route query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.route.RouteQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.route.RouteQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.route.RouteQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_map_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_map_terms", 
               "doc": {
                  "headline": "Gets the ancestor map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.MapQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_map_id_terms", 
               "doc": {
                  "headline": "Gets the descendant map ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_map_terms", 
               "doc": {
                  "headline": "Gets the descendant map query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.mapping.MapQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_map_query_inspector_record", 
               "doc": {
                  "headline": "Gets the record query inspector interface corresponding to the given ``Map`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a map record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapQueryInspectorRecord) - the map\n                query inspector record", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(map_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_record_type: a map record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map query inspector record\n        :rtype: ``osid.mapping.records.MapQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapQueryInspectorRecord", 
         "shortname": "MapQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapForm", 
         "shortname": "MapForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating maps.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the ``MapAdminSession``.\n    For each data element that may be set, metadata may be examined to\n    provide display hints or data constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_map_form_record"
         ], 
         "methods": [
            {
               "name": "get_map_form_record", 
               "doc": {
                  "headline": "Gets the ``MapFormRecord`` interface corresponding to the given map record interface ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a map record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapFormRecord) - the map form\n                record", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(map_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_record_type: a map record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map form record\n        :rtype: ``osid.mapping.records.MapFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapFormRecord", 
         "shortname": "MapFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapSearchOrder", 
         "shortname": "MapSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_map_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_map_search_order_record", 
               "doc": {
                  "headline": "Gets the map search order record corresponding to the given map ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    map_record_type (osid.type.Type): a map record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapSearchOrderRecord) - the map\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``map_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(map_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param map_record_type: a map record type\n        :type map_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map search order record\n        :rtype: ``osid.mapping.records.MapSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapSearchOrderRecord", 
         "shortname": "MapSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapSearch", 
         "shortname": "MapSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing map searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_maps", 
            "order_map_results", 
            "get_map_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_maps", 
               "doc": {
                  "headline": "Execute this search among the given list of maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_ids (osid.id.IdList): list of maps\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_ids`` is ``null``", 
               "sphinx_param_doc": "        :param map_ids: list of maps\n        :type map_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "map_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_map_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_search_order (osid.mapping.MapSearchOrder): map\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``map_search_order`` is ``null``\n        raise:  Unsupported - ``map_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param map_search_order: map search order\n        :type map_search_order: ``osid.mapping.MapSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``map_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.MapSearchOrder", 
                     "var_name": "map_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.MapSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_search_record", 
               "doc": {
                  "headline": "Gets the map search record corresponding to the given map search record ``Type``.", 
                  "body": "        This method must be used to retrieve an object implementing the\n        requested record interface along with all of its ancestor\n        interfaces."
               }, 
               "arg_doc": "        arg:    map_search_record_type (osid.type.Type): a map search\n                record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapSearchRecord) - the map search\n                record", 
               "error_doc": "        raise:  NullArgument - ``map_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(map_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param map_search_record_type: a map search record type\n        :type map_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map search record\n        :rtype: ``osid.mapping.records.MapSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapSearchRecord", 
         "shortname": "MapSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapSearchResults", 
         "shortname": "MapSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_maps", 
            "get_map_query_inspector", 
            "get_map_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_maps", 
               "doc": {
                  "headline": "Gets the map list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapList) - the map list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map list\n        :rtype: ``osid.mapping.MapList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_map_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapQueryInspector) - the map query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map query inspector\n        :rtype: ``osid.mapping.MapQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_map_search_results_record", 
               "doc": {
                  "headline": "Gets the map search results record corresponding to the given map search record ``Type``.", 
                  "body": "        This method must be used to retrieve an object implementing the\n        requested record interface along with all of its ancestor\n        interfaces."
               }, 
               "arg_doc": "        arg:    map_search_record_type (osid.type.Type): a map search\n                record type\n", 
               "return_doc": "        return: (osid.mapping.records.MapSearchResultsRecord) - the map\n                search results record", 
               "error_doc": "        raise:  NullArgument - ``map_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(map_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param map_search_record_type: a map search record type\n        :type map_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the map search results record\n        :rtype: ``osid.mapping.records.MapSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``map_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(map_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "map_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.MapSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.MapSearchResultsRecord", 
         "shortname": "MapSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``MapSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.MapReceiver", 
         "shortname": "MapReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The map receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Map`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_map", 
            "new_ancestor_map", 
            "new_descendant_map", 
            "changed_map", 
            "deleted_map", 
            "deleted_ancestor_map", 
            "deleted_descendant_map"
         ], 
         "methods": [
            {
               "name": "new_map", 
               "doc": {
                  "headline": "The callback for notifications of new maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the new ``Map``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the new ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_map", 
               "doc": {
                  "headline": "The callback for notifications of new map ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ``Map``\n                ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``Map`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_map", 
               "doc": {
                  "headline": "The callback for notifications of new map descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Map`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Map`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_map", 
               "doc": {
                  "headline": "The callback for notification of updated map.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the updated ``Map``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the updated ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_map", 
               "doc": {
                  "headline": "The callback for notification of deleted maps.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the deleted ``Map``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the deleted ``Map``\n        :type map_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_map", 
               "doc": {
                  "headline": "The callback for notifications of deleted map ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Map`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Map`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_map", 
               "doc": {
                  "headline": "The callback for notifications of deleted map descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    map_id (osid.id.Id): the ``Id`` of the ``Map``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Map`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param map_id: the ``Id`` of the ``Map``\n        :type map_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Map`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "map_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapList", 
         "shortname": "MapList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``MapList`` provides a means for accessing ``Map`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ml.hasNext()) { Map map = ml.getNextMap(); }\n\n    or\n      while (ml.hasNext()) {\n           Map[] maps = ml.getNextMaps(ml.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_map", 
            "get_next_maps"
         ], 
         "methods": [
            {
               "name": "get_next_map", 
               "doc": {
                  "headline": "Gets the next ``Map`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the next ``Map`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``Map`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Map`` in this list. The ``has_next()`` method should be used to test that a next ``Map`` is available before calling this method.\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_maps", 
               "doc": {
                  "headline": "Gets the next set of ``Map`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Map`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.mapping.Map) - an array of ``Map`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Map`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Map`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.Map", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapNode", 
         "shortname": "MapNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``MapHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_map", 
            "get_parent_map_nodes", 
            "get_child_map_nodes"
         ], 
         "methods": [
            {
               "name": "get_map", 
               "doc": {
                  "headline": "Gets the ``Map`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Map) - the map represented by this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the map represented by this node\n        :rtype: ``osid.mapping.Map``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Map", 
               "errors": {}
            }, 
            {
               "name": "get_parent_map_nodes", 
               "doc": {
                  "headline": "Gets the parents of this map.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapNodeList) - the parents of this map", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this map\n        :rtype: ``osid.mapping.MapNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_map_nodes", 
               "doc": {
                  "headline": "Gets the children of this map.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapNodeList) - the children of this map", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this map\n        :rtype: ``osid.mapping.MapNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.MapNodeList", 
         "shortname": "MapNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``MapNodeList`` provides a means for accessing ``MapNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (mnl.hasNext()) { MapNode node =\n    mnl.getNextMapNode(Node); }\n\n    or\n      while (mnl.hasNext()) {\n           MapNode[] nodes = ml.getNextMapNodes(mnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_map_node", 
            "get_next_map_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_map_node", 
               "doc": {
                  "headline": "Gets the next ``MapNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.MapNode) - the next ``MapNode`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``MapNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``MapNode`` in this list. The ``has_next()`` method should be used to test that a next ``MapNode`` is available before calling this method.\n        :rtype: ``osid.mapping.MapNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.MapNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_map_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``MapNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``MapNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.MapNode) - an array of ``MapNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``MapNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``MapNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.MapNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.MapNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourceLocation", 
         "shortname": "ResourceLocation", 
         "category": "objects", 
         "doc": {
            "headline": "This interface defines a resource at a location.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCompendium"
         ], 
         "inherit_shortnames": [
            "OsidCompendium"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCompendium"
            }
         ], 
         "method_names": [
            "get_resource_id", 
            "get_resource", 
            "has_location", 
            "get_location_id", 
            "get_location", 
            "has_coordinate", 
            "get_coordinate", 
            "get_resource_location_record"
         ], 
         "methods": [
            {
               "name": "get_resource_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the resource on the route.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_resource", 
               "doc": {
                  "headline": "Gets the resource on the route.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_location", 
               "doc": {
                  "headline": "Tests if this resource has a known location.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a location is known, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a location is known, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_location_id", 
               "doc": {
                  "headline": "Gets the location ``Id`` of the resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the location ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_location()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_location()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_location", 
               "doc": {
                  "headline": "Gets the location of the resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Location) - the location", 
               "error_doc": "        raise:  IllegalState - ``has_location()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the location\n        :rtype: ``osid.mapping.Location``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_location()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Location", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_coordinate", 
               "doc": {
                  "headline": "Tests if this resource has a known coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a coordinate is known, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a coordinate is known, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_coordinate", 
               "doc": {
                  "headline": "Gets the coordinate of the resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the coordinate of the\n                resource", 
               "error_doc": "        raise:  IllegalState - ``has_coordinate()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate of the resource\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_coordinate()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_location_record", 
               "doc": {
                  "headline": "Gets the map record corresponding to the given ``ResourceLocation`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``resource_location_record_type`` may be\n        the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(resource_location_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    resource_location_record_type (osid.type.Type): the type\n                of resource location record to retrieve\n", 
               "return_doc": "        return: (osid.mapping.records.ResourceLocationRecord) - the\n                resource location record", 
               "error_doc": "        raise:  NullArgument - ``resource_location_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_location_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_location_record_type: the type of resource location record to retrieve\n        :type resource_location_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource location record\n        :rtype: ``osid.mapping.records.ResourceLocationRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_location_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_location_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_location_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.ResourceLocationRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.ResourceLocationRecord", 
         "shortname": "ResourceLocationRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceLocationRecord``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.ResourceLocationList", 
         "shortname": "ResourceLocationList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ResourceLocationList`` provides a means for accessing ``ResourceLocation`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rll.hasNext()) { ResourceLocation location =\n    rll.getNextRouteResourceLocation(); }\n\n    or\n      while (rll.hasNext()) {\n           ResourceLocation[] locations = rll.getNextResourceLocations(rll.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_resource_location", 
            "get_next_resource_locations"
         ], 
         "methods": [
            {
               "name": "get_next_resource_location", 
               "doc": {
                  "headline": "Gets the next ``ResourceLocation`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.ResourceLocation) - the next\n                ``ResourceLocation`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``ResourceLocation`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ResourceLocation`` in this list. The ``has_next()`` method should be used to test that a next ``ResourceLocation`` is available before calling this method.\n        :rtype: ``osid.mapping.ResourceLocation``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.ResourceLocation", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_resource_locations", 
               "doc": {
                  "headline": "Gets the next set of ``ResourceLocation`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ResourceLocation``\n                elements requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.ResourceLocation) - an array of\n                ``ResourceLocation`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ResourceLocation`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ResourceLocation`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.ResourceLocation``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.ResourceLocation", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourceLocationReceiver", 
         "shortname": "ResourceLocationReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The resource location receiver is the consumer supplied interface for receiving notifications pertaining to location changes of resources.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "entered_location", 
            "exited_location", 
            "new_resource_coordinate"
         ], 
         "methods": [
            {
               "name": "entered_location", 
               "doc": {
                  "headline": "The callback for notifications of resources entering locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    location_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param location_id: the ``Id`` of the ``Location``\n        :type location_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "location_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "exited_location", 
               "doc": {
                  "headline": "The callback for notifications of resources exiting locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    route_id (osid.id.Id): the ``Id`` of the ``Location``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param route_id: the ``Id`` of the ``Location``\n        :type route_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "route_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_resource_coordinate", 
               "doc": {
                  "headline": "The callback for notifications of resources changing coordinates.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate (osid.mapping.Coordinate): the new coordinate\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param coordinate: the new coordinate\n        :type coordinate: ``osid.mapping.Coordinate``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.Coordinate", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.ResourcePositionReceiver", 
         "shortname": "ResourcePositionReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The resource location receiver is the consumer supplied interface for receiving notifications pertaining to position changes of resources.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "moved_resource", 
            "entered_spatial_unit", 
            "exited_spatial_unit"
         ], 
         "methods": [
            {
               "name": "moved_resource", 
               "doc": {
                  "headline": "The callback for notifications of resources entering locations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    coordinate (osid.mapping.Coordinate): the ``Id`` of the\n                ``Coordinate``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param coordinate: the ``Id`` of the ``Coordinate``\n        :type coordinate: ``osid.mapping.Coordinate``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.Coordinate"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "entered_spatial_unit", 
               "doc": {
                  "headline": "The callback for notifications of resources entering spatial units.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the ``Id`` of\n                the ``SpatialUnit``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param spatial_unit: the ``Id`` of the ``SpatialUnit``\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "exited_spatial_unit", 
               "doc": {
                  "headline": "The callback for notifications of resources exiting spatial units.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    spatial_unit (osid.mapping.SpatialUnit): the ``Id`` of\n                the ``SpatialUnit``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param spatial_unit: the ``Id`` of the ``SpatialUnit``\n        :type spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Coordinate", 
         "shortname": "Coordinate", 
         "category": "primitives", 
         "doc": {
            "headline": "A coordinate represents a position.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }
         ], 
         "method_names": [
            "get_coordinate_type", 
            "get_dimensions", 
            "get_values", 
            "defines_uncertainty", 
            "get_uncertainty_minus", 
            "get_uncertainty_plus"
         ], 
         "methods": [
            {
               "name": "get_coordinate_type", 
               "doc": {
                  "headline": "Gets the ``Type`` of this ``Coordinate`` which indicates the format of the coordinate data.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the coordinate type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_dimensions", 
               "doc": {
                  "headline": "Gets the number of dimensions available in this coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of dimensions", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of dimensions\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_values", 
               "doc": {
                  "headline": "Gets the values of this coordinate.", 
                  "body": "        The size of the returned array should equal ``getDimensions()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the coordinate values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "defines_uncertainty", 
               "doc": {
                  "headline": "Tests if uncertainty is defined for this heading.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if uncertainty is defined,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if uncertainty is defined, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_uncertainty_minus", 
               "doc": {
                  "headline": "Gets the uncertainty in the negtive direction for each value of this coordinate.", 
                  "body": "        The size of the returned array is typically one less than\n        ``getDimensions()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the negative uncertainty values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the negative uncertainty values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_uncertainty_plus", 
               "doc": {
                  "headline": "Gets the uncertainty in the positive direction for each value of this coordinate.", 
                  "body": "        The size of the returned array is typically one less than\n        ``getDimensions()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the positive uncertainty values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the positive uncertainty values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.CoordinateList", 
         "shortname": "CoordinateList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``CoordinateList`` provides a means for accessing ``Coordinate`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (cl.hasNext()) { Coordinate coordinate =\n    cl.getNextCoordinate(); }\n\n    or\n      while (cl.hasNext()) {\n           Coordinate[] coordinates = cl.getNextCoordinates(cl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_coordinate", 
            "get_next_coordinates"
         ], 
         "methods": [
            {
               "name": "get_next_coordinate", 
               "doc": {
                  "headline": "Gets the next ``Coordinate`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the next ``Coordinate`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Coordinate`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Coordinate`` in this list. The ``has_next()`` method should be used to test that a next ``Coordinate`` is available before calling this method.\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_coordinates", 
               "doc": {
                  "headline": "Gets the next set of ``Coordinate`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Coordinate`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.Coordinate) - an array of ``Coordinate``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Coordinate`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Coordinate`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Speed", 
         "shortname": "Speed", 
         "category": "primitives", 
         "doc": {
            "headline": "A speed is a distance traveled over a unit of time.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }
         ], 
         "method_names": [
            "get_distance", 
            "get_time_unit"
         ], 
         "methods": [
            {
               "name": "get_distance", 
               "doc": {
                  "headline": "Gets the distance.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Distance) - the distance", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the distance\n        :rtype: ``osid.mapping.Distance``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Distance", 
               "errors": {}
            }, 
            {
               "name": "get_time_unit", 
               "doc": {
                  "headline": "Gets the time unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTimeResolution) - the time unit", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time unit\n        :rtype: ``osid.calendaring.DateTimeResolution``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTimeResolution", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Heading", 
         "shortname": "Heading", 
         "category": "primitives", 
         "doc": {
            "headline": "A heading represents a direction.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }
         ], 
         "method_names": [
            "get_heading_type", 
            "get_dimensions", 
            "get_values", 
            "defines_uncertainty", 
            "get_uncertainty_minus", 
            "get_uncertainty_plus"
         ], 
         "methods": [
            {
               "name": "get_heading_type", 
               "doc": {
                  "headline": "Gets the ``Type`` of this ``Heading`` which indicates the format of the heading values.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the coordinate type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_dimensions", 
               "doc": {
                  "headline": "Gets the number of dimensions of motion.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of dimensions", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of dimensions\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_values", 
               "doc": {
                  "headline": "Gets the values of this heading The size of the returned array is typically one less than ``getDimensions()``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the heading values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the heading values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "defines_uncertainty", 
               "doc": {
                  "headline": "Tests if uncertainty is defined for this heading.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if uncertainty is defined,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if uncertainty is defined, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_uncertainty_minus", 
               "doc": {
                  "headline": "Gets the uncertainty in the negtive direction for each value of this heading.", 
                  "body": "        The size of the returned array is typically one less than\n        ``getDimensions()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the negative uncertainty values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the negative uncertainty values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_uncertainty_plus", 
               "doc": {
                  "headline": "Gets the uncertainty in the positive direction for each value of this heading.", 
                  "body": "        The size of the returned array is typically one less than\n        ``getDimensions()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the positive uncertainty values", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the positive uncertainty values\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.SpatialUnit", 
         "shortname": "SpatialUnit", 
         "category": "primitives", 
         "doc": {
            "headline": "A spatial unit can represent a single position or an area constructed of multiple positions or shapes.", 
            "body": "    The data describing the spatial unit is defined in the record\n    indicated by the record type."
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive", 
            "osid.Extensible"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive", 
            "Extensible"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Extensible"
            }
         ], 
         "method_names": [
            "get_center_coordinate", 
            "get_bounding_coordinates", 
            "get_spatial_unit_record"
         ], 
         "methods": [
            {
               "name": "get_center_coordinate", 
               "doc": {
                  "headline": "Gets a single corrdinate to represent the center of this spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the center coordinate", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the center coordinate\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {}
            }, 
            {
               "name": "get_bounding_coordinates", 
               "doc": {
                  "headline": "Gets a list of bounding coordinates of this spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.CoordinateList) - the bounding coordinates", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bounding coordinates\n        :rtype: ``osid.mapping.CoordinateList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.CoordinateList", 
               "errors": {}
            }, 
            {
               "name": "get_spatial_unit_record", 
               "doc": {
                  "headline": "Gets the spatial unit record corresponding to the given ``SpatialUnit`` record ``Type``.", 
                  "body": "        The ``spatial_unit_record_type`` may be the ``Type`` returned in\n        ``get_record_types()`` or any of its parents in a ``Type``\n        hierarchy where ``has_record_type(spatial_unit_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    spatial_unit_record_type (osid.type.Type): the type of\n                spatial unit record to retrieve\n", 
               "return_doc": "        return: (osid.mapping.records.SpatialUnitRecord) - the spatial\n                unit record", 
               "error_doc": "        raise:  NullArgument - ``spatial_unit_record_type`` is ``null``\n        raise:  Unsupported -\n                ``has_record_type(spatial_unit_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param spatial_unit_record_type: the type of spatial unit record to retrieve\n        :type spatial_unit_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the spatial unit record\n        :rtype: ``osid.mapping.records.SpatialUnitRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``spatial_unit_record_type`` is ``null``\n        :raise: ``Unsupported`` -- ``has_record_type(spatial_unit_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "spatial_unit_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.mapping.records.SpatialUnitRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.records.SpatialUnitRecord", 
         "shortname": "SpatialUnitRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``SpatialUnitRecord``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.mapping.SpatialUnitList", 
         "shortname": "SpatialUnitList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``SpatialUnitList`` provides a means for accessing ``SpatialUnit`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (sul.hasNext()) { SpatialUnit unit =\n    sul.getNextSpatialUnit(); }\n\n    or\n      while (sul.hasNext()) {\n           SpatialUnit[] units = sul.getNextSpatialUnits(sul.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_spatial_unit", 
            "get_next_spatial_units"
         ], 
         "methods": [
            {
               "name": "get_next_spatial_unit", 
               "doc": {
                  "headline": "Gets the next ``SpatialUnit`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.SpatialUnit) - the next ``SpatialUnit`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``SpatialUnit`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``SpatialUnit`` in this list. The ``has_next()`` method should be used to test that a next ``SpatialUnit`` is available before calling this method.\n        :rtype: ``osid.mapping.SpatialUnit``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.SpatialUnit", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_spatial_units", 
               "doc": {
                  "headline": "Gets the next set of ``SpatialUnit`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``SpatialUnit`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.mapping.SpatialUnit) - an array of ``SpatialUnit``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``SpatialUnit`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``SpatialUnit`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.mapping.SpatialUnit``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.mapping.SpatialUnit", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.mapping.Distance", 
         "shortname": "Distance", 
         "category": "primitives", 
         "doc": {
            "headline": "A distance.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }
         ], 
         "method_names": [
            "get_yotta_parsecs", 
            "get_exa_parsecs", 
            "get_giga_parsecs", 
            "get_yottameters", 
            "get_zettameters", 
            "get_exameters", 
            "get_parsecs", 
            "get_light_years", 
            "get_petameters", 
            "get_terameters", 
            "get_gigameters", 
            "get_megameters", 
            "get_kilometers", 
            "get_meters", 
            "get_atto_parsecs", 
            "get_centimeters", 
            "get_millimeters", 
            "get_microns", 
            "get_nanometers", 
            "get_angstroms", 
            "get_picometers", 
            "get_femtometers", 
            "get_attometers", 
            "get_zeptometers", 
            "get_yoctometers", 
            "get_xoxxometers", 
            "get_weebleometers", 
            "get_vatometers", 
            "get_plancks", 
            "get_granularity", 
            "get_granularity_multiplier", 
            "defines_uncertainty", 
            "get_uncertainty_units", 
            "get_uncertainty_minus", 
            "get_uncertainty_plus"
         ], 
         "methods": [
            {
               "name": "get_yotta_parsecs", 
               "doc": {
                  "headline": "Gets the number of yottaparsecs.", 
                  "body": "        You should budget extra time to travel a yottaparsec."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of yottaparsecs", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of yottaparsecs\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_exa_parsecs", 
               "doc": {
                  "headline": "Gets the number of exaparsecs.", 
                  "body": "        An exaparsec is much shorter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of exaparsecs", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of exaparsecs\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_giga_parsecs", 
               "doc": {
                  "headline": "Get sthe number of gigaparsecs.", 
                  "body": "        The diameter of the observable universe can be measured in\n        gigaparsecs."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of gigaparsecs", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of gigaparsecs\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_yottameters", 
               "doc": {
                  "headline": "Gets this distance in yottameters.", 
                  "body": "        A yottameter is 1 trillion terameters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of yottameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of yottameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_zettameters", 
               "doc": {
                  "headline": "Gets this distance in zettameters.", 
                  "body": "        A zettameter is one billion terameters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of zettameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of zettameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_exameters", 
               "doc": {
                  "headline": "Gets this distance in exameters.", 
                  "body": "        A exameter is 1BB meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of exameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of exameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_parsecs", 
               "doc": {
                  "headline": "Gets this distance in parsecs.", 
                  "body": "        A parsec is 30,857,000,000,000,000 meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of parsecs", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of parsecs\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_light_years", 
               "doc": {
                  "headline": "Gets this distance in light years.", 
                  "body": "        A light year is 9,460,730,472,580,800 meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of light years", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of light years\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_petameters", 
               "doc": {
                  "headline": "Gets this distance in petameters.", 
                  "body": "        A petameter is 1M gigameters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of petameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of petameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_terameters", 
               "doc": {
                  "headline": "Gets this distance in terameters.", 
                  "body": "        A terameter is one trillion meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of terameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of terameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_gigameters", 
               "doc": {
                  "headline": "Gets this distance in gigameters.", 
                  "body": "        A gigameter is 1B meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of gigameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of gigameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_megameters", 
               "doc": {
                  "headline": "Gets this distance in megameters.", 
                  "body": "        A megameter is longer than a megaman."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of megameters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of megameters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_kilometers", 
               "doc": {
                  "headline": "Gets this distance kilometers.", 
                  "body": "        A kilometer is 1,000 meters."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of kilometres", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of kilometres\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_meters", 
               "doc": {
                  "headline": "Gets this distance in meters.", 
                  "body": "        A meter is 0.0049709695379 furlongs."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of meters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of meters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_atto_parsecs", 
               "doc": {
                  "headline": "Gets this distance in attoparsecs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of attoparsecs", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of attoparsecs\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_centimeters", 
               "doc": {
                  "headline": "Gets this distance in centimeters.", 
                  "body": "        A centimeter is one hundreth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of centimeters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of centimeters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_millimeters", 
               "doc": {
                  "headline": "Gets this distance in millimeters.", 
                  "body": "        A millimeter is one thousandth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of millimeters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of millimeters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_microns", 
               "doc": {
                  "headline": "Gets this distance in micrometers.", 
                  "body": "        A micron is one millionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of microns", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of microns\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_nanometers", 
               "doc": {
                  "headline": "Gets this distance in nanometers.", 
                  "body": "        A nanometer is one billionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of nanometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of nanometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_angstroms", 
               "doc": {
                  "headline": "Gets this distance in angstroms.", 
                  "body": "        An angstrom is one ten billionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of angstroms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of angstroms\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_picometers", 
               "doc": {
                  "headline": "Gets this distance in picometers.", 
                  "body": "        A picometer is one trillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of picometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of picometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_femtometers", 
               "doc": {
                  "headline": "Gets this distance in femotometers.", 
                  "body": "        A femoto is one quadrillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of femtometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of femtometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_attometers", 
               "doc": {
                  "headline": "Gets this distance in attometers.", 
                  "body": "        An attometer is one quintillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of attometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of attometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_zeptometers", 
               "doc": {
                  "headline": "Gets this distance in zeptometers.", 
                  "body": "        A zeptometer is one sextillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of zeptometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of zeptometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_yoctometers", 
               "doc": {
                  "headline": "Gets this distance in yoctometers.", 
                  "body": "        A yoctometer is one septillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of yoctometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of yoctometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_xoxxometers", 
               "doc": {
                  "headline": "Gets this distance in xoxxometers.", 
                  "body": "        A xoxxometer is one octillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of xoxxometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of xoxxometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_weebleometers", 
               "doc": {
                  "headline": "Gets this distance in weeblemeters.", 
                  "body": "        A weeblemeter is one nonillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of weeblemeters", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of weeblemeters\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_vatometers", 
               "doc": {
                  "headline": "Gets this distance in vatometers.", 
                  "body": "        A vatometer is one decillionth of a meter."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of vatometers", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of vatometers\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_plancks", 
               "doc": {
                  "headline": "Gets this distance in plancks.", 
                  "body": "        Plancks are really small."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the number of plancks", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of plancks\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_granularity", 
               "doc": {
                  "headline": "Gets the granularity of this distance.", 
                  "body": "        The granularity indicates the resolution of the yardstick. More\n        precision than what is specified in this method cannot be\n        inferred from the available data."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.DistanceResolution) - granularity", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: granularity\n        :rtype: ``osid.mapping.DistanceResolution``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.DistanceResolution", 
               "errors": {}
            }, 
            {
               "name": "get_granularity_multiplier", 
               "doc": {
                  "headline": "If the granularity of the measurement equals ``get_granularity(),`` then the multiplier is 1.", 
                  "body": "        This method may return a different number when the granularity\n        differs from one of the defined resolutions."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - granularity multiplier", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: granularity multiplier\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "defines_uncertainty", 
               "doc": {
                  "headline": "Tests if uncertainty is defined for this distance.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if uncertainty is defined,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if uncertainty is defined, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_uncertainty_units", 
               "doc": {
                  "headline": "Gets the units of the uncertainty.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.mapping.DistanceResolution) - units of the\n                uncertainty", 
               "error_doc": "        raise:  IllegalState - ``defines_uncertainty()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: units of the uncertainty\n        :rtype: ``osid.mapping.DistanceResolution``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``defines_uncertainty()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.mapping.DistanceResolution", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_uncertainty_minus", 
               "doc": {
                  "headline": "Gets the uncertainty of this distance in the negative direction in meters.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the uncertainty under this value", 
               "error_doc": "        raise:  IllegalState - ``defines_uncertainty()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the uncertainty under this value\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``defines_uncertainty()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_uncertainty_plus", 
               "doc": {
                  "headline": "Gets the uncertainty of this distance in the positive direction in meters.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the uncertainty over this value", 
               "error_doc": "        raise:  IllegalState - ``defines_uncertainty()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the uncertainty over this value\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``defines_uncertainty()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.mapping"
}
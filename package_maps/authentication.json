{
   "name": "authentication", 
   "version": "3.0.0", 
   "title": "Authentication Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002-2004, 2007 Massachusetts Institute of Technology.\n\nCopyright (c) 2009 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may modify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Authentication OSID manages authenticated entities.\n\nAgent\n\nThe Authentication OSID defines an ``Agent`` to represent the identity\nof the authenticated entity. An Agent may map to a specific\nauthentication principal while some providers may elect to hide multiple\nauthentication principals behind a single ``Agent``. Because principal\nidentities tend not to be durable and persistent, consumers should\nalways persist the ``Id``.\n\nResource Mapping\n\nAn ``Agent`` may be mapped to a ``Resource`` in the Resource OSID. A\n``Resource`` may map to multiple ``Agents`` but an ``Agent`` may only\nmap to a single Resource. In the case of a person, a person may be\nutilize a number of authentication technologies each with a different\nauthentication identity. Decoupling the authentication identity from\nthat of ther person is to provide a means of integrating multiple\nservices where different authentication identities exist for a person\nthat impact the handling of authorization.\n\nAuthorization\n\nAuthorization is a separate service. The Authorization OSID manages what\nfunctions the ``Agent`` is authorized to perform and references the\n``Agent``  ``Id``. The Authentication OSID is only responsible for\nidentity management of the ``Agent``.\n\nEach ``Agent`` of a ``Resource`` may be used to define distinct security\nlevels of assurance (although the paranoid may opt for defining a\npseudo-resource for each ``Agent`` ). These security levels of assurance\ncan be linked to the ``Agent``  ``Type`` and managed in the\nAuthorization OSID. The ``Agent``  ``Type`` would be an indicator of the\nauthentication strength and although it may correlate to a specific\nauthentication technology, coupling it too tightly to a particular\ntechnology may limit flexibility.\n\nCertain consumers may wish to be notified of changes within the service.\nAuthentication supports notifications via an\n``AgentNotificationSession``.\n  if (manager.supportsAgentNotification()) {\n      AgentNotificationSession ans = manager.getAgentNotificationSession(receiver);\n      ans.registerForNewAgents();\n      hangAround();\n  }\n  \n  AgentReceiver receiver {\n      newAgent(Id agentId) { print(\"new agent\"); }\n      changedAgent(Id agentId) { print(\"updated agent\"); }\n      deletedAgent(Id agentId) { print(\"deleted agent\"); }\n  }\n\n\n\nAgency Cataloging\n\n``Agents`` are organized into federateable ``Agency``  ``OsidCatalogs``.\n\nSub Packages\n\nThe Authentication OSID includes an Authentication Key OSID for managing\nprivate keys associated with an ``Agent`` and an Authentication Process\nOSID for acquiring and validating authentication credentials. It slaos\nincludes an Authentication Batch OSID for managing ``Agents`` and\n``Agencies`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.authentication.AuthenticationProfile", 
         "shortname": "AuthenticationProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``AuthenticationProfile`` describes the interoperability among authentication services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_authentication_acquisition", 
            "supports_authentication_validation", 
            "supports_agent_lookup", 
            "supports_agent_query", 
            "supports_agent_search", 
            "supports_agent_admin", 
            "supports_agent_notification", 
            "supports_agent_agency", 
            "supports_agent_agency_assignment", 
            "supports_agent_smart_agency", 
            "supports_agency_lookup", 
            "supports_agency_query", 
            "supports_agency_search", 
            "supports_agency_admin", 
            "supports_agency_notification", 
            "supports_agency_hierarchy", 
            "supports_agency_hierarchy_design", 
            "supports_authentication_keys", 
            "supports_authentication_process", 
            "get_agent_record_types", 
            "supports_agent_record_type", 
            "get_agent_search_record_types", 
            "supports_agent_search_record_type", 
            "get_agency_record_types", 
            "supports_agency_record_type", 
            "get_agency_search_record_types", 
            "supports_agency_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_acquisition", 
               "doc": {
                  "headline": "Tests is authentication acquisition is supported.", 
                  "body": "        Authentication acquisition is responsible for acquiring client\n        side authentication credentials."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if authentication acquisiiton is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if authentication acquisiiton is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_validation", 
               "doc": {
                  "headline": "Tests if authentication validation is supported.", 
                  "body": "        Authentication validation verifies given authentication\n        credentials and maps to an agent identity."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if authentication validation is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if authentication validation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_lookup", 
               "doc": {
                  "headline": "Tests if an agent lookup service is supported.", 
                  "body": "        An agent lookup service defines methods to access agents."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_query", 
               "doc": {
                  "headline": "Tests if an agent query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_search", 
               "doc": {
                  "headline": "Tests if an agent search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_admin", 
               "doc": {
                  "headline": "Tests if an agent administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_notification", 
               "doc": {
                  "headline": "Tests if agent notification is supported.", 
                  "body": "        Messages may be sent when agents are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent notification is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_agency", 
               "doc": {
                  "headline": "Tests if retrieving mappings of agents and agencies is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent agency mapping retrieval\n                is supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent agency mapping retrieval is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_agency_assignment", 
               "doc": {
                  "headline": "Tests if managing mappings of agents and agencies is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent agency assignment is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent agency assignment is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_smart_agency", 
               "doc": {
                  "headline": "Tests if agent smart agency is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agent smart agency is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agent smart agency is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_lookup", 
               "doc": {
                  "headline": "Tests if an agency lookup service is supported.", 
                  "body": "        An agency lookup service defines methods to access agencies."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agency lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agency lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_query", 
               "doc": {
                  "headline": "Tests if an agency query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agency query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agency query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_search", 
               "doc": {
                  "headline": "Tests if an agency search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agency search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agency search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_admin", 
               "doc": {
                  "headline": "Tests if an agency administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agency admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agency admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_notification", 
               "doc": {
                  "headline": "Tests if agency notification is supported.", 
                  "body": "        Messages may be sent when agencies are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if agency notification is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if agency notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_hierarchy", 
               "doc": {
                  "headline": "Tests if an agency hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agency hierarchy traversal is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agency hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_hierarchy_design", 
               "doc": {
                  "headline": "Tests if an agency hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agency hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agency hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_keys", 
               "doc": {
                  "headline": "Tests if an authentication key service is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an authentication key service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an authentication key service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_process", 
               "doc": {
                  "headline": "Tests if an authentication process service is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an authentication process\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an authentication process service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Agent`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Agent`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Agent`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Agent`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): a ``Type``\n                indicating an ``Agent`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record Type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param agent_record_type: a ``Type`` indicating an ``Agent`` record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Agent`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Agent`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Agent`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Agent`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_search_record_type (osid.type.Type): a ``Type``\n                indicating an ``Agent`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agent_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param agent_search_record_type: a ``Type`` indicating an ``Agent`` search record type\n        :type agent_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Agency`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Agency`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Agency`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Agency`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): a ``Type``\n                indicating an ``Agency`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record Type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param agency_record_type: a ``Type`` indicating an ``Agency`` record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Agency`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Agency`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Agency`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Agency`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_search_record_type (osid.type.Type): a ``Type``\n                indicating an ``Agency`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agency_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param agency_search_record_type: a ``Type`` indicating an ``Agency`` search record type\n        :type agency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AuthenticationManager", 
         "shortname": "AuthenticationManager", 
         "category": "managers", 
         "doc": {
            "headline": "The authentication manager provides access to authentication sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``AgentLookupSession:`` a session to look up ``Agents``\n      * ``AgentQuerySession:`` a session to query ``Agents``\n      * ``AgentSearchSession:`` a session to search ``Agents``\n      * ``AgentAdminSession:`` a session to create, modify and delete\n        ``Agents``\n      * ``AgentNotificationSession: a`` session to receive messages\n        pertaining to ``Agent`` changes\n    \n      * ``AgentAgencySession:`` a session to retrieve ``Agent`` to\n        ``Agency`` mappings\n      * ``AgentAgencyAssignmentSession:`` a session to manage ``Agent``\n        to ``Agency`` mappings\n      * ``AgentSmartAgencySession:`` a session to create dynamic\n        agencies\n      * ``AgencyLookupSession:`` a session to lookup agencies\n      * ``AgencyQuerySession:`` a session to query agencies\n      * ``AgencySearchSession`` : a session to search agencies\n      * ``AgencyAdminSession`` : a session to create, modify and delete\n        agencies\n      * ``AgencyNotificationSession`` : a session to receive messages\n        pertaining to ``Agency`` changes\n      * ``AgencyHierarchySession`` : a session to traverse the\n        ``Agency`` hierarchy\n      * ``AgencyHierarchyDesignSession`` : a session to manage the\n        ``Agency`` hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.authentication.AuthenticationProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "AuthenticationProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "authentication"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "authentication", 
               "name": "AuthenticationProfile"
            }
         ], 
         "method_names": [
            "get_agent_lookup_session", 
            "get_agent_lookup_session_for_agency", 
            "get_agent_query_session", 
            "get_agent_query_session_for_agency", 
            "get_agent_search_session", 
            "get_agent_search_session_for_agency", 
            "get_agent_admin_session", 
            "get_agent_admin_session_for_agency", 
            "get_agent_notification_session", 
            "get_agent_notification_session_for_agency", 
            "get_agent_agency_session", 
            "get_agent_agency_assignment_session", 
            "get_agent_smart_agency_session", 
            "get_agency_lookup_session", 
            "get_agency_search_session", 
            "get_agency_admin_session", 
            "get_agency_notification_session", 
            "get_agency_hierarchy_session", 
            "get_agency_hierarchy_design_session", 
            "get_authentication_batch_manager", 
            "get_authentication_keys_manager", 
            "get_authentication_process_manager"
         ], 
         "methods": [
            {
               "name": "get_agent_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentLookupSession) - an\n                ``AgentLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgentLookupSession``\n        :rtype: ``osid.authentication.AgentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_lookup_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent lookup service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentLookupSession) - ``an\n                _agent_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_lookup_session``\n        :rtype: ``osid.authentication.AgentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuerySession) - an\n                ``AgentQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgentQuerySession``\n        :rtype: ``osid.authentication.AgentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent query service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentQuerySession) - ``an\n                _agent_query_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_query_session``\n        :rtype: ``osid.authentication.AgentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchSession) - an\n                ``AgentSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgentSearchSession``\n        :rtype: ``osid.authentication.AgentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent search service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentSearchSession) - ``an\n                _agent_search_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_search_session``\n        :rtype: ``osid.authentication.AgentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentAdminSession) - an\n                ``AgentAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgentAdminSession``\n        :rtype: ``osid.authentication.AgentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_admin_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent admin service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentAdminSession) - ``an\n                _agent_admin_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_admin_session``\n        :rtype: ``osid.authentication.AgentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_receiver (osid.authentication.AgentReceiver): the\n                agent receiver\n", 
               "return_doc": "        return: (osid.authentication.AgentNotificationSession) - an\n                ``AgentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``agent_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_receiver: the agent receiver\n        :type agent_receiver: ``osid.authentication.AgentReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``AgentNotificationSession``\n        :rtype: ``osid.authentication.AgentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentReceiver", 
                     "var_name": "agent_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentReceiver"
               ], 
               "return_type": "osid.authentication.AgentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_notification_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent notification service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_receiver (osid.authentication.AgentReceiver): the\n                agent receiver\n        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentNotificationSession) - ``an\n                _agent_notification_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agent_receiver`` or ``agency_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agent_receiver: the agent receiver\n        :type agent_receiver: ``osid.authentication.AgentReceiver``\n        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_notification_session``\n        :rtype: ``osid.authentication.AgentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agent_receiver`` or ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentReceiver", 
                     "var_name": "agent_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_agency_session", 
               "doc": {
                  "headline": "Gets the session for retrieving agent to agency mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentAgencySession) - an\n                ``AgentAgencySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_agency()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgentAgencySession``\n        :rtype: ``osid.authentication.AgentAgencySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_agency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_agency()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentAgencySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_agency_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning agent to agency mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentAgencyAssignmentSession) - a\n                ``AgentAgencyAsignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_agency_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``AgentAgencyAsignmentSession``\n        :rtype: ``osid.authentication.AgentAgencyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_agency_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_agency_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentAgencyAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_smart_agency_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent smart agency service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.AgentSmartAgencySession) - an\n                ``AgentSmartAgencySession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_smart_agency()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AgentSmartAgencySession``\n        :rtype: ``osid.authentication.AgentSmartAgencySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_smart_agency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_smart_agency()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentSmartAgencySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyLookupSession) - an\n                ``AgencyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencyLookupSession``\n        :rtype: ``osid.authentication.AgencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencySearchSession) - an\n                ``AgencySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencySearchSession``\n        :rtype: ``osid.authentication.AgencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyAdminSession) - an\n                ``AgencyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencyAdminSession``\n        :rtype: ``osid.authentication.AgencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to agency service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_receiver (osid.authentication.AgencyReceiver):\n                the agency receiver\n", 
               "return_doc": "        return: (osid.authentication.AgencyNotificationSession) - an\n                ``AgencyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``agency_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_receiver: the agency receiver\n        :type agency_receiver: ``osid.authentication.AgencyReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyNotificationSession``\n        :rtype: ``osid.authentication.AgencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyReceiver", 
                     "var_name": "agency_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyReceiver"
               ], 
               "return_type": "osid.authentication.AgencyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing agency hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyHierarchySession) - an\n                ``AgencyHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencyHierarchySession``\n        :rtype: ``osid.authentication.AgencyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing agency hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyHierarchyDesignSession) - an\n                ``AgencyHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencyHierarchyDesignSession``\n        :rtype: ``osid.authentication.AgencyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_batch_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.batch.AuthenticationBatchManager) -\n                an ``AuthenticationBatchManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationBatchManager``.\n        :rtype: ``osid.authentication.batch.AuthenticationBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.batch.AuthenticationBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_keys_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationKeysManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.keys.AuthenticationKeysManager) -\n                an ``AuthenticationKeysManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_keys()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationKeysManager``.\n        :rtype: ``osid.authentication.keys.AuthenticationKeysManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_keys()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_keys()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.keys.AuthenticationKeysManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_process_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationProcessManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationProcessManage\n                r) - an ``AuthenticationProcessManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_process()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationProcessManager``.\n        :rtype: ``osid.authentication.process.AuthenticationProcessManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_process()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_process()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.AuthenticationProcessManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AuthenticationProxyManager", 
         "shortname": "AuthenticationProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The authentication proxy manager provides access to authentication sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy`` object.\n    The sessions included in this manager are:\n\n      * ``AgentLookupSession:`` session to look up ``Agents``\n      * ``AgentQuerySession`` : a session to query ``Agents``\n      * ``AgentSearchSession:`` session to search ``Agents``\n      * ``AgentAdminSession:`` session to create, modify and delete\n        ``Agents``\n      * Agent ``NotificationSession:`` session to receive messages\n        pertaining to ``Agent`` changes\n    \n      * ``AgentAgencySession:`` a session to retrieve ``Agent`` to\n        ``Agency`` mappings\n      * ``AgentAgencyAssignmentSession:`` a session to manage ``Agent``\n        to ``Agency`` mappings\n      * ``AgentSmartAgencySession:`` a session to create dynamic\n        agencies\n      * ``AgencyLookupSession:`` a session to lookup agencies\n      * ``AgencyQuerySession:`` a session to query agencies\n      * ``AgencySearchSession`` : a session to search agencies\n      * ``AgencyAdminSession`` : a session to create, modify and delete\n        agencies\n      * ``AgencyNotificationSession`` : a session to receive messages\n        pertaining to ``Agency`` changes\n      * ``AgencyHierarchySession`` : a session to traverse the\n        ``Agency`` hierarchy\n      * ``AgencyHierarchyDesignSession`` : a session to manage the\n        ``Agency`` hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.authentication.AuthenticationProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "AuthenticationProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "authentication"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "authentication", 
               "name": "AuthenticationProfile"
            }
         ], 
         "method_names": [
            "get_agent_lookup_session", 
            "get_agent_lookup_session_for_agency", 
            "get_agent_query_session", 
            "get_agent_query_session_for_agency", 
            "get_agent_search_session", 
            "get_agent_search_session_for_agency", 
            "get_agent_admin_session", 
            "get_agent_admin_session_for_agency", 
            "get_agent_notification_session", 
            "get_agent_notification_session_for_agency", 
            "get_agent_agency_session", 
            "get_agent_agency_assignment_session", 
            "get_agent_smart_agency_session", 
            "get_agency_lookup_session", 
            "get_agency_search_session", 
            "get_agency_admin_session", 
            "get_agency_notification_session", 
            "get_agency_hierarchy_session", 
            "get_agency_hierarchy_design_session", 
            "get_authentication_batch_proxy_manager", 
            "get_authentication_keys_proxy_manager", 
            "get_authentication_process_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_agent_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentLookupSession) - an\n                ``AgentLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentLookupSession``\n        :rtype: ``osid.authentication.AgentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_lookup_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent lookup service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentLookupSession) - ``an\n                _agent_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_lookup_session``\n        :rtype: ``osid.authentication.AgentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentQuerySession) - an\n                ``AgentQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentQuerySession``\n        :rtype: ``osid.authentication.AgentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent query service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentQuerySession) - an\n                ``AgentQuerySession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentQuerySession``\n        :rtype: ``osid.authentication.AgentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentSearchSession) - an\n                ``AgentSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentSearchSession``\n        :rtype: ``osid.authentication.AgentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent search service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentSearchSession) - ``an\n                _agent_search_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_search_session``\n        :rtype: ``osid.authentication.AgentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentAdminSession) - an\n                ``AgentAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentAdminSession``\n        :rtype: ``osid.authentication.AgentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_admin_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent admin service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentAdminSession) - ``an\n                _agent_admin_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_admin_session``\n        :rtype: ``osid.authentication.AgentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_notification_session", 
               "doc": {
                  "headline": "Gets the messaging receiver session for notifications pertaining to agent changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_receiver (osid.authentication.AgentReceiver): the\n                agent receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentNotificationSession) - an\n                ``AgentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` or ``agent_receiver`` is null\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_receiver: the agent receiver\n        :type agent_receiver: ``osid.authentication.AgentReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentNotificationSession``\n        :rtype: ``osid.authentication.AgentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` or ``agent_receiver`` is null\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentReceiver", 
                     "var_name": "agent_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_notification_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent notification service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_receiver (osid.authentication.AgentReceiver): the\n                agent receiver\n        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentNotificationSession) - ``an\n                _agent_notification_session``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agent_receiver, agency_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_agent_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agent_receiver: the agent receiver\n        :type agent_receiver: ``osid.authentication.AgentReceiver``\n        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _agent_notification_session``\n        :rtype: ``osid.authentication.AgentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agent_receiver, agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_agent_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentReceiver", 
                     "var_name": "agent_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_agency_session", 
               "doc": {
                  "headline": "Gets the session for retrieving agent to agency mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentAgencySession) - an\n                ``AgentAgencySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_agency()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentAgencySession``\n        :rtype: ``osid.authentication.AgentAgencySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_agency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_agency()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentAgencySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_agency_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning agent to agency mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentAgencyAssignmentSession) - an\n                ``AgentAgencyAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_agency_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentAgencyAssignmentSession``\n        :rtype: ``osid.authentication.AgentAgencyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_agency_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_agency_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentAgencyAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_smart_agency_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agent smart agency service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgentSmartAgencySession) - an\n                ``AgentSmartAgencySession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agent_smart_agency()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the bank\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgentSmartAgencySession``\n        :rtype: ``osid.authentication.AgentSmartAgencySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agent_smart_agency()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_smart_agency()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgentSmartAgencySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencyLookupSession) - an\n                ``AgencyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyLookupSession``\n        :rtype: ``osid.authentication.AgencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencySearchSession) - an\n                ``AgencySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencySearchSession``\n        :rtype: ``osid.authentication.AgencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the agency administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencyAdminSession) - an\n                ``AgencyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyAdminSession``\n        :rtype: ``osid.authentication.AgencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_notification_session", 
               "doc": {
                  "headline": "Gets the messaging receiver session for notifications pertaining to agency changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_receiver (osid.authentication.AgencyReceiver):\n                the agency receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencyNotificationSession) - an\n                ``AgencyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``agency_receiver`` or ``proxy`` is null\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_receiver: the agency receiver\n        :type agency_receiver: ``osid.authentication.AgencyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyNotificationSession``\n        :rtype: ``osid.authentication.AgencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_receiver`` or ``proxy`` is null\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyReceiver", 
                     "var_name": "agency_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing agency hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencyHierarchySession) - an\n                ``AgencyHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is null\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyHierarchySession``\n        :rtype: ``osid.authentication.AgencyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is null\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencyHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing agency hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.AgencyHierarchyDesignSession) - an\n                ``AgencyHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is null\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_agency_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AgencyHierarchyDesignSession``\n        :rtype: ``osid.authentication.AgencyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is null\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_agency_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.AgencyHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.batch.AuthenticationBatchProxyManag\n                er) - an ``AuthenticationBatchProxyManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationBatchProxyManager``.\n        :rtype: ``osid.authentication.batch.AuthenticationBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.batch.AuthenticationBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_keys_proxy_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationKeysProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.keys.AuthenticationKeysProxyManager\n                ) - an ``AuthenticationKeysProxyManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_keys()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationKeysProxyManager``.\n        :rtype: ``osid.authentication.keys.AuthenticationKeysProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_keys()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_keys()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.keys.AuthenticationKeysProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_process_proxy_manager", 
               "doc": {
                  "headline": "Gets an ``AuthenticationProcessProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationProcessProxyM\n                anager) - an ``AuthenticationProcessproxyManager``.", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_process()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationProcessproxyManager``.\n        :rtype: ``osid.authentication.process.AuthenticationProcessProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_process()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_authentication_process()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.AuthenticationProcessProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentLookupSession", 
         "shortname": "AgentLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Agent`` objects.", 
            "body": "    The ``Agent`` represents the authenticated entity. Agents generally\n    map to resources although this isn't always the case.\n\n    This session defines two sets of views which offer differing\n    behaviors when retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete and ordered result set or is\n        an error condition\n      * isolated agency view: All agent methods in this session operate,\n        retrieve and pertain to agents defined explicitly in the current\n        agency. Using an isolated view is useful for managing agents\n        with the AgentAdminSession.\n      * federated agency view: All agent methods in this session\n        operate, retrieve and pertain to all agents defined in this\n        agency and any other agents implicitly available in this agency\n        through agency inheritence.\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there a particular element is\n    inaccessible. For example, a hierarchy output can be plugged into a\n    lookup method to retrieve all objects known to a hierarchy, but it\n    may not be necessary to break execution if a node from the hierarchy\n    no longer exists. However, some administrative applications may need\n    to know whether it had retrieved an entire set of objects and may\n    sacrifice some interoperability for the sake of precision.\n    \n    Agents may have an additional records indicated by their respective\n    record types. The record may not be accessed through a cast of the\n    ``Agent``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_lookup_agents", 
            "use_comparative_agent_view", 
            "use_plenary_agent_view", 
            "use_federated_agency_view", 
            "use_isolated_agency_view", 
            "get_agent", 
            "get_agents_by_ids", 
            "get_agents_by_genus_type", 
            "get_agents_by_parent_genus_type", 
            "get_agents_by_record_type", 
            "get_agents"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_agents", 
               "doc": {
                  "headline": "Tests if this user can perform ``Agent`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_agent_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_agent_view", 
               "doc": {
                  "headline": "A complete view of the ``Agent`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_agency_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include agents in agencies which are\n        children of this agency in the agency hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_agency_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this agency only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agent", 
               "doc": {
                  "headline": "Gets the ``Agent`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Agent`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to an ``Agent`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of an ``Agent``\n", 
               "return_doc": "        return: (osid.authentication.Agent) - the returned ``Agent``", 
               "error_doc": "        raise:  NotFound - no ``Agent`` found with the given ``Id``\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of an ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Agent`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_ids", 
               "doc": {
                  "headline": "Gets an ``AgentList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the agents\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Agents`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    agent_ids (osid.id.IdList): a list of agent ``Ids``\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - the returned ``Agent\n                list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``agent_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_ids: a list of agent ``Ids``\n        :type agent_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agent list``\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``agent_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agent_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``AgentList`` corresponding to the given agent genus ``Type`` which does not include agents of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agents or\n        an error results. Otherwise, the returned list may contain only\n        those agents that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agent_genus_type (osid.type.Type): an agent genus type\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - the returned ``Agent``\n                list", 
               "error_doc": "        raise:  NullArgument - ``agent_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_genus_type: an agent genus type\n        :type agent_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agent`` list\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``AgentList`` corresponding to the given agent genus ``Type`` and include any additional agents with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agents or\n        an error results. Otherwise, the returned list may contain only\n        those agents that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agent_genus_type (osid.type.Type): an agent genus type\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - the returned ``Agent``\n                list", 
               "error_doc": "        raise:  NullArgument - ``agent_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_genus_type: an agent genus type\n        :type agent_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agent`` list\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_record_type", 
               "doc": {
                  "headline": "Gets an ``AgentList`` containing the given agent record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agents or\n        an error results. Otherwise, the returned list may contain only\n        those agents that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): an agent record type\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - the returned ``Agent``\n                list", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_record_type: an agent record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agent`` list\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents", 
               "doc": {
                  "headline": "Gets all ``Agents``.", 
                  "body": "        In plenary mode, the returned list contains all known agents or\n        an error results. Otherwise, the returned list may contain only\n        those agents that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentList) - a list of ``Agents``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Agents``\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentQuerySession", 
         "shortname": "AgentQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Agents``.", 
            "body": "    The search query is constructed using the ``AgentQuery``. The agent\n    record ``Type`` also specifies the record for the agent query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated agency view: searches include agents in agencies of\n        which this agency is a ancestor in the agency hierarchy\n      * isolated agency view: searches are restricted to agents in this\n        agency\n\n    \n    Agents may have an agent query record indicated by their respective\n    agent record types. The agent query record is accessed via the\n    ``AgentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_search_agents", 
            "use_federated_agency_view", 
            "use_isolated_agency_view", 
            "get_agent_query", 
            "get_agents_by_query"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_agents", 
               "doc": {
                  "headline": "Tests if this user can perform ``Agent`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_agency_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include agents in agencies which are\n        children of this agency in the agency hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_agency_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this agency only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query", 
               "doc": {
                  "headline": "Gets an agent query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_agents_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Agents`` matching the given agent query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_query (osid.authentication.AgentQuery): the agent\n                query\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - the returned\n                ``AgentList``", 
               "error_doc": "        raise:  NullArgument - ``agent_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agent_query`` is not of this service", 
               "sphinx_param_doc": "        :param agent_query: the agent query\n        :type agent_query: ``osid.authentication.AgentQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``AgentList``\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agent_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentQuery", 
                     "var_name": "agent_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentQuery"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentSearchSession", 
         "shortname": "AgentSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Agents``.", 
            "body": "    The search query is constructed using the ``AgentQuery``. The agent\n    record ``Type`` also specifies the record for the agent query.\n\n    ``get_agents_by_query()`` is the basic search method and returns a\n    list of ``Agents``. A more advanced search may be performed with\n    ``getAgentsBySearch()``. It accepts an ``AgentSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_agents_by_search()`` returns an ``AgentSearchResults`` that\n    can be used to access the resulting ``AgentList`` or be used to\n    perform a search within the result set through ``AgentSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated agency view: searches include agents in agencies of\n        which this agency is a ancestor in the agency hierarchy\n      * isolated agency view: searches are restricted to agents in this\n        agency\n\n    \n    Agents may have an agent query record indicated by their respective\n    record types. The agent query record is accessed via the\n    ``AgentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.authentication.AgentQuerySession"
         ], 
         "inherit_shortnames": [
            "AgentQuerySession"
         ], 
         "inherit_pkg_names": [
            "authentication"
         ], 
         "inheritance": [
            {
               "pkg_name": "authentication", 
               "name": "AgentQuerySession"
            }
         ], 
         "method_names": [
            "get_agent_search", 
            "get_agent_search_order", 
            "get_agents_by_search", 
            "get_agent_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_agent_search", 
               "doc": {
                  "headline": "Gets an agent search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearch) - the agent search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search\n        :rtype: ``osid.authentication.AgentSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearch", 
               "errors": {}
            }, 
            {
               "name": "get_agent_search_order", 
               "doc": {
                  "headline": "Gets an agent search order.", 
                  "body": "        The ``AgentSearchOrder`` is supplied to an ``AgentSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_agents_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_query (osid.authentication.AgentQuery): the agent\n                query\n        arg:    agent_search (osid.authentication.AgentSearch): the\n                agent search\n", 
               "return_doc": "        return: (osid.authentication.AgentSearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``agent_query`` or ``agent_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agent_search`` or ``agent_query`` is not\n                of this service", 
               "sphinx_param_doc": "        :param agent_query: the agent query\n        :type agent_query: ``osid.authentication.AgentQuery``\n        :param agent_search: the agent search\n        :type agent_search: ``osid.authentication.AgentSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.authentication.AgentSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_query`` or ``agent_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agent_search`` or ``agent_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentQuery", 
                     "var_name": "agent_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.authentication.AgentSearch", 
                     "var_name": "agent_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentQuery", 
                  "osid.authentication.AgentSearch"
               ], 
               "return_type": "osid.authentication.AgentSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_from_inspector", 
               "doc": {
                  "headline": "Gets an agent query from an inspector.", 
                  "body": "        The inspector is available from an ``AgentSearchResults``."
               }, 
               "arg_doc": "        arg:    agent_query_inspector\n                (osid.authentication.AgentQueryInspector): an agent\n                query inspector\n", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  NullArgument - ``agent_query_inspector`` is ``null``\n        raise:  Unsupported - ``agent_query_inspector`` is not of thiss\n                ervice", 
               "sphinx_param_doc": "        :param agent_query_inspector: an agent query inspector\n        :type agent_query_inspector: ``osid.authentication.AgentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``agent_query_inspector`` is not of thiss ervice", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentQueryInspector", 
                     "var_name": "agent_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentQueryInspector"
               ], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentAdminSession", 
         "shortname": "AgentAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Agents``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Agent,`` an ``AgentForm`` is requested using\n    ``get_agent_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``AgentForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``AgentForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``AgentForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``AgentForms`` are requested to the ``Agent``  ``Id``\n    that is to be updated using ``getAgentFormForUpdate()``. Similarly,\n    the ``AgentForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``AgentForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Agents``. To unmap an ``Agent`` from\n    the current ``Agency,`` the ``AgentAgencyAssignmentSession`` should\n    be used. These delete operations attempt to remove the ``Agent``\n    itself thus removing it from all known ``Agency`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_create_agents", 
            "can_create_agent_with_record_types", 
            "get_agent_form_for_create", 
            "create_agent", 
            "can_update_agents", 
            "can_update_agent", 
            "get_agent_form_for_update", 
            "update_agent", 
            "can_delete_agents", 
            "can_delete_agent", 
            "delete_agent", 
            "can_manage_agent_aliases", 
            "alias_agent"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_agents", 
               "doc": {
                  "headline": "Tests if this user can create ``Agents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an ``Agent``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agent`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agent`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_agent_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Agent`` using the desired record types.", 
                  "body": "        While ``AuthenticationManager.getAgentRecordTypes()`` can be\n        used to examine which records are supported, this method tests\n        which record(s) are required for creating a specific ``Agent``.\n        Providing an empty array tests if an ``Agent`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    agent_record_types (osid.type.Type[]): array of agent\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Agent`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``agent_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param agent_record_types: array of agent record types\n        :type agent_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Agent`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "agent_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_form_for_create", 
               "doc": {
                  "headline": "Gets the agent form for creating new agents.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    agent_record_types (osid.type.Type[]): array of agent\n                record types\n", 
               "return_doc": "        return: (osid.authentication.AgentForm) - the agent form", 
               "error_doc": "        raise:  NullArgument - ``agent_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param agent_record_types: array of agent record types\n        :type agent_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the agent form\n        :rtype: ``osid.authentication.AgentForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "agent_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.authentication.AgentForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_agent", 
               "doc": {
                  "headline": "Creates a new ``Agent``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_form (osid.authentication.AgentForm): the form for\n                this ``Agent``\n", 
               "return_doc": "        return: (osid.authentication.Agent) - the new ``Agent``", 
               "error_doc": "        raise:  IllegalState - ``agent_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``agent_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agent_form`` did not originate from\n                ``get_agent_form_for_create()``", 
               "sphinx_param_doc": "        :param agent_form: the form for this ``Agent``\n        :type agent_form: ``osid.authentication.AgentForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``agent_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``agent_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agent_form`` did not originate from ``get_agent_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentForm", 
                     "var_name": "agent_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentForm"
               ], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_agents", 
               "doc": {
                  "headline": "Tests if this user can update ``Agents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an ``Agent``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer update\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if agent modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if agent modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_update_agent", 
               "doc": {
                  "headline": "Tests if this user can update a specified agent.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating the agent\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer an update\n        operation to an unauthorized user for this agent."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (boolean) - ``false`` if agent modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if agent modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If the ``agent_id`` is not found, then\n        it is acceptable to return false to indicate the lack of an\n        update available.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_form_for_update", 
               "doc": {
                  "headline": "Gets the agent form for updating an existing agent.", 
                  "body": "        A new agent form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (osid.authentication.AgentForm) - the agent form", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the agent form\n        :rtype: ``osid.authentication.AgentForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_agent", 
               "doc": {
                  "headline": "Updates an existing agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_form (osid.authentication.AgentForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``agent_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``agent_id`` or ``agent_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agent_form`` did not originate from\n                ``get_agent_form_for_update()``", 
               "sphinx_param_doc": "        :param agent_form: the form containing the elements to be updated\n        :type agent_form: ``osid.authentication.AgentForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``agent_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``agent_id`` or ``agent_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agent_form`` did not originate from ``get_agent_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentForm", 
                     "var_name": "agent_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_agents", 
               "doc": {
                  "headline": "Tests if this user can delete ``Agents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an ``Agent``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer delete\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agent`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agent`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_delete_agent", 
               "doc": {
                  "headline": "Tests if this user can delete a specified ``Agent``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting the\n        ``Agent`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer a\n        delete operation to an unauthorized user for this agent."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agent`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agent`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If the ``agent_id`` is not found, then\n        it is acceptable to return false to indicate the lack of a\n        delete available.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "delete_agent", 
               "doc": {
                  "headline": "Deletes the ``Agent`` identified by the given ``Id`` removing it from all other ``Agencies`` to which this ``Agent`` is associated.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Agent`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent`` to delete\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Agent`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_agent_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Agents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agent`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agent`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_agent", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Agent`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Agent`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another engine, it is\n        reassigned to the given engine ``Id``."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of an ``Agent``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``agent_id`` not found\n        raise:  NullArgument - ``agent_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of an ``Agent``\n        :type agent_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``agent_id`` not found\n        :raise: ``NullArgument`` -- ``agent_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentNotificationSession", 
         "shortname": "AgentNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``Agent`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``AgentLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_register_for_agent_notifications", 
            "use_federated_agency_view", 
            "use_isolated_agency_view", 
            "register_for_new_agents", 
            "register_for_changed_agents", 
            "register_for_changed_agent", 
            "register_for_deleted_agents", 
            "register_for_deleted_agent"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_agent_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Agent`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_agency_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include agents in agencies which are\n        children of this agency in the agency hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_agency_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this agency only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_agents", 
               "doc": {
                  "headline": "Register for notifications of new agents.", 
                  "body": "        ``AgentReceiver.newAgent()`` is invoked when a new ``Agent`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_agents", 
               "doc": {
                  "headline": "Registers for notification of updated agents.", 
                  "body": "        ``AgentReceiver.changedAgent()`` is invoked when an agent is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_agent", 
               "doc": {
                  "headline": "Registers for notification of an updated agent.", 
                  "body": "        ``AgentReceiver.changedAgent()`` is invoked when the specified\n        agent is changed."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent`` to monitor\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agents", 
               "doc": {
                  "headline": "Registers for notification of deleted agents.", 
                  "body": "        ``AgentReceiver.deletedAgent()`` is invoked when an agent is\n        removed from this agency."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agent", 
               "doc": {
                  "headline": "Registers for notification of a deleted agent.", 
                  "body": "        ``AgentReceiver.deletedAgent()`` is invoked when the specified\n        agent is removed from this agency."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent`` to monitor\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentAgencySession", 
         "shortname": "AgentAgencySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Agents`` to ``Agency`` mappings.", 
            "body": "    An ``Agent`` may appear in multiple ``Agency`` objects. Each\n    ``Agency`` may have its own authorizations governing who is allowed\n    to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_agent_agency_mappings", 
            "use_comparative_agency_view", 
            "use_plenary_agency_view", 
            "get_agent_ids_by_agency", 
            "get_agents_by_agency", 
            "get_agent_ids_by_agencies", 
            "get_agents_by_agencies", 
            "get_agency_ids_by_agent", 
            "get_agencies_by_agent"
         ], 
         "methods": [
            {
               "name": "can_lookup_agent_agency_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of agent/agency mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_agency_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_agency_view", 
               "doc": {
                  "headline": "A complete view of the ``Agent`` and ``Agency`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agent_ids_by_agency", 
               "doc": {
                  "headline": "Gets the list of ``Agent``  ``Ids`` associated with an ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related agent ``Ids``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related agent ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_agency", 
               "doc": {
                  "headline": "Gets the list of ``Agents`` associated with an ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - list of related agents", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related agents\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agent_ids_by_agencies", 
               "doc": {
                  "headline": "Gets the list of ``Agent Ids`` corresponding to a list of ``Agency`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_ids (osid.id.IdList): list of agency ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of agent ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``agency_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_ids: list of agency ``Ids``\n        :type agency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of agent ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_agencies", 
               "doc": {
                  "headline": "Gets the list of ``Agents`` corresponding to a list of ``Agency`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_ids (osid.id.IdList): list of agency ``Ids``\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - list of agents", 
               "error_doc": "        raise:  NullArgument - ``agency_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_ids: list of agency ``Ids``\n        :type agency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of agents\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agency_ids_by_agent", 
               "doc": {
                  "headline": "Gets the list of ``Agency``  ``Ids`` mapped to an ``Agent``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` of an ``Agent``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of agency ``Ids``", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` of an ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of agency ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_agent", 
               "doc": {
                  "headline": "Gets the list of ``Agency`` objects mapped to an ``Agent``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` of an ``Agent``\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - list of agencies", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` of an ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of agencies\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentAgencyAssignmentSession", 
         "shortname": "AgentAgencyAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Agents`` to ``Agencies`` An ``Agent`` may map to multiple ``Agency`` objects and removing the last reference to an ``Agent`` is the equivalent of deleting it.", 
            "body": "    Each ``Agency`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Moving or adding a reference of an ``Ageny`` to another ``Agency``\n    is not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_agents", 
            "can_assign_agents_to_agency", 
            "get_assignable_agency_ids", 
            "get_assignable_agency_ids_for_agent", 
            "assign_agent_to_agency", 
            "unassign_agent_from_agency"
         ], 
         "methods": [
            {
               "name": "can_assign_agents", 
               "doc": {
                  "headline": "Tests if this user can alter agent/agency mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_agents_to_agency", 
               "doc": {
                  "headline": "Tests if this user can alter agent/agency mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_agency_ids", 
               "doc": {
                  "headline": "Gets a list of agencies including and under the given agency node in which any agent can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable agency ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable agency ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_agency_ids_for_agent", 
               "doc": {
                  "headline": "Gets a list of agencies including and under the given agency node in which a specific agent can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bin ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` or ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` or ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_agent_to_agency", 
               "doc": {
                  "headline": "Adds an existing ``Agent`` to an ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``agent_id`` is already assigned to\n                ``agency_id``\n        raise:  NotFound - ``agent_id`` or ``agency_id`` not found\n        raise:  NullArgument - ``agent_id`` or ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``agent_id`` is already assigned to ``agency_id``\n        :raise: ``NotFound`` -- ``agent_id`` or ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agent_id`` or ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_agent_from_agency", 
               "doc": {
                  "headline": "Removes an ``Agent`` from an ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agent_id`` or ``agency_id`` not found or\n                ``agent_id`` not assigned to ``agency_id``\n        raise:  NullArgument - ``agent_id`` or ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` or ``agency_id`` not found or ``agent_id`` not assigned to ``agency_id``\n        :raise: ``NullArgument`` -- ``agent_id`` or ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentSmartAgencySession", 
         "shortname": "AgentSmartAgencySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``AgentQuery`` can be retrieved from this session and mapped to\n    this ``Agency`` to create a virtual collection of ``Agents``. The\n    agents may be sequenced using the ``AgentSearchOrder`` from this\n    session.\n\n    This ``Agency`` has a default query that matches any agent and a\n    default search order that specifies no sequencing. The queries may\n    be examined using an ``AgentQueryInspector``. The query may be\n    modified by converting the inspector back to an ``AgentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_manage_smart_agencies", 
            "get_agent_query", 
            "get_agent_search_order", 
            "apply_agent_query", 
            "inspect_agent_query", 
            "apply_agent_sequencing", 
            "get_agent_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_agencies", 
               "doc": {
                  "headline": "Tests if this user can manage smart agencies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart agency management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart agency management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query", 
               "doc": {
                  "headline": "Gets an agent query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_agent_search_order", 
               "doc": {
                  "headline": "Gets an agent search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_agent_query", 
               "doc": {
                  "headline": "Applies an agent query to this agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_query (osid.authentication.AgentQuery): the agent\n                query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``agent_query`` not of this service", 
               "sphinx_param_doc": "        :param agent_query: the agent query\n        :type agent_query: ``osid.authentication.AgentQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``agent_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentQuery", 
                     "var_name": "agent_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_agent_query", 
               "doc": {
                  "headline": "Gets an agent query inspector for this agency.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the agent\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query inspector\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_agent_sequencing", 
               "doc": {
                  "headline": "Applies an agent search order to this agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_search_order\n                (osid.authentication.AgentSearchOrder): the agent search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``agent_search_order`` not of this service", 
               "sphinx_param_doc": "        :param agent_search_order: the agent search order\n        :type agent_search_order: ``osid.authentication.AgentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``agent_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentSearchOrder", 
                     "var_name": "agent_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_from_inspector", 
               "doc": {
                  "headline": "Gets an agent query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_query_inspector\n                (osid.authentication.AgentQueryInspector): a query\n                inspector\n", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  NullArgument - ``agent_query_inspector`` is ``null``\n        raise:  Unsupported - ``agent_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param agent_query_inspector: a query inspector\n        :type agent_query_inspector: ``osid.authentication.AgentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``agent_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentQueryInspector", 
                     "var_name": "agent_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentQueryInspector"
               ], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyLookupSession", 
         "shortname": "AgencyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Agency`` objects.", 
            "body": "    The ``Agency`` represents a collection of ``Agents``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Agencies`` it can access, without breaking execution.\n    However, an administrative application may require all ``Agency``\n    elements to be available.\n    \n    Agencies may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Agency``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_agencies", 
            "use_comparative_agency_view", 
            "use_plenary_agency_view", 
            "get_agency", 
            "get_agencies_by_ids", 
            "get_agencies_by_genus_type", 
            "get_agencies_by_parent_genus_type", 
            "get_agencies_by_record_type", 
            "get_agencies_by_provider", 
            "get_agencies"
         ], 
         "methods": [
            {
               "name": "can_lookup_agencies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Agency`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_agency_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_agency_view", 
               "doc": {
                  "headline": "A complete view of the ``Agency`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Agency`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to an ``Agency`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (osid.authentication.Agency) - the agency", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the agency\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_ids", 
               "doc": {
                  "headline": "Gets an ``AgencyList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the agencies\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Agency`` objects may be omitted from the list and\n        may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    agency_ids (osid.id.IdList): a list of agency ``Ids``\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``Agency`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``agency_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_ids: a list of agency ``Ids``\n        :type agency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agency`` list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``agency_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``AgencyList`` corresponding to the given agency genus ``Type`` which does not include agencies of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agencies\n        or an error results. Otherwise, the returned list may contain\n        only those agencies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agency_genus_type (osid.type.Type): an agency genus type\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``Agency`` list", 
               "error_doc": "        raise:  NullArgument - ``agency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_genus_type: an agency genus type\n        :type agency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agency`` list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``AgencyList`` corresponding to the given agency genus ``Type`` and include any additional agencies with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agencies\n        or an error results. Otherwise, the returned list may contain\n        only those agencies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agency_genus_type (osid.type.Type): an agency genus type\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``Agency`` list", 
               "error_doc": "        raise:  NullArgument - ``agency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_genus_type: an agency genus type\n        :type agency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agency`` list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_record_type", 
               "doc": {
                  "headline": "Gets an ``AgencyList`` containing the given agency record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known agencies\n        or an error results. Otherwise, the returned list may contain\n        only those agencies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``Agency`` list", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agency`` list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies_by_provider", 
               "doc": {
                  "headline": "Gets an ``AgencyList`` from the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known agencies\n        or an error results. Otherwise, the returned list may contain\n        only those agencies that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``Agency`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Agency`` list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agencies", 
               "doc": {
                  "headline": "Gets all ``Agencies``.", 
                  "body": "        In plenary mode, the returned list contains all known agencies\n        or an error results. Otherwise, the returned list may contain\n        only those agencies that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyList) - an ``AgencyList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AgencyList``\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyQuerySession", 
         "shortname": "AgencyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Agency`` objects.", 
            "body": "    The search query is constructed using the ``AgencyQuery``.\n\n    Agencies may have a query record indicated by their respective\n    record types. The query record is accessed via the ``AgencyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_agencies", 
            "get_agency_query", 
            "get_agencies_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_agencies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Agency`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an app"
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agency_query", 
               "doc": {
                  "headline": "Gets an agency query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQuery) - an agency query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an agency query\n        :rtype: ``osid.authentication.AgencyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_agencies_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Agency`` objects matching the given agency query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_query (osid.authentication.AgencyQuery): the\n                agency query\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the returned\n                ``AgencyList``", 
               "error_doc": "        raise:  NullArgument - ``agency_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agency_query`` is not of this service", 
               "sphinx_param_doc": "        :param agency_query: the agency query\n        :type agency_query: ``osid.authentication.AgencyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``AgencyList``\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agency_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyQuery", 
                     "var_name": "agency_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyQuery"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencySearchSession", 
         "shortname": "AgencySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Agency`` objects.", 
            "body": "    The search query is constructed using the ``AgencyQuery``.\n\n    ``get_agencies_by_query()`` is the basic search method and returns a\n    list of ``Agency`` objects.A more advanced search may be performed\n    with ``getAgenciesBySearch()``. It accepts a ``AgencySearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_agencies_by_search()`` returns a ``AgencySearchResults`` that\n    can be used to access the resulting ``AgencyList`` or be used to\n    perform a search within the result set through ``AgencySearch``.\n    \n    Agencies may have a query record indicated by their respective\n    record types. The query record is accessed via the ``AgencyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.authentication.AgencyQuerySession"
         ], 
         "inherit_shortnames": [
            "AgencyQuerySession"
         ], 
         "inherit_pkg_names": [
            "authentication"
         ], 
         "inheritance": [
            {
               "pkg_name": "authentication", 
               "name": "AgencyQuerySession"
            }
         ], 
         "method_names": [
            "get_agency_search", 
            "get_agency_search_order", 
            "get_agencies_by_search", 
            "get_agency_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_agency_search", 
               "doc": {
                  "headline": "Gets an agency search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencySearch) - an agency search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an agency search\n        :rtype: ``osid.authentication.AgencySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencySearch", 
               "errors": {}
            }, 
            {
               "name": "get_agency_search_order", 
               "doc": {
                  "headline": "Gets an agency search order.", 
                  "body": "        The ``AgencySearchOrder`` is supplied to a ``AgencySearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencySearchOrder) - the agency\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency search order\n        :rtype: ``osid.authentication.AgencySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_agencies_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_query (osid.authentication.AgencyQuery): the\n                agency query\n        arg:    agency_search (osid.authentication.AgencySearch): the\n                agency search\n", 
               "return_doc": "        return: (osid.authentication.AgencySearchResults) - the search\n                results", 
               "error_doc": "        raise:  NullArgument - ``agency_query`` or ``agency_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agency_query`` or ``agency_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param agency_query: the agency query\n        :type agency_query: ``osid.authentication.AgencyQuery``\n        :param agency_search: the agency search\n        :type agency_search: ``osid.authentication.AgencySearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.authentication.AgencySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_query`` or ``agency_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agency_query`` or ``agency_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyQuery", 
                     "var_name": "agency_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.authentication.AgencySearch", 
                     "var_name": "agency_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyQuery", 
                  "osid.authentication.AgencySearch"
               ], 
               "return_type": "osid.authentication.AgencySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_query_from_inspector", 
               "doc": {
                  "headline": "Gets an agency query from an inspector.", 
                  "body": "        The inspector is available from an ``AgencySearchResults``."
               }, 
               "arg_doc": "        arg:    agency_query_inspector\n                (osid.authentication.AgencyQueryInspector): an agency\n                query inspector\n", 
               "return_doc": "        return: (osid.authentication.AgencyQuery) - the agency query", 
               "error_doc": "        raise:  NullArgument - ``agency_query_inspector`` is ``null``\n        raise:  Unsupported - ``agency_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param agency_query_inspector: an agency query inspector\n        :type agency_query_inspector: ``osid.authentication.AgencyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the agency query\n        :rtype: ``osid.authentication.AgencyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``agency_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyQueryInspector", 
                     "var_name": "agency_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyQueryInspector"
               ], 
               "return_type": "osid.authentication.AgencyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyAdminSession", 
         "shortname": "AgencyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Agencies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Agency,`` an ``AgencyForm`` is requested using\n    ``get_agency_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``AgencyForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``AgencyForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``AgencyForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``AgencyForms`` are requested to the ``Agency``  ``Id``\n    that is to be updated using ``getAgencyFormForUpdate()``. Similarly,\n    the ``AgencyForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``AgencyForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Agencies``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_agencies", 
            "can_create_agency_with_record_types", 
            "get_agency_form_for_create", 
            "create_agency", 
            "can_update_agencies", 
            "get_agency_form_for_update", 
            "update_agency", 
            "can_delete_agencies", 
            "delete_agency", 
            "can_manage_agency_aliases", 
            "alias_agency"
         ], 
         "methods": [
            {
               "name": "can_create_agencies", 
               "doc": {
                  "headline": "Tests if this user can create ``Agencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Agency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agency`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agency`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_agency_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Agency`` using the desired record types.", 
                  "body": "        While ``AuthenticationManager.getAgencyRecordTypes()`` can be\n        used to examine which records are supported, this method tests\n        which record(s) are required for creating a specific ``Agency``.\n        Providing an empty array tests if an ``Agency`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    agency_record_types (osid.type.Type[]): array of agency\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Agency`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``agency_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param agency_record_types: array of agency record types\n        :type agency_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Agency`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "agency_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_form_for_create", 
               "doc": {
                  "headline": "Gets the agency form for creating new agencies.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    agency_record_types (osid.type.Type[]): array of agency\n                record types\n", 
               "return_doc": "        return: (osid.authentication.AgencyForm) - the agency form", 
               "error_doc": "        raise:  NullArgument - ``agency_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param agency_record_types: array of agency record types\n        :type agency_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the agency form\n        :rtype: ``osid.authentication.AgencyForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "agency_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.authentication.AgencyForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_agency", 
               "doc": {
                  "headline": "Creates a new ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_form (osid.authentication.AgencyForm): the form\n                for this ``Agency``\n", 
               "return_doc": "        return: (osid.authentication.Agency) - the new ``Agency``", 
               "error_doc": "        raise:  IllegalState - ``agency_form`` already used for a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``agency_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agency_form`` did not originate from\n                ``get_agency_form_for_create()``", 
               "sphinx_param_doc": "        :param agency_form: the form for this ``Agency``\n        :type agency_form: ``osid.authentication.AgencyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Agency``\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``agency_form`` already used for a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``agency_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agency_form`` did not originate from ``get_agency_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyForm", 
                     "var_name": "agency_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyForm"
               ], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_agencies", 
               "doc": {
                  "headline": "Tests if this user can update ``Agencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Agency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agency`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agency`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agency_form_for_update", 
               "doc": {
                  "headline": "Gets the agency form for updating an existing agency.", 
                  "body": "        A new agency form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n", 
               "return_doc": "        return: (osid.authentication.AgencyForm) - the agency form", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the agency form\n        :rtype: ``osid.authentication.AgencyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgencyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_agency", 
               "doc": {
                  "headline": "Updates an existing agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_form (osid.authentication.AgencyForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``agency_form`` already used for an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``agency_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``agency_form`` did not originate from\n                ``get_agency_form_for_update()``", 
               "sphinx_param_doc": "        :param agency_form: the form containing the elements to be updated\n        :type agency_form: ``osid.authentication.AgencyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``agency_form`` already used for an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``agency_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``agency_form`` did not originate from ``get_agency_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencyForm", 
                     "var_name": "agency_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_agencies", 
               "doc": {
                  "headline": "Tests if this user can delete agencies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Agency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agency`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agency`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_agency", 
               "doc": {
                  "headline": "Deletes an ``Agency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency`` to remove\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_agency_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Agencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Agency`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Agency`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_agency", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Agency`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Agency`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another agency, it is\n        reassigned to the given entry ``Id``."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an ``Agency``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyNotificationSession", 
         "shortname": "AgencyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Agency`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_agency_notifications", 
            "register_for_new_agencies", 
            "register_for_new_agency_ancestors", 
            "register_for_new_agency_descendants", 
            "register_for_changed_agencies", 
            "register_for_changed_agency", 
            "register_for_deleted_agencies", 
            "register_for_deleted_agency", 
            "register_for_deleted_agency_ancestors", 
            "register_for_deleted_agency_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_agency_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Agency`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_agencies", 
               "doc": {
                  "headline": "Register for notifications of new agencies.", 
                  "body": "        ``AgencyReceiver.newAgency()`` is invoked when a new ``Agency``\n        is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_agency_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified agency in the agency hierarchy.", 
                  "body": "        ``AgencyReceiver.newAgencyAncestor()`` is invoked when the\n        specified agency experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_agency_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified agency in the agency hierarchy.", 
                  "body": "        ``AgencyReceiver.newAgencyDescendant()`` is invoked when the\n        specified agency experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_agencies", 
               "doc": {
                  "headline": "Registers for notification of updated agencies.", 
                  "body": "        ``AgencyReceiver.changedAgency()`` is invoked when an agency is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_agency", 
               "doc": {
                  "headline": "Registers for notification of an updated agency.", 
                  "body": "        ``AgencyReceiver.changedAgency()`` is invoked when the specified\n        agency is changed."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agencies", 
               "doc": {
                  "headline": "Registers for notification of deleted agencies.", 
                  "body": "        ``AgencyReceiver.deletedAgency()`` is invoked when an agency is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agency", 
               "doc": {
                  "headline": "Registers for notification of a deleted agency.", 
                  "body": "        ``AgencyReceiver.deletedAgency()`` is invoked when the specified\n        agency is deleted."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agency_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified agency in the agency hierarchy.", 
                  "body": "        ``AgencyReceiver.deletedAgencyAncestor()`` is invoked when the\n        specified agency experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_agency_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified agency in the agency hierarchy.", 
                  "body": "        ``AgencyReceiver.deletedAgencyDescednant()`` is invoked when the\n        specified agency experiences a removal of one of its\n        descendants."
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency to monitor\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyHierarchySession", 
         "shortname": "AgencyHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Agency`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Agency``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_agencies()`` and ``getChildAgencies()``. To relate\n    these ``Ids`` to another OSID, ``get_agency_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Agency`` available in the Authentication OSID is known to this\n    hierarchy but does not appear in the hierarchy traversal until added\n    as a root node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_agencies()`` or ``get_child_agencies()`` in\n    lieu of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: agency elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_hierarchy_id", 
            "get_agency_hierarchy", 
            "can_access_agency_hierarchy", 
            "use_comparative_agency_view", 
            "use_plenary_agency_view", 
            "get_root_agency_ids", 
            "get_root_agencies", 
            "has_parent_agencies", 
            "is_parent_of_agency", 
            "get_parent_agency_ids", 
            "get_parent_agencies", 
            "is_ancestor_of_agency", 
            "has_child_agencies", 
            "is_child_of_agency", 
            "get_child_agency_ids", 
            "get_child_agencies", 
            "is_descendant_of_agency", 
            "get_agency_node_ids", 
            "get_agency_nodes"
         ], 
         "methods": [
            {
               "name": "get_agency_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_agency_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_agency_view", 
               "doc": {
                  "headline": "The returns from the agency methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_agency_view", 
               "doc": {
                  "headline": "A complete view of the hierarchy returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_agency_ids", 
               "doc": {
                  "headline": "Gets the root agency ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root agency ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root agency ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_agencies", 
               "doc": {
                  "headline": "Gets the root agencies in this agency hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the root agencies", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root agencies\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_agencies", 
               "doc": {
                  "headline": "Tests if the ``Agency`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the agency has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the agency has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_agency", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``agency_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``id`` or ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``agency_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_agency_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the agency", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the agency\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_agencies", 
               "doc": {
                  "headline": "Gets the parents of the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the parents of the\n                agency", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the agency\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_agency", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``agency_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``agency_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_agencies", 
               "doc": {
                  "headline": "Tests if an agency has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an ``agency_id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``agency_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: an ``agency_id``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``agency_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_agency", 
               "doc": {
                  "headline": "Tests if a node is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``agency_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``agency_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_agency_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the agency", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` to query\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the agency\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_agencies", 
               "doc": {
                  "headline": "Gets the children of the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the children of the\n                agency", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` to query\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the agency\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_agency", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``agency_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``agency_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agency_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - an agency node", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` to query\n        :type agency_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an agency node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agency_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.authentication.AgencyNode) - an agency node", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` to query\n        :type agency_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an agency node\n        :rtype: ``osid.authentication.AgencyNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.authentication.AgencyNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyHierarchyDesignSession", 
         "shortname": "AgencyHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Agency`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Agency``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_hierarchy_id", 
            "get_agency_hierarchy", 
            "can_modify_agency_hierarchy", 
            "add_root_agency", 
            "remove_root_agency", 
            "add_child_agency", 
            "remove_child_agency", 
            "remove_child_agencies"
         ], 
         "methods": [
            {
               "name": "get_agency_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_agency_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_agency", 
               "doc": {
                  "headline": "Adds a root agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``agency_id`` is already in hierarchy\n        raise:  NotFound - ``agency`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``agency_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``agency`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_agency", 
               "doc": {
                  "headline": "Removes a root agency from this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``agency_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``agency_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_agency", 
               "doc": {
                  "headline": "Adds a child to an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``agency_id`` already a parent of\n                ``child_id``\n        raise:  NotFound - ``agency_id`` or ``child_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``agency_id`` already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``agency_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_agency", 
               "doc": {
                  "headline": "Removes a child from an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agency_id is`` not a parent of ``child_id``\n        raise:  NullArgument - ``agency_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id is`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``agency_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_agencies", 
               "doc": {
                  "headline": "Removes all children from an agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of an agency\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agency_id`` is not in hierarchy\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of an agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` is not in hierarchy\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.Agent", 
         "shortname": "Agent", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Agent`` represents an authenticatable identity.", 
            "body": "    Like all OSID objects, an ``Agent`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_agent_record"
         ], 
         "methods": [
            {
               "name": "get_agent_record", 
               "doc": {
                  "headline": "Gets the agent record corresponding to the given ``Agent`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``agent_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(agent_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.authentication.records.AgentRecord) - the agent\n                record", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agent_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_record_type: the type of the record to retrieve\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent record\n        :rtype: ``osid.authentication.records.AgentRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentRecord", 
         "shortname": "AgentRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Agent``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentQuery", 
         "shortname": "AgentQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching agents.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``.\n\n    The following example returns agents whose display name begins with\n    \"Tom\" and whose \"login name\" is \"tom\" or \"tjcoppet\" in an agent\n    record specified by ``companyAgentType``.\n      Agent Query query = session.getAgentQuery();\n      \n      query.matchDisplayName(\"Tom*\", wildcardStringMatchType, true);\n      \n      companyAgentQuery = query.getAgentQueryRecord(companyAgentType);\n      companyAgentQuery.matchLoginName(\"tom\");\n      companyAgentQuery = query.getAgentQueryRecord(companyAgentType);\n      companyAgentQuery.matchLoginName(\"tjcoppet\");\n      \n      AgentList agentList = session.getAgentsByQuery(query);\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_resource_id", 
            "clear_resource_id_terms", 
            "supports_resource_query", 
            "get_resource_query", 
            "match_any_resource", 
            "clear_resource_terms", 
            "match_agency_id", 
            "clear_agency_id_terms", 
            "supports_agency_query", 
            "get_agency_query", 
            "clear_agency_terms", 
            "get_agent_query_record"
         ], 
         "methods": [
            {
               "name": "match_resource_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``", 
               "sphinx_param_doc": "        :param agency_id: a resource ``Id``\n        :type agency_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_resource", 
               "doc": {
                  "headline": "Matches agents with any resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` if to match agents with a\n                resource, ``false`` to match agents with no resource\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` if to match agents with a resource, ``false`` to match agents with no resource\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_resource_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_agency_id", 
               "doc": {
                  "headline": "Sets the agency ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agency_id_terms", 
               "doc": {
                  "headline": "Clears the agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_agency_query", 
               "doc": {
                  "headline": "Tests if an ``AgencyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agency query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agency query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agency_query", 
               "doc": {
                  "headline": "Gets the query for an agency.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQuery) - the agency query", 
               "error_doc": "        raise:  Unimplemented - ``supports_agency_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency query\n        :rtype: ``osid.authentication.AgencyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_agency_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agency_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agency_terms", 
               "doc": {
                  "headline": "Clears the agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query_record", 
               "doc": {
                  "headline": "Gets the agent query record corresponding to the given ``Agent`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): an agent record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentQueryRecord) - the\n                agent query record", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agent_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_record_type: an agent record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent query record\n        :rtype: ``osid.authentication.records.AgentQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentQueryRecord", 
         "shortname": "AgentQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentQueryInspector", 
         "shortname": "AgentQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining agent queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_resource_id_terms", 
            "get_resource_terms", 
            "get_agency_id_terms", 
            "get_agency_terms", 
            "get_agent_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_resource_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_terms", 
               "doc": {
                  "headline": "Gets the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agency_id_terms", 
               "doc": {
                  "headline": "Gets the agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agency ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_agency_terms", 
               "doc": {
                  "headline": "Gets the agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQueryInspector) - the agency\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency terms\n        :rtype: ``osid.authentication.AgencyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query_inspector_record", 
               "doc": {
                  "headline": "Gets the query inspector record corresponding to the given ``Agent`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): an agent record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentQueryInspectorRecord)\n                - the agent query inspector record", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agent_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_record_type: an agent record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent query inspector record\n        :rtype: ``osid.authentication.records.AgentQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentQueryInspectorRecord", 
         "shortname": "AgentQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentForm", 
         "shortname": "AgentForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Agents``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``AgentAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_agent_form_record"
         ], 
         "methods": [
            {
               "name": "get_agent_form_record", 
               "doc": {
                  "headline": "Gets the ``AgentFormRecord`` corresponding to the given agent record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): the agent record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentFormRecord) - the\n                agent form record", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agent_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_record_type: the agent record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent form record\n        :rtype: ``osid.authentication.records.AgentFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentFormRecord", 
         "shortname": "AgentFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentSearchOrder", 
         "shortname": "AgentSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_resource", 
            "supports_resource_search_order", 
            "get_resource_search_order", 
            "get_agent_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_resource", 
               "doc": {
                  "headline": "Orders the results by resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_resource_search_order", 
               "doc": {
                  "headline": "Tests if a ``ResourceSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order\n                interface is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_order", 
               "doc": {
                  "headline": "Gets the resource search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search odrer", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search odrer\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_order_record", 
               "doc": {
                  "headline": "Gets the agent search order record corresponding to the given agent record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    agent_record_type (osid.type.Type): an agent record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentSearchOrderRecord) -\n                the agent search order record", 
               "error_doc": "        raise:  NullArgument - ``agent_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agent_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_record_type: an agent record type\n        :type agent_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent search order record\n        :rtype: ``osid.authentication.records.AgentSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentSearchOrderRecord", 
         "shortname": "AgentSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentSearch", 
         "shortname": "AgentSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``AgentSearch`` defines the interface for specifying agent search options.", 
            "body": "    This example gets a limited set of squid-like agents. AgentSearch as\n    = session.getAgentSearch(); as.limitResultSet(25, 50); AgentQuery\n    queries[1]; queries[0] = session.getAgentQuery(); String kword =\n    \"squid\"; queries[0].matchKeywords(kword, true); AgentSearchResults\n    results = session.getAgentsBySearch(queries, as); AgentList list =\n    results.getAgents();"
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_agents", 
            "order_agent_results", 
            "get_agent_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_agents", 
               "doc": {
                  "headline": "Execute this search among the given list of agents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_ids (osid.id.IdList): list of agents\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_ids`` is ``null``", 
               "sphinx_param_doc": "        :param agent_ids: list of agents\n        :type agent_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agent_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_agent_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_search_order\n                (osid.authentication.AgentSearchOrder): agent search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_search_order`` is ``null``\n        raise:  Unsupported - ``agent_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param agent_search_order: agent search order\n        :type agent_search_order: ``osid.authentication.AgentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``agent_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgentSearchOrder", 
                     "var_name": "agent_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_search_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given agent search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    agent_search_record_type (osid.type.Type): an agent\n                search record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentSearchRecord) - the\n                agent search record", 
               "error_doc": "        raise:  NullArgument - ``agent_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(agent_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_search_record_type: an agent search record type\n        :type agent_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent search record\n        :rtype: ``osid.authentication.records.AgentSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentSearchRecord", 
         "shortname": "AgentSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentSearchResults", 
         "shortname": "AgentSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": "    AgentSearch as = session.getAgentSearch(); as.limitResultSet(25,\n    50); AgentQuery queries[1]; queries[0] = session.getAgentQuery();\n    String kwords[1]; kwords[0] = \"squid\";\n    queries[0].matchKeywords(kwords); AgentSearchResults results =\n    session.getAgentsBySearch(queries, as); AgentList list =\n    results.getAgents();"
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_agents", 
            "get_agent_query_inspector", 
            "get_agent_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_agents", 
               "doc": {
                  "headline": "Gets the agent list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentList) - the agent list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent list\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agent_search_results_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given agent search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    agent_search_record_type (osid.type.Type): an agent\n                search record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgentSearchResultsRecord) -\n                the agent search results record", 
               "error_doc": "        raise:  NullArgument - ``agent_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(agent_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agent_search_record_type: an agent search record type\n        :type agent_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agent search results record\n        :rtype: ``osid.authentication.records.AgentSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agent_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agent_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgentSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgentSearchResultsRecord", 
         "shortname": "AgentSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgentSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgentReceiver", 
         "shortname": "AgentReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The agent receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Agent`` objects.", 
            "body": "    A change to a key is a change to an ``Agent``."
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_agent", 
            "changed_agent", 
            "deleted_agent"
         ], 
         "methods": [
            {
               "name": "new_agent", 
               "doc": {
                  "headline": "The callback for notifications of new agents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the new ``Agent``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the new ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_agent", 
               "doc": {
                  "headline": "The callback for notification of updated agents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the updated\n                ``Agent``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the updated ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_agent", 
               "doc": {
                  "headline": "the callback for notification of deleted agents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the deleted\n                ``Agent``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the deleted ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgentList", 
         "shortname": "AgentList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AgentList`` provides a means for accessing ``Agent`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (al.hasNext()) { Agent agent = al.getNextAgent(); }\n\n    or\n      while (al.hasNext()) {\n           Agent[] agents = al.getNextAgents(al.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_agent", 
            "get_next_agents"
         ], 
         "methods": [
            {
               "name": "get_next_agent", 
               "doc": {
                  "headline": "Gets the next ``Agent`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the next ``Agent`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Agent`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Agent`` in this list. The ``has_next()`` method should be used to test that a next ``Agent`` is available before calling this method.\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_agents", 
               "doc": {
                  "headline": "Gets the next set of ``Agent`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Agent`` elements requested\n                which should be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.authentication.Agent) - an array of ``Agent``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Agent`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Agent`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.Agency", 
         "shortname": "Agency", 
         "category": "objects", 
         "doc": {
            "headline": "An agency defines a collection of agents.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_agency_record"
         ], 
         "methods": [
            {
               "name": "get_agency_record", 
               "doc": {
                  "headline": "Gets the agency record corresponding to the given ``Agency`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``agency_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(agency_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencyRecord) - the agency\n                record", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency record\n        :rtype: ``osid.authentication.records.AgencyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencyRecord", 
         "shortname": "AgencyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Agency``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencyQuery", 
         "shortname": "AgencyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching agencies.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_agent_id", 
            "clear_agent_id_terms", 
            "supports_agent_query", 
            "get_agent_query", 
            "match_any_agent", 
            "clear_agent_terms", 
            "match_ancestor_agency_id", 
            "clear_ancestor_agency_id_terms", 
            "supports_ancestor_agency_query", 
            "get_ancestor_agency_query", 
            "match_any_ancestor_agency", 
            "clear_ancestor_agency_terms", 
            "match_descendant_agency_id", 
            "clear_descendant_agency_id_terms", 
            "supports_descendant_agency_query", 
            "get_descendant_agency_query", 
            "match_any_descendant_agency", 
            "clear_descendant_agency_terms", 
            "get_agency_query_record"
         ], 
         "methods": [
            {
               "name": "match_agent_id", 
               "doc": {
                  "headline": "Sets the agent ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agent_id_terms", 
               "doc": {
                  "headline": "Clears the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_agent_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_agent", 
               "doc": {
                  "headline": "Matches agencies with any agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match agencies with any\n                agent. ``false`` to match agencies with no agents\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match agencies with any agent. ``false`` to match agencies with no agents\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_agent_terms", 
               "doc": {
                  "headline": "Clears the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_agency_id", 
               "doc": {
                  "headline": "Sets the agency ``Id`` for this query to match agencies that have the specified agency as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_agency_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_agency_query", 
               "doc": {
                  "headline": "Tests if an ``AgencyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agency query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agency query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_agency_query", 
               "doc": {
                  "headline": "Gets the query for an agency.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agency query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_agency_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_agency_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_agency_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_agency", 
               "doc": {
                  "headline": "Matches agencies with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match agencies with any\n                ancestor, ``false`` to match root agencies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match agencies with any ancestor, ``false`` to match root agencies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_agency_terms", 
               "doc": {
                  "headline": "Clears the ancestor agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_agency_id", 
               "doc": {
                  "headline": "Sets the agency ``Id`` for this query to match agencies that have the specified agency as an descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): an agency ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_id`` is ``null``", 
               "sphinx_param_doc": "        :param agency_id: an agency ``Id``\n        :type agency_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_agency_id_terms", 
               "doc": {
                  "headline": "Clears the descendant agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_agency_query", 
               "doc": {
                  "headline": "Tests if an ``AgencyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agency query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agency query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_agency_query", 
               "doc": {
                  "headline": "Gets the query for an agency.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agency query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_agency_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_agency_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_agency_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_agency", 
               "doc": {
                  "headline": "Matches agencies with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match agencies with any\n                descendant, ``false`` to match leaf agencies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match agencies with any descendant, ``false`` to match leaf agencies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_agency_terms", 
               "doc": {
                  "headline": "Clears the descendant agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_agency_query_record", 
               "doc": {
                  "headline": "Gets the agency query record corresponding to the given ``Agency`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencyQueryRecord) - the\n                agency query record", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency query record\n        :rtype: ``osid.authentication.records.AgencyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencyQueryRecord", 
         "shortname": "AgencyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencyQueryInspector", 
         "shortname": "AgencyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_agent_id_terms", 
            "get_agent_terms", 
            "get_ancestor_agency_id_terms", 
            "get_ancestor_agency_terms", 
            "get_descendant_agency_id_terms", 
            "get_descendant_agency_terms", 
            "get_agency_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_agent_id_terms", 
               "doc": {
                  "headline": "Gets the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_agent_terms", 
               "doc": {
                  "headline": "Gets the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_agency_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor agency ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor agency ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_agency_terms", 
               "doc": {
                  "headline": "Gets the ancestor agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQueryInspector) - the\n                ancestor agency terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor agency terms\n        :rtype: ``osid.authentication.AgencyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_agency_id_terms", 
               "doc": {
                  "headline": "Gets the descendant agency ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant agency\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant agency ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_agency_terms", 
               "doc": {
                  "headline": "Gets the descendant agency terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQueryInspector) - the\n                descendant agency terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant agency terms\n        :rtype: ``osid.authentication.AgencyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agency_query_inspector_record", 
               "doc": {
                  "headline": "Gets the agency query inspector record corresponding to the given ``Agency`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencyQueryInspectorRecord)\n                - the agency query inspector record", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency query inspector record\n        :rtype: ``osid.authentication.records.AgencyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencyQueryInspectorRecord", 
         "shortname": "AgencyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencyForm", 
         "shortname": "AgencyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating agencies.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``AgencyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_agency_form_record"
         ], 
         "methods": [
            {
               "name": "get_agency_form_record", 
               "doc": {
                  "headline": "Gets the ``AgencyFormRecord`` corresponding to the given agency record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencyFormRecord) - the\n                agency form record", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency form record\n        :rtype: ``osid.authentication.records.AgencyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencyFormRecord", 
         "shortname": "AgencyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencySearchOrder", 
         "shortname": "AgencySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_agency_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_agency_search_order_record", 
               "doc": {
                  "headline": "Gets the agency search order record corresponding to the given agency record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    agency_record_type (osid.type.Type): an agency record\n                type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencySearchOrderRecord) -\n                the agency search order record", 
               "error_doc": "        raise:  NullArgument - ``agency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(agency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_record_type: an agency record type\n        :type agency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency search order record\n        :rtype: ``osid.authentication.records.AgencySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencySearchOrderRecord", 
         "shortname": "AgencySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencySearch", 
         "shortname": "AgencySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing agency searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_agencies", 
            "order_agency_results", 
            "get_agency_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_agencies", 
               "doc": {
                  "headline": "Execute this search among the given list of agencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_ids (osid.id.IdList): list of agencies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_ids`` is ``null``", 
               "sphinx_param_doc": "        :param agency_ids: list of agencies\n        :type agency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "agency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_agency_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_search_order\n                (osid.authentication.AgencySearchOrder): agency search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agency_search_order`` is ``null``\n        raise:  Unsupported - ``agency_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param agency_search_order: agency search order\n        :type agency_search_order: ``osid.authentication.AgencySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``agency_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.AgencySearchOrder", 
                     "var_name": "agency_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.AgencySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_search_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given agency search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    agency_search_record_type (osid.type.Type): an agency\n                search record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencySearchRecord) - the\n                agency search record", 
               "error_doc": "        raise:  NullArgument - ``agency_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(agency_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_search_record_type: an agency search record type\n        :type agency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency search record\n        :rtype: ``osid.authentication.records.AgencySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencySearchRecord", 
         "shortname": "AgencySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencySearchResults", 
         "shortname": "AgencySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_agencies", 
            "get_agency_query_inspector", 
            "get_agency_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_agencies", 
               "doc": {
                  "headline": "Gets the agency list resultrng from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyList) - the agency list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency list\n        :rtype: ``osid.authentication.AgencyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agency_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.authentication.AgencyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agency_search_results_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given agency search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    agency_search_record_type (osid.type.Type): an agency\n                search record type\n", 
               "return_doc": "        return: (osid.authentication.records.AgencySearchResultsRecord)\n                - the agency search results record", 
               "error_doc": "        raise:  NullArgument - ``agency_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(agency_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param agency_search_record_type: an agency search record type\n        :type agency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the agency search results record\n        :rtype: ``osid.authentication.records.AgencySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agency_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(agency_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "agency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.records.AgencySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.records.AgencySearchResultsRecord", 
         "shortname": "AgencySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AgencySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.AgencyReceiver", 
         "shortname": "AgencyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The agency receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Agency`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_agency", 
            "new_ancestor_agency", 
            "new_descendant_agency", 
            "changed_agency", 
            "deleted_agency", 
            "deleted_ancestor_agency", 
            "deleted_descendant_agency"
         ], 
         "methods": [
            {
               "name": "new_agency", 
               "doc": {
                  "headline": "The callback for notifications of new agencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the new ``Agency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the new ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_agency", 
               "doc": {
                  "headline": "The callback for notifications of new agency ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n        arg:    ancestor_id (osid.id.Id):\n                ``has_record_type(agency_record_type)`` is ``false``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param ancestor_id: ``has_record_type(agency_record_type)`` is ``false``\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_agency", 
               "doc": {
                  "headline": "The callback for notifications of new agency descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Agency`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Agency`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_agency", 
               "doc": {
                  "headline": "The callback for notification of updated agencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the updated\n                ``Agency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the updated ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_agency", 
               "doc": {
                  "headline": "The callback for notification of deleted agencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the deleted\n                ``Agency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the deleted ``Agency``\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_agency", 
               "doc": {
                  "headline": "The callback for notifications of deleted agency ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Agency`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Agency`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_agency", 
               "doc": {
                  "headline": "The callback for notifications of deleted agency descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the ``Agency``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Agency`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the ``Agency``\n        :type agency_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Agency`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyList", 
         "shortname": "AgencyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AgencyList`` provides a means for accessing ``Agency`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (al.hasNext()) { Agency agency = al.getNextAgency();\n    }\n\n    or\n      while (al.hasNext()) {\n           Agency[] agencies = al.getNextAgencies(al.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_agency", 
            "get_next_agencies"
         ], 
         "methods": [
            {
               "name": "get_next_agency", 
               "doc": {
                  "headline": "Gets the next ``Agency`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the next ``Agency`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Agency`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Agency`` in this list. The ``has_next()`` method should be used to test that a next ``Agency`` is available before calling this method.\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_agencies", 
               "doc": {
                  "headline": "Gets the next set of ``Agency`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Agency`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.authentication.Agency) - an array of ``Agency``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Agency`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Agency`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyNode", 
         "shortname": "AgencyNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``AgencyHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_agency", 
            "get_parent_agency_nodes", 
            "get_child_agency_nodes"
         ], 
         "methods": [
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the agency represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agency represented by this node\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {}
            }, 
            {
               "name": "get_parent_agency_nodes", 
               "doc": {
                  "headline": "Gets the parents of this agency.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyNodeList) - the parents of\n                the ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.authentication.AgencyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_agency_nodes", 
               "doc": {
                  "headline": "Gets the children of this agency.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyNodeList) - the children of\n                this agency", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this agency\n        :rtype: ``osid.authentication.AgencyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.AgencyNodeList", 
         "shortname": "AgencyNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AgencyNodeList`` provides a means for accessing ``AgencyNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (anl.hasNext()) { AgencyNode node =\n    anl.getNextAgencyNode(); }\n\n    or\n      while (anl.hasNext()) {\n           AgencyNode[] nodes = anl.getNextAgencyNodes(anl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_agency_node", 
            "get_next_agency_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_agency_node", 
               "doc": {
                  "headline": "Gets the next ``AgencyNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgencyNode) - the next\n                ``AgencyNode`` in this list. The ``has_next()`` method\n                should be used to test that a next ``AgencyNode`` is\n                available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``AgencyNode`` in this list. The ``has_next()`` method should be used to test that a next ``AgencyNode`` is available before calling this method.\n        :rtype: ``osid.authentication.AgencyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgencyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_agency_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``AgencyNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``AgencyNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.authentication.AgencyNode) - an array of\n                ``AgencyNode`` elements.The length of the array is less\n                than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``AgencyNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``AgencyNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.authentication.AgencyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.authentication.AgencyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.authentication"
}
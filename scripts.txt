from builders.mappers import map_all
map_all('all')

from builders.mappers import make_patterns
make_patterns()

from builders.abcbinder import make_abcosids
make_abcosids()

from builders.mdatabuilder import make_mdata
make_mdata()

from builders.mongobuilder import make_mongoosids
make_mongoosids()

from builders.azbuilder import make_azosids
make_azosids()

from builders.awsadapterbuilder import make_awsosids
make_awsosids()

from builders.managerutilbuilder import make_mgr_util_osids
make_mgr_util_osids()

from builders.fedbuilder import make_fedosids
make_fedosids()

from builders.kitbuilder import make_kitosids
make_kitosids()

from builders.kitdocbuilder import make_kitdocs
make_kitdocs()

from builders.osiddocbuilder import make_osiddocs
make_osiddocs()

from builders.kitdocsourcebuilder import make_kitdocs
make_kitdocs()

#from builders.djbuilder import make_djosids
#make_djosids()

#from builders.djmodelbuilder import make_djmodels
#make_djmodels()

from builders.mapcount import count_all
count_all()


read_file = open('./builders/package_maps/resource.json', 'r')
import json
pkg = json.load(read_file)
read_file.close()
from builders.mappers import make_impl_pattern_map
make_impl_pattern_map(package = pkg)


from resource_kit.dj_resource.settings import ID
id_module = __import__('.'.join(ID.split('.')[:-1]), fromlist = ID.split('.')[-1])
Id = getattr(id_module, 'Id')

Id = getattr(__import__('.'.join(ID.split('.')[:-1]), fromlist = ID.split('.')[-1]), 'Id')

## THIS IS THE BEGINNINGS OF A TEST FOR ResourceAdminSession:

from resource_kit.dj_resource.sessions import ResourceAdminSession
ras = ResourceAdminSession()
cf = ras.get_resource_form_for_create([])
cf.set_display_name('Second Resource')
cf.set_description('This is the Second Resource')
cf.is_valid()
new_resource = ras.create_resource(cf)                                 
new_resource_id = new_resource.get_id()
print '  --', new_resource.get_display_name().get_text()
print '    ', new_resource.get_description().get_text()
uf = ras.get_resource_form_for_update(new_resource_id)
uf.set_description('This is the edited Second Resource Description')
uf.is_valid()
ras.update_resource(uf)
print '  --', new_resource.get_display_name().get_text()
print '    ', new_resource.get_description().get_text()
ras.delete_resource(new_resource_id)
print '  --', new_resource.get_display_name().get_text(), 'has been deleted'

## THIS IS THE BEGINNINGS OF A TEST FOR Authorization:

from resource_kit.dj_resource.sessions import ResourceLookupSession
rls = ResourceLookupSession()
from authorization_kit.dj_authorization.sessions import AuthorizationSession
azs = AuthorizationSession(username='birdland', password='maliska')
from id_kit.dj_id.primitives import Id
f_id = Id(authority='birdland.mit.edu', namespace='authorization.Function', identifier='lookup')
q_id = Id(authority='birdland.mit.edu', namespace='resource.Bin', identifier='default')
a_id = azs.get_authenticated_agent_id()
azs.is_authorized(agent_id=a_id, function_id=f_id, qualifier_id=q_id)

## THIS IS THE BEGINNINGS OF A TEST FOR sc_learning LookupSessions:

from learning_kit.hc_learning.sessions import ObjectiveBankLookupSession  
obls = ObjectiveBankLookupSession()
obs = obls.get_objective_banks()
ids = []
for o in obs: 
    ids.append(o.get_id())

ids
new_obs = obls.get_objective_banks_by_ids(ids)

## GET FIRST OBJECTIVE BANK:
from learning_kit.hc_learning.sessions import ObjectiveBankLookupSession  
obls = ObjectiveBankLookupSession()
obs = obls.get_objective_banks()
firstob = obs.get_next_objective_bank()
secondob = obs.get_next_objective_bank()
firstobid = firstob.get_id()
secondobid = secondob.get_id()

## GET OBJECTIVES BY OBJECTIVEBANK
from learning_kit.hc_learning.sessions import ObjectiveLookupSession 
ols = ObjectiveLookupSession(secondobid)
objlist = ols.get_objectives()

from learning_kit.dj_learning.sessions import ObjectiveLookupSession  
ols = ObjectiveLookupSession()
objs = ols.get_objectives()
ids = []
for o in objs: 
    ids.append(o.get_id())


from learning_kit.learning_federator.managers import LearningManager
lm = LearningManager()
lm.supports_objective_lookup()
fols = lm.get_objective_lookup_session()
fols.get_objective(ids[0]).get_display_name().get_text()

# Make a new objective:

from learning_kit.dj_learning.sessions import ObjectiveAdminSession
oas = ObjectiveAdminSession()
cf = oas.get_objective_form_for_create([])
cf.set_display_name('First Objective')
cf.set_description('This is the First Objective')
cf.is_valid()
new_objective = oas.create_objective(cf)                                 
new_objective_id = new_objective.get_id()

# Testing relationship lookup service

from dlkit.handcar.relationship.managers import RelationshipManager
rm = RelationshipManager()
rls = rm.get_relationship_lookup_session()

# Testing relationship admin service

from dlkit.services.relationship import RelationshipManager
rm = RelationshipManager()
for f in rm.families:
    if f.display_name.text == 'TLL Test':
        family = f

from dlkit.services.learning import LearningManager
lm = LearningManager()
for ob in lm.objective_banks:
    if ob.display_name.text == 'TLL Test':
        bank = ob

objs = bank.objectives
rfc = family.get_relationship_form_for_create(objs.next().ident, objs.next().ident)
relationship = family.create_relationship(rfc)

#Testing Id sieralization

from builders.kitbuilder import make_kitosids
make_kitosids()
from dlkit.services.primitives import Id
from dlkit.services.learning import LearningManager
lm = LearningManager()
ob = lm.objective_banks.next()
idstr = str(Id(ob.ident))
obid = Id(identstr=idstr)


from dlkit.mongo.learning.objects import ObjectiveForm
of = ObjectiveForm(objective_bank_id='00000000000000000000')
from dlkit.mongo.learning.objects import Objective
o = Objective(of._my_map)
o.get_display_name().text
o.get_display_name().language_type

# Testing Mongo create Objective Bank
from dlkit.mongo.learning.managers import LearningManager
lm = LearningManager()
obas = lm.get_objective_bank_admin_session()
obf = obas.get_objective_bank_form_for_create([])

# Testing proxy authentication
from dlkit.services.proxy import ProxyManager
pm = ProxyManager()
from proxy_example import TestRequest
request = TestRequest(authenticated = False)
pc = pm.get_proxy_condition()
pc.set_http_request(request)
p = pm.get_proxy(pc)

from dlkit.handcar.learning.managers import LearningProxyManager
lpm = LearningProxyManager()
obls = lpm.get_objective_bank_lookup_session(p)
for ob in obls.objective_banks:
    if ob.display_name.text == "Crosslinks":
        bank = ob

ols =  lpm.get_objective_lookup_session_for_objective_bank(bank.ident, p)


from dlkit.services.assessment import AssessmentManager
import datetime
for b in AssessmentManager().banks:
    bank = b

for n in [1]:
    c = 0
    t = datetime.datetime.now()
    for i in bank.items:
        c += 1
        id = i.ident
        print i.get_edxml()
    print datetime.datetime.now() - t
    print "number of items = ", c


from dlkit.services.assessment import AssessmentManager
am = AssessmentManager()
for b in am.banks:
    bank = b

iq = bank.get_item_query()
from dlkit.mongo.locale.types import String
from dlkit.mongo.primitives import Type
EXACT_STRING_MATCH_TYPE = Type(**String().get_type_data('EXACT'))
IGNORECASE_STRING_MATCH_TYPE = Type(**String().get_type_data('IGNORECASE'))
iq.match_display_name('edx: Problem rerequisites', EXACT_STRING_MATCH_TYPE, True)
iq._query_terms

import datetime
from dlkit.mongo.repository.managers import RepositoryManager
t = datetime.datetime.now()
n = 0
for n in [1]:
    while n < 10000:
        rm = RepositoryManager()
        als = rm.get_asset_lookup_session()
        n += 1
    print datetime.datetime.now() - t


from dlkit_django import runtime, proxy_session, proxy_example
request = proxy_example.TestRequest(username='birdland')
condition = proxy_session.get_proxy_condition()
condition.set_http_request(request)
proxy = proxy_session.get_proxy(condition)
am = runtime.get_service_manager('ASSESSMENT', proxy)
